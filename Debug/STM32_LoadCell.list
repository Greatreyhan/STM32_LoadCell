
STM32_LoadCell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c588  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  0800c728  0800c728  0001c728  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf8  0800cbf8  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbf8  0800cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc00  0800cc00  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800cc08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001580  200002c4  0800cecc  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001844  0800cecc  00021844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5c4  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ebd  00000000  00000000  0002e8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  000317b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094b  00000000  00000000  00032460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c34  00000000  00000000  00032dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fadf  00000000  00000000  0004b9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088447  00000000  00000000  0005b4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047ec  00000000  00000000  000e3908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e80f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c710 	.word	0x0800c710

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800c710 	.word	0x0800c710

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <hx711_init>:
 *      Author: greatreyhan
 */

#include "HX711.h"

void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	80fb      	strh	r3, [r7, #6]
  hx711->clk_gpio = clk_gpio;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	88fa      	ldrh	r2, [r7, #6]
 800101a:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001026:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	68b8      	ldr	r0, [r7, #8]
 8001050:	f000 ff02 	bl	8001e58 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8001060:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	6838      	ldr	r0, [r7, #0]
 800106c:	f000 fef4 	bl	8001e58 <HAL_GPIO_Init>

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <set_scale>:

void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	ed87 0a02 	vstr	s0, [r7, #8]
 8001084:	edc7 0a01 	vstr	s1, [r7, #4]
	hx711->Ascale = Ascale;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	61da      	str	r2, [r3, #28]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <set_gain>:

void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	4613      	mov	r3, r2
 80010ae:	70bb      	strb	r3, [r7, #2]
	switch (Again) {
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	2b40      	cmp	r3, #64	; 0x40
 80010b4:	d005      	beq.n	80010c2 <set_gain+0x22>
 80010b6:	2b80      	cmp	r3, #128	; 0x80
 80010b8:	d107      	bne.n	80010ca <set_gain+0x2a>
			case 128:
				hx711->Again = 1;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	751a      	strb	r2, [r3, #20]
				break;
 80010c0:	e003      	b.n	80010ca <set_gain+0x2a>
			case 64:
				hx711->Again = 3;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	751a      	strb	r2, [r3, #20]
				break;
 80010c8:	bf00      	nop
		}
	hx711->Bgain = 2;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2202      	movs	r2, #2
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <set_offset>:

void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <set_offset+0x1c>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 80010f8:	e002      	b.n	8001100 <set_offset+0x22>
	else hx711->Boffset = offset;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	619a      	str	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <shiftIn>:

uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 800111c:	2300      	movs	r3, #0
 800111e:	73bb      	strb	r3, [r7, #14]
 8001120:	e03e      	b.n	80011a0 <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	891b      	ldrh	r3, [r3, #8]
 800112a:	2201      	movs	r2, #1
 800112c:	4619      	mov	r1, r3
 800112e:	f001 f82f 	bl	8002190 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d113      	bne.n	8001160 <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	895b      	ldrh	r3, [r3, #10]
 8001140:	4619      	mov	r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f001 f80c 	bl	8002160 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	b25a      	sxtb	r2, r3
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	4313      	orrs	r3, r2
 800115a:	b25b      	sxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e014      	b.n	800118a <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	895b      	ldrh	r3, [r3, #10]
 8001168:	4619      	mov	r1, r3
 800116a:	4610      	mov	r0, r2
 800116c:	f000 fff8 	bl	8002160 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	b25a      	sxtb	r2, r3
 8001180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001184:	4313      	orrs	r3, r2
 8001186:	b25b      	sxtb	r3, r3
 8001188:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	891b      	ldrh	r3, [r3, #8]
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	f000 fffb 	bl	8002190 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	2b07      	cmp	r3, #7
 80011a4:	d9bd      	bls.n	8001122 <shiftIn+0x16>
    }
    return value;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <is_ready>:

bool is_ready(hx711_t *hx711) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	895b      	ldrh	r3, [r3, #10]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4610      	mov	r0, r2
 80011c4:	f000 ffcc 	bl	8002160 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <is_ready+0x22>
		return 1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <is_ready+0x24>
	}
	return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <wait_ready>:

void wait_ready(hx711_t *hx711) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	while (!is_ready(hx711)) {
 80011e4:	e002      	b.n	80011ec <wait_ready+0x10>
		HAL_Delay(0);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 fd00 	bl	8001bec <HAL_Delay>
	while (!is_ready(hx711)) {
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffdf 	bl	80011b0 <is_ready>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f3      	bne.n	80011e6 <wait_ready+0xa>
	}
}
 80011fe:	bf00      	nop
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <read>:

long read(hx711_t *hx711, uint8_t channel){
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffe1 	bl	80011dc <wait_ready>
	unsigned long value = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <read+0xd0>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	813b      	strh	r3, [r7, #8]
 8001224:	2300      	movs	r3, #0
 8001226:	72bb      	strb	r3, [r7, #10]
	uint8_t filler = 0x00;
 8001228:	2300      	movs	r3, #0
 800122a:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 8001230:	2101      	movs	r1, #1
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff6a 	bl	800110c <shiftIn>
 8001238:	4603      	mov	r3, r0
 800123a:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 800123c:	2101      	movs	r1, #1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff64 	bl	800110c <shiftIn>
 8001244:	4603      	mov	r3, r0
 8001246:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 8001248:	2101      	movs	r1, #1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff5e 	bl	800110c <shiftIn>
 8001250:	4603      	mov	r3, r0
 8001252:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <read+0x5e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7d1b      	ldrb	r3, [r3, #20]
 8001262:	75bb      	strb	r3, [r7, #22]
 8001264:	e003      	b.n	800126e <read+0x66>
	else gain = hx711->Bgain;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800126c:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	e012      	b.n	800129a <read+0x92>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	891b      	ldrh	r3, [r3, #8]
 800127c:	2201      	movs	r2, #1
 800127e:	4619      	mov	r1, r3
 8001280:	f000 ff86 	bl	8002190 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	891b      	ldrh	r3, [r3, #8]
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	f000 ff7e 	bl	8002190 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	3301      	adds	r3, #1
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3e8      	bcc.n	8001274 <read+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 80012a2:	b662      	cpsie	i
}
 80012a4:	bf00      	nop
	}

	interrupts();

	if (data[2] & 0x80) {
 80012a6:	7abb      	ldrb	r3, [r7, #10]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da02      	bge.n	80012b4 <read+0xac>
		filler = 0xFF;
 80012ae:	23ff      	movs	r3, #255	; 0xff
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	e001      	b.n	80012b8 <read+0xb0>
	} else {
		filler = 0x00;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]
	}

	value = ( (unsigned long)(filler) << 24
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 80012bc:	7abb      	ldrb	r3, [r7, #10]
 80012be:	041b      	lsls	r3, r3, #16
 80012c0:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 80012c2:	7a7b      	ldrb	r3, [r7, #9]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 80012c8:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	0800c728 	.word	0x0800c728

080012dc <read_average>:

long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	70fb      	strb	r3, [r7, #3]
 80012e8:	4613      	mov	r3, r2
 80012ea:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 80012f0:	2300      	movs	r3, #0
 80012f2:	72fb      	strb	r3, [r7, #11]
 80012f4:	e011      	b.n	800131a <read_average+0x3e>
		sum += read(hx711, channel);
 80012f6:	78bb      	ldrb	r3, [r7, #2]
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff84 	bl	8001208 <read>
 8001300:	4602      	mov	r2, r0
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 8001308:	2000      	movs	r0, #0
 800130a:	f000 fc6f 	bl	8001bec <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 800130e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	3301      	adds	r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	72fb      	strb	r3, [r7, #11]
 800131a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800131e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001322:	429a      	cmp	r2, r3
 8001324:	dbe7      	blt.n	80012f6 <read_average+0x1a>
	}
	return sum / times;
 8001326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <get_value>:

double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
 8001344:	4613      	mov	r3, r2
 8001346:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 800134c:	78bb      	ldrb	r3, [r7, #2]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <get_value+0x22>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	e002      	b.n	8001360 <get_value+0x28>
	else offset = hx711->Boffset;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 8001360:	78ba      	ldrb	r2, [r7, #2]
 8001362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffb7 	bl	80012dc <read_average>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8dd 	bl	8000534 <__aeabi_i2d>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001382:	eeb0 0a47 	vmov.f32	s0, s14
 8001386:	eef0 0a67 	vmov.f32	s1, s15
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <tare>:

void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
 800139c:	4613      	mov	r3, r2
 800139e:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel);
 80013a0:	78bb      	ldrb	r3, [r7, #2]
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ff2f 	bl	8001208 <read>
	double sum = read_average(hx711, times, channel);
 80013aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ae:	78ba      	ldrb	r2, [r7, #2]
 80013b0:	4619      	mov	r1, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff92 	bl	80012dc <read_average>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8ba 	bl	8000534 <__aeabi_i2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 80013c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013cc:	f7ff fbcc 	bl	8000b68 <__aeabi_d2iz>
 80013d0:	4601      	mov	r1, r0
 80013d2:	78bb      	ldrb	r3, [r7, #2]
 80013d4:	461a      	mov	r2, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fe81 	bl	80010de <set_offset>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <tare_all>:

void tare_all(hx711_t *hx711, uint8_t times) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffca 	bl	8001390 <tare>
	tare(hx711, times, CHANNEL_B);
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2201      	movs	r2, #1
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffc4 	bl	8001390 <tare>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <get_weight>:

float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
 800141c:	4613      	mov	r3, r2
 800141e:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel);
 8001420:	78bb      	ldrb	r3, [r7, #2]
 8001422:	4619      	mov	r1, r3
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff feef 	bl	8001208 <read>
	float scale = 0;
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 8001430:	78bb      	ldrb	r3, [r7, #2]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d103      	bne.n	800143e <get_weight+0x2e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e002      	b.n	8001444 <get_weight+0x34>
	else scale = hx711->Bscale;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 8001444:	78ba      	ldrb	r2, [r7, #2]
 8001446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800144a:	4619      	mov	r1, r3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff73 	bl	8001338 <get_value>
 8001452:	ec55 4b10 	vmov	r4, r5, d0
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff f87e 	bl	8000558 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4620      	mov	r0, r4
 8001462:	4629      	mov	r1, r5
 8001464:	f7ff f9fa 	bl	800085c <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fbc2 	bl	8000bf8 <__aeabi_d2f>
 8001474:	4603      	mov	r3, r0
 8001476:	ee07 3a90 	vmov	s15, r3
}
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bdb0      	pop	{r4, r5, r7, pc}

08001484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	b087      	sub	sp, #28
 8001488:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800148a:	f000 fb3d 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800148e:	f000 f835 	bl	80014fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001492:	f000 f89f 	bl	80015d4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001496:	f006 f81f 	bl	80074d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  init_calibration(&scale);
 800149a:	4815      	ldr	r0, [pc, #84]	; (80014f0 <main+0x6c>)
 800149c:	f000 f910 	bl	80016c0 <init_calibration>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	chA = measure_channel(scale, CHANNEL_A);
 80014a0:	4e13      	ldr	r6, [pc, #76]	; (80014f0 <main+0x6c>)
 80014a2:	2300      	movs	r3, #0
 80014a4:	9305      	str	r3, [sp, #20]
 80014a6:	466d      	mov	r5, sp
 80014a8:	f106 0410 	add.w	r4, r6, #16
 80014ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	602b      	str	r3, [r5, #0]
 80014b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014b8:	f000 f988 	bl	80017cc <measure_channel>
 80014bc:	eef0 7a40 	vmov.f32	s15, s0
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <main+0x70>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
	chB = measure_channel(scale, CHANNEL_B);
 80014c6:	4e0a      	ldr	r6, [pc, #40]	; (80014f0 <main+0x6c>)
 80014c8:	2301      	movs	r3, #1
 80014ca:	9305      	str	r3, [sp, #20]
 80014cc:	466d      	mov	r5, sp
 80014ce:	f106 0410 	add.w	r4, r6, #16
 80014d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	602b      	str	r3, [r5, #0]
 80014da:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014de:	f000 f975 	bl	80017cc <measure_channel>
 80014e2:	eef0 7a40 	vmov.f32	s15, s0
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <main+0x74>)
 80014e8:	edc3 7a00 	vstr	s15, [r3]
	chA = measure_channel(scale, CHANNEL_A);
 80014ec:	e7d8      	b.n	80014a0 <main+0x1c>
 80014ee:	bf00      	nop
 80014f0:	200002e0 	.word	0x200002e0
 80014f4:	20000304 	.word	0x20000304
 80014f8:	20000308 	.word	0x20000308

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b094      	sub	sp, #80	; 0x50
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	2230      	movs	r2, #48	; 0x30
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f007 fcc3 	bl	8008e96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <SystemClock_Config+0xd0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a28      	ldr	r2, [pc, #160]	; (80015cc <SystemClock_Config+0xd0>)
 800152a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <SystemClock_Config+0xd0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <SystemClock_Config+0xd4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001548:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <SystemClock_Config+0xd4>)
 800154a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <SystemClock_Config+0xd4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001570:	2319      	movs	r3, #25
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800157a:	2304      	movs	r3, #4
 800157c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800157e:	2307      	movs	r3, #7
 8001580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0320 	add.w	r3, r7, #32
 8001586:	4618      	mov	r0, r3
 8001588:	f002 f86c 	bl	8003664 <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001592:	f000 f955 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2102      	movs	r1, #2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 face 	bl	8003b54 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015be:	f000 f93f 	bl	8001840 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3750      	adds	r7, #80	; 0x50
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <MX_GPIO_Init+0xe0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a30      	ldr	r2, [pc, #192]	; (80016b4 <MX_GPIO_Init+0xe0>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <MX_GPIO_Init+0xe0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <MX_GPIO_Init+0xe0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <MX_GPIO_Init+0xe0>)
 8001610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <MX_GPIO_Init+0xe0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <MX_GPIO_Init+0xe0>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <MX_GPIO_Init+0xe0>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <MX_GPIO_Init+0xe0>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001644:	481c      	ldr	r0, [pc, #112]	; (80016b8 <MX_GPIO_Init+0xe4>)
 8001646:	f000 fda3 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	481a      	ldr	r0, [pc, #104]	; (80016bc <MX_GPIO_Init+0xe8>)
 8001652:	f000 fd9d 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	4812      	ldr	r0, [pc, #72]	; (80016b8 <MX_GPIO_Init+0xe4>)
 8001670:	f000 fbf2 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	4619      	mov	r1, r3
 800168c:	480b      	ldr	r0, [pc, #44]	; (80016bc <MX_GPIO_Init+0xe8>)
 800168e:	f000 fbe3 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_GPIO_Init+0xe8>)
 80016a8:	f000 fbd6 	bl	8001e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40020000 	.word	0x40020000

080016c0 <init_calibration>:
	tare_all(hx711, 10);
	strcat(buffer, "HX711 module has been initialized\n");
	CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
}

void init_calibration(hx711_t *hx711){
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b09f      	sub	sp, #124	; 0x7c
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	6078      	str	r0, [r7, #4]
	char buffer[100] = "";
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	2260      	movs	r2, #96	; 0x60
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f007 fbde 	bl	8008e96 <memset>

	strcat(buffer, "HX711 initialization\n\r");
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fdce 	bl	8000280 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4413      	add	r3, r2
 80016ee:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <init_calibration+0x100>)
 80016f0:	461c      	mov	r4, r3
 80016f2:	4615      	mov	r5, r2
 80016f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f6:	6020      	str	r0, [r4, #0]
 80016f8:	6061      	str	r1, [r4, #4]
 80016fa:	60a2      	str	r2, [r4, #8]
 80016fc:	60e3      	str	r3, [r4, #12]
 80016fe:	6828      	ldr	r0, [r5, #0]
 8001700:	6120      	str	r0, [r4, #16]
 8001702:	88ab      	ldrh	r3, [r5, #4]
 8001704:	79aa      	ldrb	r2, [r5, #6]
 8001706:	82a3      	strh	r3, [r4, #20]
 8001708:	4613      	mov	r3, r2
 800170a:	75a3      	strb	r3, [r4, #22]
	CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fdb5 	bl	8000280 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	b29a      	uxth	r2, r3
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f005 ff97 	bl	8007654 <CDC_Transmit_FS>

	/* Initialize the hx711 sensors */
	hx711_init(hx711, GPIOA, GPIO_PIN_9, GPIOA, GPIO_PIN_10);
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <init_calibration+0x104>)
 800172e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001732:	4924      	ldr	r1, [pc, #144]	; (80017c4 <init_calibration+0x104>)
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fc63 	bl	8001000 <hx711_init>

	/* Configure gain for each channel (see datasheet for details) */
	set_gain(hx711, 128, 32);
 800173a:	2220      	movs	r2, #32
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fcae 	bl	80010a0 <set_gain>

	/* Set HX711 scaling factor (see README for procedure) */
	set_scale(hx711, 1, 1);
 8001744:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001748:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fc93 	bl	8001078 <set_scale>

	/* Tare weight */
	tare_all(hx711, 10);
 8001752:	210a      	movs	r1, #10
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fe45 	bl	80013e4 <tare_all>
	strcat(buffer, "HX711 module has been initialized\n");
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd8e 	bl	8000280 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4413      	add	r3, r2
 800176e:	4a16      	ldr	r2, [pc, #88]	; (80017c8 <init_calibration+0x108>)
 8001770:	4614      	mov	r4, r2
 8001772:	469c      	mov	ip, r3
 8001774:	f104 0e20 	add.w	lr, r4, #32
 8001778:	4665      	mov	r5, ip
 800177a:	4626      	mov	r6, r4
 800177c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800177e:	6028      	str	r0, [r5, #0]
 8001780:	6069      	str	r1, [r5, #4]
 8001782:	60aa      	str	r2, [r5, #8]
 8001784:	60eb      	str	r3, [r5, #12]
 8001786:	3410      	adds	r4, #16
 8001788:	f10c 0c10 	add.w	ip, ip, #16
 800178c:	4574      	cmp	r4, lr
 800178e:	d1f3      	bne.n	8001778 <init_calibration+0xb8>
 8001790:	4663      	mov	r3, ip
 8001792:	4622      	mov	r2, r4
 8001794:	8811      	ldrh	r1, [r2, #0]
 8001796:	7892      	ldrb	r2, [r2, #2]
 8001798:	8019      	strh	r1, [r3, #0]
 800179a:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fd6d 	bl	8000280 <strlen>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 ff4f 	bl	8007654 <CDC_Transmit_FS>
}
 80017b6:	bf00      	nop
 80017b8:	3774      	adds	r7, #116	; 0x74
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800c72c 	.word	0x0800c72c
 80017c4:	40020000 	.word	0x40020000
 80017c8:	0800c744 	.word	0x0800c744

080017cc <measure_channel>:

float measure_channel(hx711_t hx711, uint8_t channel){
 80017cc:	b084      	sub	sp, #16
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b09c      	sub	sp, #112	; 0x70
 80017d2:	af02      	add	r7, sp, #8
 80017d4:	f107 0c70 	add.w	ip, r7, #112	; 0x70
 80017d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char buffer[100];
	float weight = 0;
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	667b      	str	r3, [r7, #100]	; 0x64
	// Measure the weight for channel A
	weight = get_weight(&hx711, 10, channel);
 80017e2:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80017e6:	461a      	mov	r2, r3
 80017e8:	210a      	movs	r1, #10
 80017ea:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80017ee:	f7ff fe0f 	bl	8001410 <get_weight>
 80017f2:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	// Weight cannot be negative
//	weight = (weight < 0.00) ? 0 : weight;
//	sprintf(buffer, "Weight : %lf \n",weight);
	snprintf(buffer, 100, "Weight %f \r\n", weight);
 80017f6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80017f8:	f7fe feae 	bl	8000558 <__aeabi_f2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4638      	mov	r0, r7
 8001802:	e9cd 2300 	strd	r2, r3, [sp]
 8001806:	4a0d      	ldr	r2, [pc, #52]	; (800183c <measure_channel+0x70>)
 8001808:	2164      	movs	r1, #100	; 0x64
 800180a:	f007 faad 	bl	8008d68 <sniprintf>
	CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800180e:	463b      	mov	r3, r7
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fd35 	bl	8000280 <strlen>
 8001816:	4603      	mov	r3, r0
 8001818:	b29a      	uxth	r2, r3
 800181a:	463b      	mov	r3, r7
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f005 ff18 	bl	8007654 <CDC_Transmit_FS>
	return weight;
 8001824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001826:	ee07 3a90 	vmov	s15, r3
}
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	3768      	adds	r7, #104	; 0x68
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001836:	b004      	add	sp, #16
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	0800c768 	.word	0x0800c768

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>
	...

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_MspInit+0x4c>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <HAL_MspInit+0x4c>)
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_MspInit+0x4c>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_MspInit+0x4c>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_MspInit+0x4c>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_MspInit+0x4c>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler+0x4>

080018a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler+0x4>

080018ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <BusFault_Handler+0x4>

080018b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f960 	bl	8001bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <OTG_FS_IRQHandler+0x10>)
 80018f6:	f000 fda8 	bl	800244a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000ff4 	.word	0x20000ff4

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191e:	f007 fb0d 	bl	8008f3c <__errno>
 8001922:	4603      	mov	r3, r0
 8001924:	2216      	movs	r2, #22
 8001926:	601a      	str	r2, [r3, #0]
  return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_exit>:

void _exit (int status)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800193c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffe7 	bl	8001914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001946:	e7fe      	b.n	8001946 <_exit+0x12>

08001948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e00a      	b.n	8001970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195a:	f3af 8000 	nop.w
 800195e:	4601      	mov	r1, r0
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	60ba      	str	r2, [r7, #8]
 8001966:	b2ca      	uxtb	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf0      	blt.n	800195a <_read+0x12>
  }

  return len;
 8001978:	687b      	ldr	r3, [r7, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	e009      	b.n	80019a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	60ba      	str	r2, [r7, #8]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbf1      	blt.n	8001994 <_write+0x12>
  }
  return len;
 80019b0:	687b      	ldr	r3, [r7, #4]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_close>:

int _close(int file)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e2:	605a      	str	r2, [r3, #4]
  return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_isatty>:

int _isatty(int file)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f007 fa72 	bl	8008f3c <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20010000 	.word	0x20010000
 8001a84:	00000400 	.word	0x00000400
 8001a88:	2000030c 	.word	0x2000030c
 8001a8c:	20001848 	.word	0x20001848

08001a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ab8:	f7ff ffea 	bl	8001a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	; (8001af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	; (8001b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f007 fa31 	bl	8008f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff fccd 	bl	8001484 <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001af8:	0800cc08 	.word	0x0800cc08
  ldr r2, =_sbss
 8001afc:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001b00:	20001844 	.word	0x20001844

08001b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f94f 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	200f      	movs	r0, #15
 8001b38:	f000 f808 	bl	8001b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fe86 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x54>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_InitTick+0x58>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f967 	bl	8001e3e <HAL_SYSTICK_Config>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00e      	b.n	8001b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b0f      	cmp	r3, #15
 8001b7e:	d80a      	bhi.n	8001b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b80:	2200      	movs	r2, #0
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b88:	f000 f92f 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <HAL_InitTick+0x5c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	20000004 	.word	0x20000004

08001bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_IncTick+0x20>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_IncTick+0x24>)
 8001bbe:	6013      	str	r3, [r2, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000310 	.word	0x20000310

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_GetTick+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000310 	.word	0x20000310

08001bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff ffee 	bl	8001bd4 <HAL_GetTick>
 8001bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c04:	d005      	beq.n	8001c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_Delay+0x44>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c12:	bf00      	nop
 8001c14:	f7ff ffde 	bl	8001bd4 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8f7      	bhi.n	8001c14 <HAL_Delay+0x28>
  {
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000008 	.word	0x20000008

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff29 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff3e 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff31 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffa2 	bl	8001d90 <SysTick_Config>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e159      	b.n	8002128 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8148 	bne.w	8002122 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d005      	beq.n	8001eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d017      	beq.n	8001f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80a2 	beq.w	8002122 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b54      	ldr	r3, [pc, #336]	; (8002140 <HAL_GPIO_Init+0x2e8>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_GPIO_Init+0x2ec>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a49      	ldr	r2, [pc, #292]	; (8002148 <HAL_GPIO_Init+0x2f0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d019      	beq.n	800205a <HAL_GPIO_Init+0x202>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a48      	ldr	r2, [pc, #288]	; (800214c <HAL_GPIO_Init+0x2f4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d013      	beq.n	8002056 <HAL_GPIO_Init+0x1fe>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a47      	ldr	r2, [pc, #284]	; (8002150 <HAL_GPIO_Init+0x2f8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00d      	beq.n	8002052 <HAL_GPIO_Init+0x1fa>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a46      	ldr	r2, [pc, #280]	; (8002154 <HAL_GPIO_Init+0x2fc>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <HAL_GPIO_Init+0x1f6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a45      	ldr	r2, [pc, #276]	; (8002158 <HAL_GPIO_Init+0x300>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_GPIO_Init+0x1f2>
 8002046:	2304      	movs	r3, #4
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x204>
 800204a:	2307      	movs	r3, #7
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x204>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x204>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x204>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x204>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	; (8002144 <HAL_GPIO_Init+0x2ec>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <HAL_GPIO_Init+0x304>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a2f      	ldr	r2, [pc, #188]	; (800215c <HAL_GPIO_Init+0x304>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HAL_GPIO_Init+0x304>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <HAL_GPIO_Init+0x304>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_GPIO_Init+0x304>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f2:	4a1a      	ldr	r2, [pc, #104]	; (800215c <HAL_GPIO_Init+0x304>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_GPIO_Init+0x304>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211c:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_GPIO_Init+0x304>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f aea2 	bls.w	8001e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e001      	b.n	8002182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021ac:	e003      	b.n	80021b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e101      	b.n	80023d8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f005 fb78 	bl	80078e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2203      	movs	r2, #3
 80021f8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002202:	d102      	bne.n	800220a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f001 ff6f 	bl	80040f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7c1a      	ldrb	r2, [r3, #16]
 800221c:	f88d 2000 	strb.w	r2, [sp]
 8002220:	3304      	adds	r3, #4
 8002222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002224:	f001 fe4e 	bl	8003ec4 <USB_CoreInit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0ce      	b.n	80023d8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f001 ff67 	bl	8004114 <USB_SetCurrentMode>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0bf      	b.n	80023d8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e04a      	b.n	80022f4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3315      	adds	r3, #21
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	3314      	adds	r3, #20
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	b298      	uxth	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	332e      	adds	r3, #46	; 0x2e
 800229a:	4602      	mov	r2, r0
 800229c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	3318      	adds	r3, #24
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	331c      	adds	r3, #28
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3320      	adds	r3, #32
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3324      	adds	r3, #36	; 0x24
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	3301      	adds	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	791b      	ldrb	r3, [r3, #4]
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3af      	bcc.n	800225e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e044      	b.n	800238e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	791b      	ldrb	r3, [r3, #4]
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3b5      	bcc.n	8002304 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7c1a      	ldrb	r2, [r3, #16]
 80023a0:	f88d 2000 	strb.w	r2, [sp]
 80023a4:	3304      	adds	r3, #4
 80023a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a8:	f001 ff00 	bl	80041ac <USB_DevInit>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00c      	b.n	80023d8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 ff44 	bl	800525e <USB_DevDisconnect>

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_PCD_Start+0x1c>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e022      	b.n	8002442 <HAL_PCD_Start+0x62>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d009      	beq.n	8002424 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f001 fe51 	bl	80040d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fef2 	bl	800521c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800244a:	b590      	push	{r4, r7, lr}
 800244c:	b08d      	sub	sp, #52	; 0x34
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f002 ffb0 	bl	80053c6 <USB_GetMode>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 848c 	bne.w	8002d86 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f002 ff14 	bl	80052a0 <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8482 	beq.w	8002d84 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f002 ff01 	bl	80052a0 <USB_ReadInterrupts>
 800249e:	4603      	mov	r3, r0
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d107      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f002 0202 	and.w	r2, r2, #2
 80024b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 feef 	bl	80052a0 <USB_ReadInterrupts>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d161      	bne.n	8002590 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0210 	bic.w	r2, r2, #16
 80024da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	0c5b      	lsrs	r3, r3, #17
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	2b02      	cmp	r3, #2
 8002506:	d124      	bne.n	8002552 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d035      	beq.n	8002580 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800251e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	6a38      	ldr	r0, [r7, #32]
 8002528:	f002 fd26 	bl	8004f78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002538:	441a      	add	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254a:	441a      	add	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	615a      	str	r2, [r3, #20]
 8002550:	e016      	b.n	8002580 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	0c5b      	lsrs	r3, r3, #17
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	2b06      	cmp	r3, #6
 800255c:	d110      	bne.n	8002580 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002564:	2208      	movs	r2, #8
 8002566:	4619      	mov	r1, r3
 8002568:	6a38      	ldr	r0, [r7, #32]
 800256a:	f002 fd05 	bl	8004f78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257a:	441a      	add	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0210 	orr.w	r2, r2, #16
 800258e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 fe83 	bl	80052a0 <USB_ReadInterrupts>
 800259a:	4603      	mov	r3, r0
 800259c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025a4:	f040 80a7 	bne.w	80026f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 fe88 	bl	80052c6 <USB_ReadDevAllOutEpInterrupt>
 80025b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025b8:	e099      	b.n	80026ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 808e 	beq.w	80026e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 feac 	bl	800532e <USB_ReadDevOutEPInterrupt>
 80025d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ee:	461a      	mov	r2, r3
 80025f0:	2301      	movs	r3, #1
 80025f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fea2 	bl	8003340 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002612:	461a      	mov	r2, r3
 8002614:	2308      	movs	r3, #8
 8002616:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 ff78 	bl	8003510 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002636:	461a      	mov	r2, r3
 8002638:	2310      	movs	r3, #16
 800263a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d030      	beq.n	80026a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d109      	bne.n	8002666 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002664:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	78db      	ldrb	r3, [r3, #3]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d108      	bne.n	8002696 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2200      	movs	r2, #0
 8002688:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f005 fa23 	bl	8007adc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a2:	461a      	mov	r2, r3
 80026a4:	2302      	movs	r3, #2
 80026a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026be:	461a      	mov	r2, r3
 80026c0:	2320      	movs	r3, #32
 80026c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026da:	461a      	mov	r2, r3
 80026dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	3301      	adds	r3, #1
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f47f af62 	bne.w	80025ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 fdd0 	bl	80052a0 <USB_ReadInterrupts>
 8002700:	4603      	mov	r3, r0
 8002702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002706:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800270a:	f040 80db 	bne.w	80028c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fdf1 	bl	80052fa <USB_ReadDevAllInEpInterrupt>
 8002718:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800271e:	e0cd      	b.n	80028bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80c2 	beq.w	80028b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f002 fe17 	bl	800536a <USB_ReadDevInEPInterrupt>
 800273c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d057      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	69f9      	ldr	r1, [r7, #28]
 8002764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002768:	4013      	ands	r3, r2
 800276a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002778:	461a      	mov	r2, r3
 800277a:	2301      	movs	r3, #1
 800277c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	799b      	ldrb	r3, [r3, #6]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d132      	bne.n	80027ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3320      	adds	r3, #32
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4403      	add	r3, r0
 80027a6:	331c      	adds	r3, #28
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4419      	add	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	4613      	mov	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4403      	add	r3, r0
 80027ba:	3320      	adds	r3, #32
 80027bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d113      	bne.n	80027ec <HAL_PCD_IRQHandler+0x3a2>
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	3324      	adds	r3, #36	; 0x24
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80027e4:	461a      	mov	r2, r3
 80027e6:	2101      	movs	r1, #1
 80027e8:	f002 fe1e 	bl	8005428 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f005 f8f7 	bl	80079e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280e:	461a      	mov	r2, r3
 8002810:	2308      	movs	r3, #8
 8002812:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282a:	461a      	mov	r2, r3
 800282c:	2310      	movs	r3, #16
 800282e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002846:	461a      	mov	r2, r3
 8002848:	2340      	movs	r3, #64	; 0x40
 800284a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d023      	beq.n	800289e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002858:	6a38      	ldr	r0, [r7, #32]
 800285a:	f001 fe0b 	bl	8004474 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3310      	adds	r3, #16
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	3304      	adds	r3, #4
 8002870:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	78db      	ldrb	r3, [r3, #3]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d108      	bne.n	800288c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	b2db      	uxtb	r3, r3
 8002884:	4619      	mov	r1, r3
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f005 f93a 	bl	8007b00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002898:	461a      	mov	r2, r3
 800289a:	2302      	movs	r3, #2
 800289c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fcbb 	bl	8003226 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3301      	adds	r3, #1
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f47f af2e 	bne.w	8002720 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f002 fce9 	bl	80052a0 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028d8:	d122      	bne.n	8002920 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e8:	f023 0301 	bic.w	r3, r3, #1
 80028ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d108      	bne.n	800290a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002900:	2100      	movs	r1, #0
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fea2 	bl	800364c <HAL_PCDEx_LPM_Callback>
 8002908:	e002      	b.n	8002910 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f005 f8d8 	bl	8007ac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800291e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fcbb 	bl	80052a0 <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002934:	d112      	bne.n	800295c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d102      	bne.n	800294c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f005 f894 	bl	8007a74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800295a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fc9d 	bl	80052a0 <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002970:	f040 80b7 	bne.w	8002ae2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2110      	movs	r1, #16
 800298e:	4618      	mov	r0, r3
 8002990:	f001 fd70 	bl	8004474 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002998:	e046      	b.n	8002a28 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029a6:	461a      	mov	r2, r3
 80029a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029be:	0151      	lsls	r1, r2, #5
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	440a      	add	r2, r1
 80029c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	461a      	mov	r2, r3
 80029dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a12:	0151      	lsls	r1, r2, #5
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	440a      	add	r2, r1
 8002a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	3301      	adds	r3, #1
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	791b      	ldrb	r3, [r3, #4]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d3b2      	bcc.n	800299a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7bdb      	ldrb	r3, [r3, #15]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d016      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a60:	f043 030b 	orr.w	r3, r3, #11
 8002a64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a76:	f043 030b 	orr.w	r3, r3, #11
 8002a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7c:	e015      	b.n	8002aaa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	69fa      	ldr	r2, [r7, #28]
 8002aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa4:	f043 030b 	orr.w	r3, r3, #11
 8002aa8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002abc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002acc:	461a      	mov	r2, r3
 8002ace:	f002 fcab 	bl	8005428 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 fbda 	bl	80052a0 <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	d123      	bne.n	8002b40 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 fc70 	bl	80053e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 fd2d 	bl	8004566 <USB_GetDevSpeed>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681c      	ldr	r4, [r3, #0]
 8002b18:	f001 f9c8 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8002b1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b22:	461a      	mov	r2, r3
 8002b24:	4620      	mov	r0, r4
 8002b26:	f001 fa31 	bl	8003f8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f004 ff83 	bl	8007a36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 fbab 	bl	80052a0 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d10a      	bne.n	8002b6a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f004 ff60 	bl	8007a1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 0208 	and.w	r2, r2, #8
 8002b68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f002 fb96 	bl	80052a0 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b80      	cmp	r3, #128	; 0x80
 8002b7c:	d123      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e014      	b.n	8002bba <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fb08 	bl	80031c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	791b      	ldrb	r3, [r3, #4]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d3e4      	bcc.n	8002b90 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f002 fb68 	bl	80052a0 <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bda:	d13c      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bdc:	2301      	movs	r3, #1
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
 8002be0:	e02b      	b.n	8002c3a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3318      	adds	r3, #24
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d115      	bne.n	8002c34 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	da12      	bge.n	8002c34 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3317      	adds	r3, #23
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fac8 	bl	80031c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	3301      	adds	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d3cd      	bcc.n	8002be2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fb20 	bl	80052a0 <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c6a:	d156      	bne.n	8002d1a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e045      	b.n	8002cfe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d12e      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	da2b      	bge.n	8002cf8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002cac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d121      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf4:	6053      	str	r3, [r2, #4]
            break;
 8002cf6:	e008      	b.n	8002d0a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	791b      	ldrb	r3, [r3, #4]
 8002d02:	461a      	mov	r2, r3
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d3b3      	bcc.n	8002c72 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 fabe 	bl	80052a0 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2e:	d10a      	bne.n	8002d46 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f004 fef7 	bl	8007b24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f002 faa8 	bl	80052a0 <USB_ReadInterrupts>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d115      	bne.n	8002d86 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f004 fee7 	bl	8007b40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	e000      	b.n	8002d86 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002d84:	bf00      	nop
    }
  }
}
 8002d86:	3734      	adds	r7, #52	; 0x34
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}

08002d8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_PCD_SetAddress+0x1a>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e012      	b.n	8002dcc <HAL_PCD_SetAddress+0x40>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fa07 	bl	80051d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	70fb      	strb	r3, [r7, #3]
 8002de6:	460b      	mov	r3, r1
 8002de8:	803b      	strh	r3, [r7, #0]
 8002dea:	4613      	mov	r3, r2
 8002dec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002df2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	da0f      	bge.n	8002e1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	3310      	adds	r3, #16
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3304      	adds	r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	705a      	strb	r2, [r3, #1]
 8002e18:	e00f      	b.n	8002e3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	4413      	add	r3, r2
 8002e30:	3304      	adds	r3, #4
 8002e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e46:	883a      	ldrh	r2, [r7, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	78ba      	ldrb	r2, [r7, #2]
 8002e50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	785b      	ldrb	r3, [r3, #1]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e64:	78bb      	ldrb	r3, [r7, #2]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d102      	bne.n	8002e70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_PCD_EP_Open+0xaa>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e00e      	b.n	8002e9c <HAL_PCD_EP_Open+0xc8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 fb8f 	bl	80045b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002e9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	da0f      	bge.n	8002ed8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	f003 020f 	and.w	r2, r3, #15
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	3310      	adds	r3, #16
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	3304      	adds	r3, #4
 8002ece:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	705a      	strb	r2, [r3, #1]
 8002ed6:	e00f      	b.n	8002ef8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 020f 	and.w	r2, r3, #15
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_PCD_EP_Close+0x6e>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e00e      	b.n	8002f30 <HAL_PCD_EP_Close+0x8c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 fbcd 	bl	80046c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	7afb      	ldrb	r3, [r7, #11]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3304      	adds	r3, #4
 8002f60:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2200      	movs	r2, #0
 8002f78:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	799b      	ldrb	r3, [r3, #6]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	799b      	ldrb	r3, [r3, #6]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6979      	ldr	r1, [r7, #20]
 8002fa0:	f001 fc6a 	bl	8004878 <USB_EPStartXfer>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 020f 	and.w	r2, r3, #15
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002fd0:	681b      	ldr	r3, [r3, #0]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	460b      	mov	r3, r1
 8002fec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fee:	7afb      	ldrb	r3, [r7, #11]
 8002ff0:	f003 020f 	and.w	r2, r3, #15
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	3304      	adds	r3, #4
 8003004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2201      	movs	r2, #1
 800301c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800301e:	7afb      	ldrb	r3, [r7, #11]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	b2da      	uxtb	r2, r3
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	799b      	ldrb	r3, [r3, #6]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d102      	bne.n	8003038 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	799b      	ldrb	r3, [r3, #6]
 8003040:	461a      	mov	r2, r3
 8003042:	6979      	ldr	r1, [r7, #20]
 8003044:	f001 fc18 	bl	8004878 <USB_EPStartXfer>

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	7912      	ldrb	r2, [r2, #4]
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e04f      	b.n	8003110 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003074:	2b00      	cmp	r3, #0
 8003076:	da0f      	bge.n	8003098 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 020f 	and.w	r2, r3, #15
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	3310      	adds	r3, #16
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	705a      	strb	r2, [r3, #1]
 8003096:	e00d      	b.n	80030b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	4613      	mov	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_PCD_EP_SetStall+0x82>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e01d      	b.n	8003110 <HAL_PCD_EP_SetStall+0xbe>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68f9      	ldr	r1, [r7, #12]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f001 ffa0 	bl	8005028 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7999      	ldrb	r1, [r3, #6]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003100:	461a      	mov	r2, r3
 8003102:	f002 f991 	bl	8005428 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	7912      	ldrb	r2, [r2, #4]
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e042      	b.n	80031bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800313a:	2b00      	cmp	r3, #0
 800313c:	da0f      	bge.n	800315e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	3310      	adds	r3, #16
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	3304      	adds	r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	705a      	strb	r2, [r3, #1]
 800315c:	e00f      	b.n	800317e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 020f 	and.w	r2, r3, #15
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_PCD_EP_ClrStall+0x86>
 800319a:	2302      	movs	r3, #2
 800319c:	e00e      	b.n	80031bc <HAL_PCD_EP_ClrStall+0xa4>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68f9      	ldr	r1, [r7, #12]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 ffa9 	bl	8005104 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da0c      	bge.n	80031f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 020f 	and.w	r2, r3, #15
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	3310      	adds	r3, #16
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e00c      	b.n	800320c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	f003 020f 	and.w	r2, r3, #15
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	3304      	adds	r3, #4
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68f9      	ldr	r1, [r7, #12]
 8003212:	4618      	mov	r0, r3
 8003214:	f001 fdc8 	bl	8004da8 <USB_EPStopXfer>
 8003218:	4603      	mov	r3, r0
 800321a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800321c:	7afb      	ldrb	r3, [r7, #11]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b08a      	sub	sp, #40	; 0x28
 800322a:	af02      	add	r7, sp, #8
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	3310      	adds	r3, #16
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	429a      	cmp	r2, r3
 8003258:	d901      	bls.n	800325e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e06b      	b.n	8003336 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	429a      	cmp	r2, r3
 8003272:	d902      	bls.n	800327a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3303      	adds	r3, #3
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003282:	e02a      	b.n	80032da <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	429a      	cmp	r2, r3
 8003298:	d902      	bls.n	80032a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	3303      	adds	r3, #3
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	68d9      	ldr	r1, [r3, #12]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	4603      	mov	r3, r0
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f001 fe1d 	bl	8004efc <USB_WritePacket>

    ep->xfer_buff  += len;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	441a      	add	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	441a      	add	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d809      	bhi.n	8003304 <PCD_WriteEmptyTxFifo+0xde>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d203      	bcs.n	8003304 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1bf      	bne.n	8003284 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	d811      	bhi.n	8003334 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	2201      	movs	r2, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	43db      	mvns	r3, r3
 800332a:	6939      	ldr	r1, [r7, #16]
 800332c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003330:	4013      	ands	r3, r2
 8003332:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	333c      	adds	r3, #60	; 0x3c
 8003358:	3304      	adds	r3, #4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	799b      	ldrb	r3, [r3, #6]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d17b      	bne.n	800346e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d015      	beq.n	80033ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	4a61      	ldr	r2, [pc, #388]	; (8003508 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	f240 80b9 	bls.w	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80b3 	beq.w	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a2:	461a      	mov	r2, r3
 80033a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a8:	6093      	str	r3, [r2, #8]
 80033aa:	e0a7      	b.n	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c2:	461a      	mov	r2, r3
 80033c4:	2320      	movs	r3, #32
 80033c6:	6093      	str	r3, [r2, #8]
 80033c8:	e098      	b.n	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f040 8093 	bne.w	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	4a4b      	ldr	r2, [pc, #300]	; (8003508 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d90f      	bls.n	80033fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f4:	461a      	mov	r2, r3
 80033f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fa:	6093      	str	r3, [r2, #8]
 80033fc:	e07e      	b.n	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1a      	ldr	r2, [r3, #32]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	0159      	lsls	r1, r3, #5
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	440b      	add	r3, r1
 8003420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342a:	1ad2      	subs	r2, r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d114      	bne.n	8003460 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003448:	461a      	mov	r2, r3
 800344a:	2101      	movs	r1, #1
 800344c:	f001 ffec 	bl	8005428 <USB_EP0_OutStart>
 8003450:	e006      	b.n	8003460 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	441a      	add	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f004 faa2 	bl	80079b0 <HAL_PCD_DataOutStageCallback>
 800346c:	e046      	b.n	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4a26      	ldr	r2, [pc, #152]	; (800350c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d124      	bne.n	80034c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	461a      	mov	r2, r3
 800348e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003492:	6093      	str	r3, [r2, #8]
 8003494:	e032      	b.n	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ac:	461a      	mov	r2, r3
 80034ae:	2320      	movs	r3, #32
 80034b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f004 fa79 	bl	80079b0 <HAL_PCD_DataOutStageCallback>
 80034be:	e01d      	b.n	80034fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d114      	bne.n	80034f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d108      	bne.n	80034f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80034e8:	461a      	mov	r2, r3
 80034ea:	2100      	movs	r1, #0
 80034ec:	f001 ff9c 	bl	8005428 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f004 fa5a 	bl	80079b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	4f54300a 	.word	0x4f54300a
 800350c:	4f54310a 	.word	0x4f54310a

08003510 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	333c      	adds	r3, #60	; 0x3c
 8003528:	3304      	adds	r3, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4a15      	ldr	r2, [pc, #84]	; (8003598 <PCD_EP_OutSetupPacket_int+0x88>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d90e      	bls.n	8003564 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355c:	461a      	mov	r2, r3
 800355e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003562:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f004 fa11 	bl	800798c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <PCD_EP_OutSetupPacket_int+0x88>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d90c      	bls.n	800358c <PCD_EP_OutSetupPacket_int+0x7c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	799b      	ldrb	r3, [r3, #6]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d108      	bne.n	800358c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003584:	461a      	mov	r2, r3
 8003586:	2101      	movs	r1, #1
 8003588:	f001 ff4e 	bl	8005428 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	4f54300a 	.word	0x4f54300a

0800359c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
 80035a8:	4613      	mov	r3, r2
 80035aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035ba:	883b      	ldrh	r3, [r7, #0]
 80035bc:	0419      	lsls	r1, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28
 80035c8:	e028      	b.n	800361c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	0c1b      	lsrs	r3, r3, #16
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	4413      	add	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]
 80035dc:	e00d      	b.n	80035fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	3340      	adds	r3, #64	; 0x40
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	4413      	add	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	3301      	adds	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	3b01      	subs	r3, #1
 8003600:	429a      	cmp	r2, r3
 8003602:	d3ec      	bcc.n	80035de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003604:	883b      	ldrh	r3, [r7, #0]
 8003606:	0418      	lsls	r0, r3, #16
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	3b01      	subs	r3, #1
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	4302      	orrs	r2, r0
 8003614:	3340      	adds	r3, #64	; 0x40
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	887a      	ldrh	r2, [r7, #2]
 800363c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e267      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d075      	beq.n	800376e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b04      	cmp	r3, #4
 800368c:	d00c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368e:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003696:	2b08      	cmp	r3, #8
 8003698:	d112      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369a:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a6:	d10b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	4b7e      	ldr	r3, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d05b      	beq.n	800376c <HAL_RCC_OscConfig+0x108>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d157      	bne.n	800376c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e242      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_OscConfig+0x74>
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a75      	ldr	r2, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x98>
 80036e2:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6f      	ldr	r2, [pc, #444]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b6d      	ldr	r3, [pc, #436]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6c      	ldr	r2, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036fc:	4b69      	ldr	r3, [pc, #420]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a68      	ldr	r2, [pc, #416]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fa5a 	bl	8001bd4 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fa56 	bl	8001bd4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e207      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b5b      	ldr	r3, [pc, #364]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xc0>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fa46 	bl	8001bd4 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe fa42 	bl	8001bd4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1f3      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0xe8>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377a:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003786:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800378e:	2b08      	cmp	r3, #8
 8003790:	d11c      	bne.n	80037cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003792:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCC_OscConfig+0x152>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e1c7      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4937      	ldr	r1, [pc, #220]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	e03a      	b.n	8003842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d4:	4b34      	ldr	r3, [pc, #208]	; (80038a8 <HAL_RCC_OscConfig+0x244>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe f9fb 	bl	8001bd4 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fe f9f7 	bl	8001bd4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e1a8      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4925      	ldr	r1, [pc, #148]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	e015      	b.n	8003842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_OscConfig+0x244>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fe f9da 	bl	8001bd4 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003824:	f7fe f9d6 	bl	8001bd4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e187      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d036      	beq.n	80038bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <HAL_RCC_OscConfig+0x248>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe f9ba 	bl	8001bd4 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003864:	f7fe f9b6 	bl	8001bd4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e167      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x200>
 8003882:	e01b      	b.n	80038bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_OscConfig+0x248>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fe f9a3 	bl	8001bd4 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	e00e      	b.n	80038b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003892:	f7fe f99f 	bl	8001bd4 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d907      	bls.n	80038b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e150      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
 80038a4:	40023800 	.word	0x40023800
 80038a8:	42470000 	.word	0x42470000
 80038ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ea      	bne.n	8003892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8097 	beq.w	80039f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ce:	4b81      	ldr	r3, [pc, #516]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	4b7d      	ldr	r3, [pc, #500]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a7c      	ldr	r2, [pc, #496]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ea:	4b7a      	ldr	r3, [pc, #488]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b77      	ldr	r3, [pc, #476]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003906:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a73      	ldr	r2, [pc, #460]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fe f95f 	bl	8001bd4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fe f95b 	bl	8001bd4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e10c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x2ea>
 8003940:	4b64      	ldr	r3, [pc, #400]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a63      	ldr	r2, [pc, #396]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
 800394c:	e01c      	b.n	8003988 <HAL_RCC_OscConfig+0x324>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b05      	cmp	r3, #5
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x30c>
 8003956:	4b5f      	ldr	r3, [pc, #380]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a5e      	ldr	r2, [pc, #376]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	4b5c      	ldr	r3, [pc, #368]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a5b      	ldr	r2, [pc, #364]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
 800396e:	e00b      	b.n	8003988 <HAL_RCC_OscConfig+0x324>
 8003970:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	4b55      	ldr	r3, [pc, #340]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4a54      	ldr	r2, [pc, #336]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003982:	f023 0304 	bic.w	r3, r3, #4
 8003986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fe f920 	bl	8001bd4 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fe f91c 	bl	8001bd4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0cb      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0ee      	beq.n	8003998 <HAL_RCC_OscConfig+0x334>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039bc:	f7fe f90a 	bl	8001bd4 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe f906 	bl	8001bd4 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0b5      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ee      	bne.n	80039c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ec:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	4a38      	ldr	r2, [pc, #224]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a1 	beq.w	8003b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a02:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d05c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d141      	bne.n	8003a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a16:	4b31      	ldr	r3, [pc, #196]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe f8da 	bl	8001bd4 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fe f8d6 	bl	8001bd4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e087      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	491b      	ldr	r1, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fe f8af 	bl	8001bd4 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7fe f8ab 	bl	8001bd4 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e05c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x416>
 8003a98:	e054      	b.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe f898 	bl	8001bd4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe f894 	bl	8001bd4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e045      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x444>
 8003ac6:	e03d      	b.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e038      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x4ec>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d028      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d121      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d11a      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b10:	4013      	ands	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d111      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0cc      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b68      	ldr	r3, [pc, #416]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d90c      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b65      	ldr	r3, [pc, #404]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0b8      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a58      	ldr	r2, [pc, #352]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc0:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	494d      	ldr	r1, [pc, #308]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d044      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d119      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e07f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d003      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e06f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e067      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c32:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 0203 	bic.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4934      	ldr	r1, [pc, #208]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c44:	f7fd ffc6 	bl	8001bd4 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fd ffc2 	bl	8001bd4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 020c 	and.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1eb      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d20c      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e032      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4916      	ldr	r1, [pc, #88]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	490e      	ldr	r1, [pc, #56]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cda:	f000 f821 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	490a      	ldr	r1, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd ff26 	bl	8001b4c <HAL_InitTick>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023c00 	.word	0x40023c00
 8003d10:	40023800 	.word	0x40023800
 8003d14:	0800c7c0 	.word	0x0800c7c0
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	20000004 	.word	0x20000004

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b090      	sub	sp, #64	; 0x40
 8003d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d30:	2300      	movs	r3, #0
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d38:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d00d      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x40>
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	f200 80a1 	bhi.w	8003e8c <HAL_RCC_GetSysClockFreq+0x16c>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x34>
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d52:	e09b      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b53      	ldr	r3, [pc, #332]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d58:	e09b      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5a:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5e:	e098      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d028      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	627a      	str	r2, [r7, #36]	; 0x24
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d8c:	fb03 f201 	mul.w	r2, r3, r1
 8003d90:	2300      	movs	r3, #0
 8003d92:	fb00 f303 	mul.w	r3, r0, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	4a43      	ldr	r2, [pc, #268]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d9a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da0:	460a      	mov	r2, r1
 8003da2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da6:	4413      	add	r3, r2
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dac:	2200      	movs	r2, #0
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	61fa      	str	r2, [r7, #28]
 8003db2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dba:	f7fc ff6d 	bl	8000c98 <__aeabi_uldivmod>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc6:	e053      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	099b      	lsrs	r3, r3, #6
 8003dce:	2200      	movs	r2, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	617a      	str	r2, [r7, #20]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dda:	f04f 0b00 	mov.w	fp, #0
 8003dde:	4652      	mov	r2, sl
 8003de0:	465b      	mov	r3, fp
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	0159      	lsls	r1, r3, #5
 8003dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003df0:	0150      	lsls	r0, r2, #5
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	ebb2 080a 	subs.w	r8, r2, sl
 8003dfa:	eb63 090b 	sbc.w	r9, r3, fp
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e12:	ebb2 0408 	subs.w	r4, r2, r8
 8003e16:	eb63 0509 	sbc.w	r5, r3, r9
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	00eb      	lsls	r3, r5, #3
 8003e24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e28:	00e2      	lsls	r2, r4, #3
 8003e2a:	4614      	mov	r4, r2
 8003e2c:	461d      	mov	r5, r3
 8003e2e:	eb14 030a 	adds.w	r3, r4, sl
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	eb45 030b 	adc.w	r3, r5, fp
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e46:	4629      	mov	r1, r5
 8003e48:	028b      	lsls	r3, r1, #10
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e50:	4621      	mov	r1, r4
 8003e52:	028a      	lsls	r2, r1, #10
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	60fa      	str	r2, [r7, #12]
 8003e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e64:	f7fc ff18 	bl	8000c98 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	0c1b      	lsrs	r3, r3, #16
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e8a:	e002      	b.n	8003e92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3740      	adds	r7, #64	; 0x40
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	00f42400 	.word	0x00f42400
 8003ea8:	017d7840 	.word	0x017d7840

08003eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000000 	.word	0x20000000

08003ec4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	f107 001c 	add.w	r0, r7, #28
 8003ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ed6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d123      	bne.n	8003f26 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d105      	bne.n	8003f1a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f001 fae2 	bl	80054e4 <USB_CoreReset>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	e01b      	b.n	8003f5e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f001 fad6 	bl	80054e4 <USB_CoreReset>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f50:	e005      	b.n	8003f5e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f5e:	7fbb      	ldrb	r3, [r7, #30]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d10b      	bne.n	8003f7c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f043 0206 	orr.w	r2, r3, #6
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f88:	b004      	add	sp, #16
 8003f8a:	4770      	bx	lr

08003f8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d165      	bne.n	800406c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a41      	ldr	r2, [pc, #260]	; (80040a8 <USB_SetTurnaroundTime+0x11c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d906      	bls.n	8003fb6 <USB_SetTurnaroundTime+0x2a>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a40      	ldr	r2, [pc, #256]	; (80040ac <USB_SetTurnaroundTime+0x120>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d202      	bcs.n	8003fb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fb0:	230f      	movs	r3, #15
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e062      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4a3c      	ldr	r2, [pc, #240]	; (80040ac <USB_SetTurnaroundTime+0x120>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d306      	bcc.n	8003fcc <USB_SetTurnaroundTime+0x40>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4a3b      	ldr	r2, [pc, #236]	; (80040b0 <USB_SetTurnaroundTime+0x124>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d202      	bcs.n	8003fcc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fc6:	230e      	movs	r3, #14
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e057      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <USB_SetTurnaroundTime+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d306      	bcc.n	8003fe2 <USB_SetTurnaroundTime+0x56>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a37      	ldr	r2, [pc, #220]	; (80040b4 <USB_SetTurnaroundTime+0x128>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d202      	bcs.n	8003fe2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fdc:	230d      	movs	r3, #13
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e04c      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4a33      	ldr	r2, [pc, #204]	; (80040b4 <USB_SetTurnaroundTime+0x128>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d306      	bcc.n	8003ff8 <USB_SetTurnaroundTime+0x6c>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4a32      	ldr	r2, [pc, #200]	; (80040b8 <USB_SetTurnaroundTime+0x12c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d802      	bhi.n	8003ff8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e041      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4a2f      	ldr	r2, [pc, #188]	; (80040b8 <USB_SetTurnaroundTime+0x12c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d906      	bls.n	800400e <USB_SetTurnaroundTime+0x82>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <USB_SetTurnaroundTime+0x130>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d802      	bhi.n	800400e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004008:	230b      	movs	r3, #11
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e036      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <USB_SetTurnaroundTime+0x130>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d906      	bls.n	8004024 <USB_SetTurnaroundTime+0x98>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <USB_SetTurnaroundTime+0x134>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d802      	bhi.n	8004024 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800401e:	230a      	movs	r3, #10
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	e02b      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <USB_SetTurnaroundTime+0x134>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d906      	bls.n	800403a <USB_SetTurnaroundTime+0xae>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <USB_SetTurnaroundTime+0x138>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d202      	bcs.n	800403a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004034:	2309      	movs	r3, #9
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e020      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4a21      	ldr	r2, [pc, #132]	; (80040c4 <USB_SetTurnaroundTime+0x138>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d306      	bcc.n	8004050 <USB_SetTurnaroundTime+0xc4>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <USB_SetTurnaroundTime+0x13c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d802      	bhi.n	8004050 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800404a:	2308      	movs	r3, #8
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	e015      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <USB_SetTurnaroundTime+0x13c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d906      	bls.n	8004066 <USB_SetTurnaroundTime+0xda>
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a1c      	ldr	r2, [pc, #112]	; (80040cc <USB_SetTurnaroundTime+0x140>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d202      	bcs.n	8004066 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004060:	2307      	movs	r3, #7
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e00a      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004066:	2306      	movs	r3, #6
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e007      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004072:	2309      	movs	r3, #9
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e001      	b.n	800407c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004078:	2309      	movs	r3, #9
 800407a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	029b      	lsls	r3, r3, #10
 8004090:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	00d8acbf 	.word	0x00d8acbf
 80040ac:	00e4e1c0 	.word	0x00e4e1c0
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	01067380 	.word	0x01067380
 80040b8:	011a499f 	.word	0x011a499f
 80040bc:	01312cff 	.word	0x01312cff
 80040c0:	014ca43f 	.word	0x014ca43f
 80040c4:	016e3600 	.word	0x016e3600
 80040c8:	01a6ab1f 	.word	0x01a6ab1f
 80040cc:	01e84800 	.word	0x01e84800

080040d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f043 0201 	orr.w	r2, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 0201 	bic.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d115      	bne.n	8004162 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004142:	200a      	movs	r0, #10
 8004144:	f7fd fd52 	bl	8001bec <HAL_Delay>
      ms += 10U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	330a      	adds	r3, #10
 800414c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f001 f939 	bl	80053c6 <USB_GetMode>
 8004154:	4603      	mov	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d01e      	beq.n	8004198 <USB_SetCurrentMode+0x84>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2bc7      	cmp	r3, #199	; 0xc7
 800415e:	d9f0      	bls.n	8004142 <USB_SetCurrentMode+0x2e>
 8004160:	e01a      	b.n	8004198 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d115      	bne.n	8004194 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004174:	200a      	movs	r0, #10
 8004176:	f7fd fd39 	bl	8001bec <HAL_Delay>
      ms += 10U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	330a      	adds	r3, #10
 800417e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 f920 	bl	80053c6 <USB_GetMode>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <USB_SetCurrentMode+0x84>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2bc7      	cmp	r3, #199	; 0xc7
 8004190:	d9f0      	bls.n	8004174 <USB_SetCurrentMode+0x60>
 8004192:	e001      	b.n	8004198 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e005      	b.n	80041a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2bc8      	cmp	r3, #200	; 0xc8
 800419c:	d101      	bne.n	80041a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041ac:	b084      	sub	sp, #16
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b086      	sub	sp, #24
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e009      	b.n	80041e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3340      	adds	r3, #64	; 0x40
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3301      	adds	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b0e      	cmp	r3, #14
 80041e4:	d9f2      	bls.n	80041cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d11c      	bne.n	8004228 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
 8004226:	e00b      	b.n	8004240 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800424c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10d      	bne.n	8004270 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004258:	2b00      	cmp	r3, #0
 800425a:	d104      	bne.n	8004266 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800425c:	2100      	movs	r1, #0
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f968 	bl	8004534 <USB_SetDevSpeed>
 8004264:	e008      	b.n	8004278 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004266:	2101      	movs	r1, #1
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f963 	bl	8004534 <USB_SetDevSpeed>
 800426e:	e003      	b.n	8004278 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004270:	2103      	movs	r1, #3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f95e 	bl	8004534 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004278:	2110      	movs	r1, #16
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8fa 	bl	8004474 <USB_FlushTxFifo>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f924 	bl	80044d8 <USB_FlushRxFifo>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a0:	461a      	mov	r2, r3
 80042a2:	2300      	movs	r3, #0
 80042a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	461a      	mov	r2, r3
 80042ae:	2300      	movs	r3, #0
 80042b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b8:	461a      	mov	r2, r3
 80042ba:	2300      	movs	r3, #0
 80042bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e043      	b.n	800434c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042da:	d118      	bne.n	800430e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10a      	bne.n	80042f8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ee:	461a      	mov	r2, r3
 80042f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e013      	b.n	8004320 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004304:	461a      	mov	r2, r3
 8004306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	e008      	b.n	8004320 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	461a      	mov	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	461a      	mov	r2, r3
 800432e:	2300      	movs	r3, #0
 8004330:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433e:	461a      	mov	r2, r3
 8004340:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004344:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3301      	adds	r3, #1
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004350:	461a      	mov	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4293      	cmp	r3, r2
 8004356:	d3b5      	bcc.n	80042c4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e043      	b.n	80043e6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004374:	d118      	bne.n	80043a8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	461a      	mov	r2, r3
 800438a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	e013      	b.n	80043ba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e008      	b.n	80043ba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	461a      	mov	r2, r3
 80043b6:	2300      	movs	r3, #0
 80043b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	461a      	mov	r2, r3
 80043c8:	2300      	movs	r3, #0
 80043ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	3301      	adds	r3, #1
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043ea:	461a      	mov	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d3b5      	bcc.n	800435e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004404:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004412:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f043 0210 	orr.w	r2, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	4b10      	ldr	r3, [pc, #64]	; (8004470 <USB_DevInit+0x2c4>)
 800442e:	4313      	orrs	r3, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004434:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f043 0208 	orr.w	r2, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004448:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004458:	f043 0304 	orr.w	r3, r3, #4
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004460:	7dfb      	ldrb	r3, [r7, #23]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800446c:	b004      	add	sp, #16
 800446e:	4770      	bx	lr
 8004470:	803c3800 	.word	0x803c3800

08004474 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3301      	adds	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800448e:	d901      	bls.n	8004494 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e01b      	b.n	80044cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	daf2      	bge.n	8004482 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	019b      	lsls	r3, r3, #6
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80044b8:	d901      	bls.n	80044be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e006      	b.n	80044cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d0f0      	beq.n	80044ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3301      	adds	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80044f0:	d901      	bls.n	80044f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e018      	b.n	8004528 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	daf2      	bge.n	80044e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2210      	movs	r2, #16
 8004506:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3301      	adds	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004514:	d901      	bls.n	800451a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e006      	b.n	8004528 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b10      	cmp	r3, #16
 8004524:	d0f0      	beq.n	8004508 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004566:	b480      	push	{r7}
 8004568:	b087      	sub	sp, #28
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0306 	and.w	r3, r3, #6
 800457e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004586:	2300      	movs	r3, #0
 8004588:	75fb      	strb	r3, [r7, #23]
 800458a:	e00a      	b.n	80045a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d002      	beq.n	8004598 <USB_GetDevSpeed+0x32>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d102      	bne.n	800459e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004598:	2302      	movs	r3, #2
 800459a:	75fb      	strb	r3, [r7, #23]
 800459c:	e001      	b.n	80045a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800459e:	230f      	movs	r3, #15
 80045a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	371c      	adds	r7, #28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	785b      	ldrb	r3, [r3, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d13a      	bne.n	8004642 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	68f9      	ldr	r1, [r7, #12]
 80045e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d155      	bne.n	80046b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	791b      	ldrb	r3, [r3, #4]
 800461e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004620:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	059b      	lsls	r3, r3, #22
 8004626:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004628:	4313      	orrs	r3, r2
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	e036      	b.n	80046b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	041b      	lsls	r3, r3, #16
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004660:	4313      	orrs	r3, r2
 8004662:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d11a      	bne.n	80046b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	791b      	ldrb	r3, [r3, #4]
 8004694:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004696:	430b      	orrs	r3, r1
 8004698:	4313      	orrs	r3, r2
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d161      	bne.n	80047a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f2:	d11f      	bne.n	8004734 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	440a      	add	r2, r1
 800470a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004712:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	0151      	lsls	r1, r2, #5
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	440a      	add	r2, r1
 800472a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004754:	4013      	ands	r3, r2
 8004756:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	2101      	movs	r1, #1
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004778:	4013      	ands	r3, r2
 800477a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	0159      	lsls	r1, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	440b      	add	r3, r1
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	4619      	mov	r1, r3
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <USB_DeactivateEndpoint+0x1b0>)
 800479a:	4013      	ands	r3, r2
 800479c:	600b      	str	r3, [r1, #0]
 800479e:	e060      	b.n	8004862 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b6:	d11f      	bne.n	80047f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	2101      	movs	r1, #1
 800480a:	fa01 f303 	lsl.w	r3, r1, r3
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	43db      	mvns	r3, r3
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004818:	4013      	ands	r3, r2
 800481a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	43db      	mvns	r3, r3
 8004836:	68f9      	ldr	r1, [r7, #12]
 8004838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800483c:	4013      	ands	r3, r2
 800483e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	0159      	lsls	r1, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	440b      	add	r3, r1
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	4619      	mov	r1, r3
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <USB_DeactivateEndpoint+0x1b4>)
 800485e:	4013      	ands	r3, r2
 8004860:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	ec337800 	.word	0xec337800
 8004874:	eff37800 	.word	0xeff37800

08004878 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	2b01      	cmp	r3, #1
 8004896:	f040 817a 	bne.w	8004b8e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d132      	bne.n	8004908 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	0151      	lsls	r1, r2, #5
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	440a      	add	r2, r1
 80048fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004900:	0cdb      	lsrs	r3, r3, #19
 8004902:	04db      	lsls	r3, r3, #19
 8004904:	6113      	str	r3, [r2, #16]
 8004906:	e092      	b.n	8004a2e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004922:	0cdb      	lsrs	r3, r3, #19
 8004924:	04db      	lsls	r3, r3, #19
 8004926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004946:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800494a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d11a      	bne.n	8004988 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	429a      	cmp	r2, r3
 800495c:	d903      	bls.n	8004966 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	0151      	lsls	r1, r2, #5
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	440a      	add	r2, r1
 800497c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004984:	6113      	str	r3, [r2, #16]
 8004986:	e01b      	b.n	80049c0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6919      	ldr	r1, [r3, #16]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	440b      	add	r3, r1
 80049a0:	1e59      	subs	r1, r3, #1
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049ac:	4ba2      	ldr	r3, [pc, #648]	; (8004c38 <USB_EPStartXfer+0x3c0>)
 80049ae:	400b      	ands	r3, r1
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	0148      	lsls	r0, r1, #5
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	4401      	add	r1, r0
 80049b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d6:	69b9      	ldr	r1, [r7, #24]
 80049d8:	0148      	lsls	r0, r1, #5
 80049da:	69f9      	ldr	r1, [r7, #28]
 80049dc:	4401      	add	r1, r0
 80049de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049e2:	4313      	orrs	r3, r2
 80049e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	791b      	ldrb	r3, [r3, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d11f      	bne.n	8004a2e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d14b      	bne.n	8004acc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	791b      	ldrb	r3, [r3, #4]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d128      	bne.n	8004aaa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e00f      	b.n	8004aaa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	0151      	lsls	r1, r2, #5
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	440a      	add	r2, r1
 8004aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e165      	b.n	8004d98 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	791b      	ldrb	r3, [r3, #4]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d015      	beq.n	8004b20 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 814d 	beq.w	8004d98 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	634b      	str	r3, [r1, #52]	; 0x34
 8004b1e:	e13b      	b.n	8004d98 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d110      	bne.n	8004b52 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e00f      	b.n	8004b72 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	68d9      	ldr	r1, [r3, #12]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	b298      	uxth	r0, r3
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	4603      	mov	r3, r0
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f9b8 	bl	8004efc <USB_WritePacket>
 8004b8c:	e104      	b.n	8004d98 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba8:	0cdb      	lsrs	r3, r3, #19
 8004baa:	04db      	lsls	r3, r3, #19
 8004bac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bd0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d131      	bne.n	8004c3c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c06:	69b9      	ldr	r1, [r7, #24]
 8004c08:	0148      	lsls	r0, r1, #5
 8004c0a:	69f9      	ldr	r1, [r7, #28]
 8004c0c:	4401      	add	r1, r0
 8004c0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c12:	4313      	orrs	r3, r2
 8004c14:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c34:	6113      	str	r3, [r2, #16]
 8004c36:	e061      	b.n	8004cfc <USB_EPStartXfer+0x484>
 8004c38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d123      	bne.n	8004c8c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	0148      	lsls	r0, r1, #5
 8004c5e:	69f9      	ldr	r1, [r7, #28]
 8004c60:	4401      	add	r1, r0
 8004c62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c66:	4313      	orrs	r3, r2
 8004c68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c88:	6113      	str	r3, [r2, #16]
 8004c8a:	e037      	b.n	8004cfc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	8afa      	ldrh	r2, [r7, #22]
 8004ca8:	fb03 f202 	mul.w	r2, r3, r2
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	8afb      	ldrh	r3, [r7, #22]
 8004cc0:	04d9      	lsls	r1, r3, #19
 8004cc2:	4b38      	ldr	r3, [pc, #224]	; (8004da4 <USB_EPStartXfer+0x52c>)
 8004cc4:	400b      	ands	r3, r1
 8004cc6:	69b9      	ldr	r1, [r7, #24]
 8004cc8:	0148      	lsls	r0, r1, #5
 8004cca:	69f9      	ldr	r1, [r7, #28]
 8004ccc:	4401      	add	r1, r0
 8004cce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	0148      	lsls	r0, r1, #5
 8004cf0:	69f9      	ldr	r1, [r7, #28]
 8004cf2:	4401      	add	r1, r0
 8004cf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004cfc:	79fb      	ldrb	r3, [r7, #7]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10d      	bne.n	8004d1e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	68d9      	ldr	r1, [r3, #12]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	460a      	mov	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	791b      	ldrb	r3, [r3, #4]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d128      	bne.n	8004d78 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d110      	bne.n	8004d58 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00f      	b.n	8004d78 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	0151      	lsls	r1, r2, #5
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3720      	adds	r7, #32
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	1ff80000 	.word	0x1ff80000

08004da8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	785b      	ldrb	r3, [r3, #1]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d14a      	bne.n	8004e5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dde:	f040 8086 	bne.w	8004eee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	7812      	ldrb	r2, [r2, #0]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	7812      	ldrb	r2, [r2, #0]
 8004e1a:	0151      	lsls	r1, r2, #5
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	440a      	add	r2, r1
 8004e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d902      	bls.n	8004e40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e3e:	e056      	b.n	8004eee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e58:	d0e7      	beq.n	8004e2a <USB_EPStopXfer+0x82>
 8004e5a:	e048      	b.n	8004eee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e74:	d13b      	bne.n	8004eee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	7812      	ldrb	r2, [r2, #0]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	7812      	ldrb	r2, [r2, #0]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ebc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d902      	bls.n	8004ed4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
          break;
 8004ed2:	e00c      	b.n	8004eee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eec:	d0e7      	beq.n	8004ebe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b089      	sub	sp, #36	; 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4611      	mov	r1, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	71fb      	strb	r3, [r7, #7]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d123      	bne.n	8004f6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f22:	88bb      	ldrh	r3, [r7, #4]
 8004f24:	3303      	adds	r3, #3
 8004f26:	089b      	lsrs	r3, r3, #2
 8004f28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	e018      	b.n	8004f62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	031a      	lsls	r2, r3, #12
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	3301      	adds	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	3301      	adds	r3, #1
 8004f54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3e2      	bcc.n	8004f30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3724      	adds	r7, #36	; 0x24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b08b      	sub	sp, #44	; 0x2c
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	089b      	lsrs	r3, r3, #2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	e014      	b.n	8004fce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	3301      	adds	r3, #1
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	6a3a      	ldr	r2, [r7, #32]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d3e6      	bcc.n	8004fa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004fd6:	8bfb      	ldrh	r3, [r7, #30]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01e      	beq.n	800501a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f107 0310 	add.w	r3, r7, #16
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	701a      	strb	r2, [r3, #0]
      i++;
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	3301      	adds	r3, #1
 8005006:	623b      	str	r3, [r7, #32]
      pDest++;
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	3301      	adds	r3, #1
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800500e:	8bfb      	ldrh	r3, [r7, #30]
 8005010:	3b01      	subs	r3, #1
 8005012:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005014:	8bfb      	ldrh	r3, [r7, #30]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ea      	bne.n	8004ff0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800501c:	4618      	mov	r0, r3
 800501e:	372c      	adds	r7, #44	; 0x2c
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	785b      	ldrb	r3, [r3, #1]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d12c      	bne.n	800509e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	db12      	blt.n	800507c <USB_EPSetStall+0x54>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00f      	beq.n	800507c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	0151      	lsls	r1, r2, #5
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	440a      	add	r2, r1
 8005072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005076:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800507a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e02b      	b.n	80050f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	db12      	blt.n	80050d6 <USB_EPSetStall+0xae>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00f      	beq.n	80050d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d128      	bne.n	8005172 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800513e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	791b      	ldrb	r3, [r3, #4]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d003      	beq.n	8005150 <USB_EPClearStall+0x4c>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	791b      	ldrb	r3, [r3, #4]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d138      	bne.n	80051c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e027      	b.n	80051c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005190:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	791b      	ldrb	r3, [r3, #4]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d003      	beq.n	80051a2 <USB_EPClearStall+0x9e>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	791b      	ldrb	r3, [r3, #4]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d10f      	bne.n	80051c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005204:	68f9      	ldr	r1, [r7, #12]
 8005206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524a:	f023 0302 	bic.w	r3, r3, #2
 800524e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800525e:	b480      	push	{r7}
 8005260:	b085      	sub	sp, #20
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005278:	f023 0303 	bic.w	r3, r3, #3
 800527c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800528c:	f043 0302 	orr.w	r3, r3, #2
 8005290:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4013      	ands	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	0c1b      	lsrs	r3, r3, #16
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	4013      	ands	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	b29b      	uxth	r3, r3
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800535c:	68bb      	ldr	r3, [r7, #8]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800536a:	b480      	push	{r7}
 800536c:	b087      	sub	sp, #28
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	460b      	mov	r3, r1
 8005374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	fa22 f303 	lsr.w	r3, r2, r3
 800539a:	01db      	lsls	r3, r3, #7
 800539c:	b2db      	uxtb	r3, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4013      	ands	r3, r2
 80053b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053b8:	68bb      	ldr	r3, [r7, #8]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	f003 0301 	and.w	r3, r3, #1
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005400:	f023 0307 	bic.w	r3, r3, #7
 8005404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	460b      	mov	r3, r1
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	333c      	adds	r3, #60	; 0x3c
 800543e:	3304      	adds	r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <USB_EP0_OutStart+0xb8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d90a      	bls.n	8005462 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545c:	d101      	bne.n	8005462 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e037      	b.n	80054d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	2300      	movs	r3, #0
 800546c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005490:	f043 0318 	orr.w	r3, r3, #24
 8005494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054aa:	7afb      	ldrb	r3, [r7, #11]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10f      	bne.n	80054d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80054ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	4f54300a 	.word	0x4f54300a

080054e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80054fc:	d901      	bls.n	8005502 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e01b      	b.n	800553a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	daf2      	bge.n	80054f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f043 0201 	orr.w	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005526:	d901      	bls.n	800552c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e006      	b.n	800553a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d0f0      	beq.n	800551a <USB_CoreReset+0x36>

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
	...

08005548 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005554:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005558:	f002 fc8a 	bl	8007e70 <USBD_static_malloc>
 800555c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	32b0      	adds	r2, #176	; 0xb0
 800556e:	2100      	movs	r1, #0
 8005570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005574:	2302      	movs	r3, #2
 8005576:	e0d4      	b.n	8005722 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005578:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800557c:	2100      	movs	r1, #0
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f003 fc89 	bl	8008e96 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	32b0      	adds	r2, #176	; 0xb0
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	32b0      	adds	r2, #176	; 0xb0
 800559e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	7c1b      	ldrb	r3, [r3, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d138      	bne.n	8005622 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055b0:	4b5e      	ldr	r3, [pc, #376]	; (800572c <USBD_CDC_Init+0x1e4>)
 80055b2:	7819      	ldrb	r1, [r3, #0]
 80055b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b8:	2202      	movs	r2, #2
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f002 fb35 	bl	8007c2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055c0:	4b5a      	ldr	r3, [pc, #360]	; (800572c <USBD_CDC_Init+0x1e4>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	3324      	adds	r3, #36	; 0x24
 80055d6:	2201      	movs	r2, #1
 80055d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80055da:	4b55      	ldr	r3, [pc, #340]	; (8005730 <USBD_CDC_Init+0x1e8>)
 80055dc:	7819      	ldrb	r1, [r3, #0]
 80055de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055e2:	2202      	movs	r2, #2
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f002 fb20 	bl	8007c2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055ea:	4b51      	ldr	r3, [pc, #324]	; (8005730 <USBD_CDC_Init+0x1e8>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f003 020f 	and.w	r2, r3, #15
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005602:	2201      	movs	r2, #1
 8005604:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005606:	4b4b      	ldr	r3, [pc, #300]	; (8005734 <USBD_CDC_Init+0x1ec>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	3326      	adds	r3, #38	; 0x26
 800561c:	2210      	movs	r2, #16
 800561e:	801a      	strh	r2, [r3, #0]
 8005620:	e035      	b.n	800568e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005622:	4b42      	ldr	r3, [pc, #264]	; (800572c <USBD_CDC_Init+0x1e4>)
 8005624:	7819      	ldrb	r1, [r3, #0]
 8005626:	2340      	movs	r3, #64	; 0x40
 8005628:	2202      	movs	r2, #2
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f002 fafd 	bl	8007c2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005630:	4b3e      	ldr	r3, [pc, #248]	; (800572c <USBD_CDC_Init+0x1e4>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	f003 020f 	and.w	r2, r3, #15
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	440b      	add	r3, r1
 8005644:	3324      	adds	r3, #36	; 0x24
 8005646:	2201      	movs	r2, #1
 8005648:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800564a:	4b39      	ldr	r3, [pc, #228]	; (8005730 <USBD_CDC_Init+0x1e8>)
 800564c:	7819      	ldrb	r1, [r3, #0]
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	2202      	movs	r2, #2
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f002 fae9 	bl	8007c2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005658:	4b35      	ldr	r3, [pc, #212]	; (8005730 <USBD_CDC_Init+0x1e8>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f003 020f 	and.w	r2, r3, #15
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005670:	2201      	movs	r2, #1
 8005672:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005674:	4b2f      	ldr	r3, [pc, #188]	; (8005734 <USBD_CDC_Init+0x1ec>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	f003 020f 	and.w	r2, r3, #15
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	3326      	adds	r3, #38	; 0x26
 800568a:	2210      	movs	r2, #16
 800568c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800568e:	4b29      	ldr	r3, [pc, #164]	; (8005734 <USBD_CDC_Init+0x1ec>)
 8005690:	7819      	ldrb	r1, [r3, #0]
 8005692:	2308      	movs	r3, #8
 8005694:	2203      	movs	r2, #3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f002 fac7 	bl	8007c2a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <USBD_CDC_Init+0x1ec>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	3324      	adds	r3, #36	; 0x24
 80056b2:	2201      	movs	r2, #1
 80056b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	33b0      	adds	r3, #176	; 0xb0
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80056ec:	2302      	movs	r3, #2
 80056ee:	e018      	b.n	8005722 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7c1b      	ldrb	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056f8:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <USBD_CDC_Init+0x1e8>)
 80056fa:	7819      	ldrb	r1, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005702:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f002 fb7e 	bl	8007e08 <USBD_LL_PrepareReceive>
 800570c:	e008      	b.n	8005720 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <USBD_CDC_Init+0x1e8>)
 8005710:	7819      	ldrb	r1, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005718:	2340      	movs	r3, #64	; 0x40
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f002 fb74 	bl	8007e08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000093 	.word	0x20000093
 8005730:	20000094 	.word	0x20000094
 8005734:	20000095 	.word	0x20000095

08005738 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005744:	4b3a      	ldr	r3, [pc, #232]	; (8005830 <USBD_CDC_DeInit+0xf8>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f002 fa93 	bl	8007c76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005750:	4b37      	ldr	r3, [pc, #220]	; (8005830 <USBD_CDC_DeInit+0xf8>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	3324      	adds	r3, #36	; 0x24
 8005766:	2200      	movs	r2, #0
 8005768:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800576a:	4b32      	ldr	r3, [pc, #200]	; (8005834 <USBD_CDC_DeInit+0xfc>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f002 fa80 	bl	8007c76 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005776:	4b2f      	ldr	r3, [pc, #188]	; (8005834 <USBD_CDC_DeInit+0xfc>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	f003 020f 	and.w	r2, r3, #15
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800578e:	2200      	movs	r2, #0
 8005790:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005792:	4b29      	ldr	r3, [pc, #164]	; (8005838 <USBD_CDC_DeInit+0x100>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f002 fa6c 	bl	8007c76 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800579e:	4b26      	ldr	r3, [pc, #152]	; (8005838 <USBD_CDC_DeInit+0x100>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	f003 020f 	and.w	r2, r3, #15
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	3324      	adds	r3, #36	; 0x24
 80057b4:	2200      	movs	r2, #0
 80057b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <USBD_CDC_DeInit+0x100>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 020f 	and.w	r2, r3, #15
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3326      	adds	r3, #38	; 0x26
 80057ce:	2200      	movs	r2, #0
 80057d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	32b0      	adds	r2, #176	; 0xb0
 80057dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01f      	beq.n	8005824 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	33b0      	adds	r3, #176	; 0xb0
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	32b0      	adds	r2, #176	; 0xb0
 8005802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005806:	4618      	mov	r0, r3
 8005808:	f002 fb40 	bl	8007e8c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	32b0      	adds	r2, #176	; 0xb0
 8005816:	2100      	movs	r1, #0
 8005818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000093 	.word	0x20000093
 8005834:	20000094 	.word	0x20000094
 8005838:	20000095 	.word	0x20000095

0800583c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	32b0      	adds	r2, #176	; 0xb0
 8005850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005854:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005868:	2303      	movs	r3, #3
 800586a:	e0bf      	b.n	80059ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005874:	2b00      	cmp	r3, #0
 8005876:	d050      	beq.n	800591a <USBD_CDC_Setup+0xde>
 8005878:	2b20      	cmp	r3, #32
 800587a:	f040 80af 	bne.w	80059dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	88db      	ldrh	r3, [r3, #6]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d03a      	beq.n	80058fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b25b      	sxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	da1b      	bge.n	80058c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	33b0      	adds	r3, #176	; 0xb0
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80058a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	88d2      	ldrh	r2, [r2, #6]
 80058ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	88db      	ldrh	r3, [r3, #6]
 80058b2:	2b07      	cmp	r3, #7
 80058b4:	bf28      	it	cs
 80058b6:	2307      	movcs	r3, #7
 80058b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	89fa      	ldrh	r2, [r7, #14]
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 fd89 	bl	80073d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80058c6:	e090      	b.n	80059ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	785a      	ldrb	r2, [r3, #1]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	88db      	ldrh	r3, [r3, #6]
 80058d6:	2b3f      	cmp	r3, #63	; 0x3f
 80058d8:	d803      	bhi.n	80058e2 <USBD_CDC_Setup+0xa6>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	88db      	ldrh	r3, [r3, #6]
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	e000      	b.n	80058e4 <USBD_CDC_Setup+0xa8>
 80058e2:	2240      	movs	r2, #64	; 0x40
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80058f2:	461a      	mov	r2, r3
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 fd9b 	bl	8007430 <USBD_CtlPrepareRx>
      break;
 80058fa:	e076      	b.n	80059ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	33b0      	adds	r3, #176	; 0xb0
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	7850      	ldrb	r0, [r2, #1]
 8005912:	2200      	movs	r2, #0
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	4798      	blx	r3
      break;
 8005918:	e067      	b.n	80059ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	785b      	ldrb	r3, [r3, #1]
 800591e:	2b0b      	cmp	r3, #11
 8005920:	d851      	bhi.n	80059c6 <USBD_CDC_Setup+0x18a>
 8005922:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <USBD_CDC_Setup+0xec>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	08005959 	.word	0x08005959
 800592c:	080059d5 	.word	0x080059d5
 8005930:	080059c7 	.word	0x080059c7
 8005934:	080059c7 	.word	0x080059c7
 8005938:	080059c7 	.word	0x080059c7
 800593c:	080059c7 	.word	0x080059c7
 8005940:	080059c7 	.word	0x080059c7
 8005944:	080059c7 	.word	0x080059c7
 8005948:	080059c7 	.word	0x080059c7
 800594c:	080059c7 	.word	0x080059c7
 8005950:	08005983 	.word	0x08005983
 8005954:	080059ad 	.word	0x080059ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b03      	cmp	r3, #3
 8005962:	d107      	bne.n	8005974 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005964:	f107 030a 	add.w	r3, r7, #10
 8005968:	2202      	movs	r2, #2
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 fd33 	bl	80073d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005972:	e032      	b.n	80059da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f001 fcbd 	bl	80072f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800597c:	2303      	movs	r3, #3
 800597e:	75fb      	strb	r3, [r7, #23]
          break;
 8005980:	e02b      	b.n	80059da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d107      	bne.n	800599e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800598e:	f107 030d 	add.w	r3, r7, #13
 8005992:	2201      	movs	r2, #1
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fd1e 	bl	80073d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800599c:	e01d      	b.n	80059da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 fca8 	bl	80072f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80059a6:	2303      	movs	r3, #3
 80059a8:	75fb      	strb	r3, [r7, #23]
          break;
 80059aa:	e016      	b.n	80059da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d00f      	beq.n	80059d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 fc9b 	bl	80072f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80059c0:	2303      	movs	r3, #3
 80059c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80059c4:	e008      	b.n	80059d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 fc94 	bl	80072f6 <USBD_CtlError>
          ret = USBD_FAIL;
 80059ce:	2303      	movs	r3, #3
 80059d0:	75fb      	strb	r3, [r7, #23]
          break;
 80059d2:	e002      	b.n	80059da <USBD_CDC_Setup+0x19e>
          break;
 80059d4:	bf00      	nop
 80059d6:	e008      	b.n	80059ea <USBD_CDC_Setup+0x1ae>
          break;
 80059d8:	bf00      	nop
      }
      break;
 80059da:	e006      	b.n	80059ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fc89 	bl	80072f6 <USBD_CtlError>
      ret = USBD_FAIL;
 80059e4:	2303      	movs	r3, #3
 80059e6:	75fb      	strb	r3, [r7, #23]
      break;
 80059e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005a06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	32b0      	adds	r2, #176	; 0xb0
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e065      	b.n	8005aea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	32b0      	adds	r2, #176	; 0xb0
 8005a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	f003 020f 	and.w	r2, r3, #15
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	3318      	adds	r3, #24
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d02f      	beq.n	8005aa8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	f003 020f 	and.w	r2, r3, #15
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	3318      	adds	r3, #24
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	f003 010f 	and.w	r1, r3, #15
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	460b      	mov	r3, r1
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	440b      	add	r3, r1
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4403      	add	r3, r0
 8005a70:	331c      	adds	r3, #28
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d112      	bne.n	8005aa8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a82:	78fb      	ldrb	r3, [r7, #3]
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	3318      	adds	r3, #24
 8005a96:	2200      	movs	r2, #0
 8005a98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a9a:	78f9      	ldrb	r1, [r7, #3]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f002 f990 	bl	8007dc6 <USBD_LL_Transmit>
 8005aa6:	e01f      	b.n	8005ae8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	33b0      	adds	r3, #176	; 0xb0
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d010      	beq.n	8005ae8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	33b0      	adds	r3, #176	; 0xb0
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005ae4:	78fa      	ldrb	r2, [r7, #3]
 8005ae6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	32b0      	adds	r2, #176	; 0xb0
 8005b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	32b0      	adds	r2, #176	; 0xb0
 8005b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e01a      	b.n	8005b5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f002 f98e 	bl	8007e4a <USBD_LL_GetRxDataSize>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	33b0      	adds	r3, #176	; 0xb0
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b54:	4611      	mov	r1, r2
 8005b56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	32b0      	adds	r2, #176	; 0xb0
 8005b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e025      	b.n	8005bd0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	33b0      	adds	r3, #176	; 0xb0
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01a      	beq.n	8005bce <USBD_CDC_EP0_RxReady+0x6c>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b9e:	2bff      	cmp	r3, #255	; 0xff
 8005ba0:	d015      	beq.n	8005bce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	33b0      	adds	r3, #176	; 0xb0
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005bba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005bc2:	b292      	uxth	r2, r2
 8005bc4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	22ff      	movs	r2, #255	; 0xff
 8005bca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005be0:	2182      	movs	r1, #130	; 0x82
 8005be2:	4818      	ldr	r0, [pc, #96]	; (8005c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005be4:	f000 fd4f 	bl	8006686 <USBD_GetEpDesc>
 8005be8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bea:	2101      	movs	r1, #1
 8005bec:	4815      	ldr	r0, [pc, #84]	; (8005c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bee:	f000 fd4a 	bl	8006686 <USBD_GetEpDesc>
 8005bf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bf4:	2181      	movs	r1, #129	; 0x81
 8005bf6:	4813      	ldr	r0, [pc, #76]	; (8005c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bf8:	f000 fd45 	bl	8006686 <USBD_GetEpDesc>
 8005bfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2210      	movs	r2, #16
 8005c08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d006      	beq.n	8005c1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c18:	711a      	strb	r2, [r3, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c2c:	711a      	strb	r2, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2243      	movs	r2, #67	; 0x43
 8005c36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000050 	.word	0x20000050

08005c48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c50:	2182      	movs	r1, #130	; 0x82
 8005c52:	4818      	ldr	r0, [pc, #96]	; (8005cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c54:	f000 fd17 	bl	8006686 <USBD_GetEpDesc>
 8005c58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	4815      	ldr	r0, [pc, #84]	; (8005cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c5e:	f000 fd12 	bl	8006686 <USBD_GetEpDesc>
 8005c62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c64:	2181      	movs	r1, #129	; 0x81
 8005c66:	4813      	ldr	r0, [pc, #76]	; (8005cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c68:	f000 fd0d 	bl	8006686 <USBD_GetEpDesc>
 8005c6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2210      	movs	r2, #16
 8005c78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d006      	beq.n	8005c8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	2200      	movs	r2, #0
 8005c84:	711a      	strb	r2, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f042 0202 	orr.w	r2, r2, #2
 8005c8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	711a      	strb	r2, [r3, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f042 0202 	orr.w	r2, r2, #2
 8005ca0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2243      	movs	r2, #67	; 0x43
 8005ca6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ca8:	4b02      	ldr	r3, [pc, #8]	; (8005cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000050 	.word	0x20000050

08005cb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cc0:	2182      	movs	r1, #130	; 0x82
 8005cc2:	4818      	ldr	r0, [pc, #96]	; (8005d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cc4:	f000 fcdf 	bl	8006686 <USBD_GetEpDesc>
 8005cc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005cca:	2101      	movs	r1, #1
 8005ccc:	4815      	ldr	r0, [pc, #84]	; (8005d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cce:	f000 fcda 	bl	8006686 <USBD_GetEpDesc>
 8005cd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cd4:	2181      	movs	r1, #129	; 0x81
 8005cd6:	4813      	ldr	r0, [pc, #76]	; (8005d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005cd8:	f000 fcd5 	bl	8006686 <USBD_GetEpDesc>
 8005cdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d006      	beq.n	8005cfe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf8:	711a      	strb	r2, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d006      	beq.n	8005d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d0c:	711a      	strb	r2, [r3, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2243      	movs	r2, #67	; 0x43
 8005d16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000050 	.word	0x20000050

08005d28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	220a      	movs	r2, #10
 8005d34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005d36:	4b03      	ldr	r3, [pc, #12]	; (8005d44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	2000000c 	.word	0x2000000c

08005d48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e009      	b.n	8005d70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	33b0      	adds	r3, #176	; 0xb0
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	32b0      	adds	r2, #176	; 0xb0
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e008      	b.n	8005db4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	32b0      	adds	r2, #176	; 0xb0
 8005dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e004      	b.n	8005dee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	32b0      	adds	r2, #176	; 0xb0
 8005e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e12:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e025      	b.n	8005e6e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11f      	bne.n	8005e6c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005e34:	4b10      	ldr	r3, [pc, #64]	; (8005e78 <USBD_CDC_TransmitPacket+0x7c>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 020f 	and.w	r2, r3, #15
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4403      	add	r3, r0
 8005e4e:	3318      	adds	r3, #24
 8005e50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005e52:	4b09      	ldr	r3, [pc, #36]	; (8005e78 <USBD_CDC_TransmitPacket+0x7c>)
 8005e54:	7819      	ldrb	r1, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f001 ffaf 	bl	8007dc6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000093 	.word	0x20000093

08005e7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	32b0      	adds	r2, #176	; 0xb0
 8005e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	32b0      	adds	r2, #176	; 0xb0
 8005e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e018      	b.n	8005edc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7c1b      	ldrb	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <USBD_CDC_ReceivePacket+0x68>)
 8005eb4:	7819      	ldrb	r1, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 ffa1 	bl	8007e08 <USBD_LL_PrepareReceive>
 8005ec6:	e008      	b.n	8005eda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <USBD_CDC_ReceivePacket+0x68>)
 8005eca:	7819      	ldrb	r1, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ed2:	2340      	movs	r3, #64	; 0x40
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 ff97 	bl	8007e08 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000094 	.word	0x20000094

08005ee8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e01f      	b.n	8005f40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	79fa      	ldrb	r2, [r7, #7]
 8005f32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f001 fe11 	bl	8007b5c <USBD_LL_Init>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e025      	b.n	8005fac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	32ae      	adds	r2, #174	; 0xae
 8005f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00f      	beq.n	8005f9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	32ae      	adds	r2, #174	; 0xae
 8005f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	f107 020e 	add.w	r2, r7, #14
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	4602      	mov	r2, r0
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fe19 	bl	8007bf4 <USBD_LL_Start>
 8005fc2:	4603      	mov	r3, r0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d009      	beq.n	8006010 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	78fa      	ldrb	r2, [r7, #3]
 8006006:	4611      	mov	r1, r2
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006040:	2303      	movs	r3, #3
 8006042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f001 f90e 	bl	8007282 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006074:	461a      	mov	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	2b02      	cmp	r3, #2
 8006088:	d01a      	beq.n	80060c0 <USBD_LL_SetupStage+0x72>
 800608a:	2b02      	cmp	r3, #2
 800608c:	d822      	bhi.n	80060d4 <USBD_LL_SetupStage+0x86>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <USBD_LL_SetupStage+0x4a>
 8006092:	2b01      	cmp	r3, #1
 8006094:	d00a      	beq.n	80060ac <USBD_LL_SetupStage+0x5e>
 8006096:	e01d      	b.n	80060d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fb65 	bl	8006770 <USBD_StdDevReq>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73fb      	strb	r3, [r7, #15]
      break;
 80060aa:	e020      	b.n	80060ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fbcd 	bl	8006854 <USBD_StdItfReq>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]
      break;
 80060be:	e016      	b.n	80060ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fc2f 	bl	800692c <USBD_StdEPReq>
 80060ce:	4603      	mov	r3, r0
 80060d0:	73fb      	strb	r3, [r7, #15]
      break;
 80060d2:	e00c      	b.n	80060ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fde6 	bl	8007cb4 <USBD_LL_StallEP>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	bf00      	nop
  }

  return ret;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	460b      	mov	r3, r1
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d16e      	bne.n	80061ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006116:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800611e:	2b03      	cmp	r3, #3
 8006120:	f040 8098 	bne.w	8006254 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	429a      	cmp	r2, r3
 800612e:	d913      	bls.n	8006158 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	1ad2      	subs	r2, r2, r3
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	4293      	cmp	r3, r2
 8006148:	bf28      	it	cs
 800614a:	4613      	movcs	r3, r2
 800614c:	461a      	mov	r2, r3
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f001 f98a 	bl	800746a <USBD_CtlContinueRx>
 8006156:	e07d      	b.n	8006254 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2b02      	cmp	r3, #2
 8006164:	d014      	beq.n	8006190 <USBD_LL_DataOutStage+0x98>
 8006166:	2b02      	cmp	r3, #2
 8006168:	d81d      	bhi.n	80061a6 <USBD_LL_DataOutStage+0xae>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <USBD_LL_DataOutStage+0x7c>
 800616e:	2b01      	cmp	r3, #1
 8006170:	d003      	beq.n	800617a <USBD_LL_DataOutStage+0x82>
 8006172:	e018      	b.n	80061a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	75bb      	strb	r3, [r7, #22]
            break;
 8006178:	e018      	b.n	80061ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006180:	b2db      	uxtb	r3, r3
 8006182:	4619      	mov	r1, r3
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 fa64 	bl	8006652 <USBD_CoreFindIF>
 800618a:	4603      	mov	r3, r0
 800618c:	75bb      	strb	r3, [r7, #22]
            break;
 800618e:	e00d      	b.n	80061ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006196:	b2db      	uxtb	r3, r3
 8006198:	4619      	mov	r1, r3
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 fa66 	bl	800666c <USBD_CoreFindEP>
 80061a0:	4603      	mov	r3, r0
 80061a2:	75bb      	strb	r3, [r7, #22]
            break;
 80061a4:	e002      	b.n	80061ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75bb      	strb	r3, [r7, #22]
            break;
 80061aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061ac:	7dbb      	ldrb	r3, [r7, #22]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d119      	bne.n	80061e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d113      	bne.n	80061e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80061be:	7dba      	ldrb	r2, [r7, #22]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	32ae      	adds	r2, #174	; 0xae
 80061c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80061ce:	7dba      	ldrb	r2, [r7, #22]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80061d6:	7dba      	ldrb	r2, [r7, #22]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	32ae      	adds	r2, #174	; 0xae
 80061dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f001 f950 	bl	800748c <USBD_CtlSendStatus>
 80061ec:	e032      	b.n	8006254 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	4619      	mov	r1, r3
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fa37 	bl	800666c <USBD_CoreFindEP>
 80061fe:	4603      	mov	r3, r0
 8006200:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006202:	7dbb      	ldrb	r3, [r7, #22]
 8006204:	2bff      	cmp	r3, #255	; 0xff
 8006206:	d025      	beq.n	8006254 <USBD_LL_DataOutStage+0x15c>
 8006208:	7dbb      	ldrb	r3, [r7, #22]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d122      	bne.n	8006254 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d117      	bne.n	800624a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800621a:	7dba      	ldrb	r2, [r7, #22]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	32ae      	adds	r2, #174	; 0xae
 8006220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00f      	beq.n	800624a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800622a:	7dba      	ldrb	r2, [r7, #22]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006232:	7dba      	ldrb	r2, [r7, #22]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	32ae      	adds	r2, #174	; 0xae
 8006238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	7afa      	ldrb	r2, [r7, #11]
 8006240:	4611      	mov	r1, r2
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	4798      	blx	r3
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	e000      	b.n	8006256 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b086      	sub	sp, #24
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	460b      	mov	r3, r1
 8006268:	607a      	str	r2, [r7, #4]
 800626a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d16f      	bne.n	8006352 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3314      	adds	r3, #20
 8006276:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800627e:	2b02      	cmp	r3, #2
 8006280:	d15a      	bne.n	8006338 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	429a      	cmp	r2, r3
 800628c:	d914      	bls.n	80062b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	1ad2      	subs	r2, r2, r3
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	461a      	mov	r2, r3
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f001 f8b2 	bl	800740e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062aa:	2300      	movs	r3, #0
 80062ac:	2200      	movs	r2, #0
 80062ae:	2100      	movs	r1, #0
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f001 fda9 	bl	8007e08 <USBD_LL_PrepareReceive>
 80062b6:	e03f      	b.n	8006338 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d11c      	bne.n	80062fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d316      	bcc.n	80062fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20f      	bcs.n	80062fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062de:	2200      	movs	r2, #0
 80062e0:	2100      	movs	r1, #0
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f001 f893 	bl	800740e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062f0:	2300      	movs	r3, #0
 80062f2:	2200      	movs	r2, #0
 80062f4:	2100      	movs	r1, #0
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f001 fd86 	bl	8007e08 <USBD_LL_PrepareReceive>
 80062fc:	e01c      	b.n	8006338 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b03      	cmp	r3, #3
 8006308:	d10f      	bne.n	800632a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f001 fcc1 	bl	8007cb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f001 f8bd 	bl	80074b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d03a      	beq.n	80063b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff fe42 	bl	8005fcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006350:	e032      	b.n	80063b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006358:	b2db      	uxtb	r3, r3
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f985 	bl	800666c <USBD_CoreFindEP>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2bff      	cmp	r3, #255	; 0xff
 800636a:	d025      	beq.n	80063b8 <USBD_LL_DataInStage+0x15a>
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d122      	bne.n	80063b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b03      	cmp	r3, #3
 800637c:	d11c      	bne.n	80063b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800637e:	7dfa      	ldrb	r2, [r7, #23]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	32ae      	adds	r2, #174	; 0xae
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d014      	beq.n	80063b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800638e:	7dfa      	ldrb	r2, [r7, #23]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006396:	7dfa      	ldrb	r2, [r7, #23]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	32ae      	adds	r2, #174	; 0xae
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	7afa      	ldrb	r2, [r7, #11]
 80063a4:	4611      	mov	r1, r2
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	4798      	blx	r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063ae:	7dbb      	ldrb	r3, [r7, #22]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063b4:	7dbb      	ldrb	r3, [r7, #22]
 80063b6:	e000      	b.n	80063ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d014      	beq.n	8006428 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00e      	beq.n	8006428 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6852      	ldr	r2, [r2, #4]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	4611      	mov	r1, r2
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006424:	2303      	movs	r3, #3
 8006426:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006428:	2340      	movs	r3, #64	; 0x40
 800642a:	2200      	movs	r2, #0
 800642c:	2100      	movs	r1, #0
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f001 fbfb 	bl	8007c2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2240      	movs	r2, #64	; 0x40
 8006440:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006444:	2340      	movs	r3, #64	; 0x40
 8006446:	2200      	movs	r2, #0
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 fbed 	bl	8007c2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2240      	movs	r2, #64	; 0x40
 800645a:	621a      	str	r2, [r3, #32]

  return ret;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	78fa      	ldrb	r2, [r7, #3]
 8006476:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b04      	cmp	r3, #4
 8006498:	d006      	beq.n	80064a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2204      	movs	r2, #4
 80064ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d106      	bne.n	80064e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d110      	bne.n	8006524 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	32ae      	adds	r2, #174	; 0xae
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800654c:	2303      	movs	r3, #3
 800654e:	e01c      	b.n	800658a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b03      	cmp	r3, #3
 800655a:	d115      	bne.n	8006588 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	32ae      	adds	r2, #174	; 0xae
 8006566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	32ae      	adds	r2, #174	; 0xae
 800657a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	78fa      	ldrb	r2, [r7, #3]
 8006582:	4611      	mov	r1, r2
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b082      	sub	sp, #8
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	32ae      	adds	r2, #174	; 0xae
 80065a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e01c      	b.n	80065ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b03      	cmp	r3, #3
 80065be:	d115      	bne.n	80065ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	32ae      	adds	r2, #174	; 0xae
 80065ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	32ae      	adds	r2, #174	; 0xae
 80065de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	78fa      	ldrb	r2, [r7, #3]
 80065e6:	4611      	mov	r1, r2
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	6852      	ldr	r2, [r2, #4]
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	4611      	mov	r1, r2
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800665e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006660:	4618      	mov	r0, r3
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006678:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b086      	sub	sp, #24
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	460b      	mov	r3, r1
 8006690:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800669a:	2300      	movs	r3, #0
 800669c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	885b      	ldrh	r3, [r3, #2]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d920      	bls.n	80066f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066b6:	e013      	b.n	80066e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066b8:	f107 030a 	add.w	r3, r7, #10
 80066bc:	4619      	mov	r1, r3
 80066be:	6978      	ldr	r0, [r7, #20]
 80066c0:	f000 f81b 	bl	80066fa <USBD_GetNextDesc>
 80066c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d108      	bne.n	80066e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	789b      	ldrb	r3, [r3, #2]
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d008      	beq.n	80066ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	885b      	ldrh	r3, [r3, #2]
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	897b      	ldrh	r3, [r7, #10]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d8e5      	bhi.n	80066b8 <USBD_GetEpDesc+0x32>
 80066ec:	e000      	b.n	80066f0 <USBD_GetEpDesc+0x6a>
          break;
 80066ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80066f0:	693b      	ldr	r3, [r7, #16]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	881a      	ldrh	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	b29b      	uxth	r3, r3
 8006712:	4413      	add	r3, r2
 8006714:	b29a      	uxth	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4413      	add	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006726:	68fb      	ldr	r3, [r7, #12]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	3301      	adds	r3, #1
 800674a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006752:	8a3b      	ldrh	r3, [r7, #16]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	b21a      	sxth	r2, r3
 8006758:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800675c:	4313      	orrs	r3, r2
 800675e:	b21b      	sxth	r3, r3
 8006760:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006762:	89fb      	ldrh	r3, [r7, #14]
}
 8006764:	4618      	mov	r0, r3
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d005      	beq.n	8006796 <USBD_StdDevReq+0x26>
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d857      	bhi.n	800683e <USBD_StdDevReq+0xce>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00f      	beq.n	80067b2 <USBD_StdDevReq+0x42>
 8006792:	2b20      	cmp	r3, #32
 8006794:	d153      	bne.n	800683e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	32ae      	adds	r2, #174	; 0xae
 80067a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
      break;
 80067b0:	e04a      	b.n	8006848 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	785b      	ldrb	r3, [r3, #1]
 80067b6:	2b09      	cmp	r3, #9
 80067b8:	d83b      	bhi.n	8006832 <USBD_StdDevReq+0xc2>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USBD_StdDevReq+0x50>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006829 	.word	0x08006829
 80067c8:	08006833 	.word	0x08006833
 80067cc:	0800681f 	.word	0x0800681f
 80067d0:	08006833 	.word	0x08006833
 80067d4:	080067f3 	.word	0x080067f3
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	08006833 	.word	0x08006833
 80067e0:	0800680b 	.word	0x0800680b
 80067e4:	080067fd 	.word	0x080067fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa3c 	bl	8006c68 <USBD_GetDescriptor>
          break;
 80067f0:	e024      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fba1 	bl	8006f3c <USBD_SetAddress>
          break;
 80067fa:	e01f      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fbe0 	bl	8006fc4 <USBD_SetConfig>
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]
          break;
 8006808:	e018      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 fc83 	bl	8007118 <USBD_GetConfig>
          break;
 8006812:	e013      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fcb4 	bl	8007184 <USBD_GetStatus>
          break;
 800681c:	e00e      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fce3 	bl	80071ec <USBD_SetFeature>
          break;
 8006826:	e009      	b.n	800683c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fd07 	bl	800723e <USBD_ClrFeature>
          break;
 8006830:	e004      	b.n	800683c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fd5e 	bl	80072f6 <USBD_CtlError>
          break;
 800683a:	bf00      	nop
      }
      break;
 800683c:	e004      	b.n	8006848 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fd58 	bl	80072f6 <USBD_CtlError>
      break;
 8006846:	bf00      	nop
  }

  return ret;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop

08006854 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d005      	beq.n	800687a <USBD_StdItfReq+0x26>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d852      	bhi.n	8006918 <USBD_StdItfReq+0xc4>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <USBD_StdItfReq+0x26>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d14e      	bne.n	8006918 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006880:	b2db      	uxtb	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	2b02      	cmp	r3, #2
 8006886:	d840      	bhi.n	800690a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	889b      	ldrh	r3, [r3, #4]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	d836      	bhi.n	8006900 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	889b      	ldrh	r3, [r3, #4]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fed9 	bl	8006652 <USBD_CoreFindIF>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	2bff      	cmp	r3, #255	; 0xff
 80068a8:	d01d      	beq.n	80068e6 <USBD_StdItfReq+0x92>
 80068aa:	7bbb      	ldrb	r3, [r7, #14]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d11a      	bne.n	80068e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068b0:	7bba      	ldrb	r2, [r7, #14]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	32ae      	adds	r2, #174	; 0xae
 80068b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00f      	beq.n	80068e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068c0:	7bba      	ldrb	r2, [r7, #14]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068c8:	7bba      	ldrb	r2, [r7, #14]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32ae      	adds	r2, #174	; 0xae
 80068ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068de:	e004      	b.n	80068ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068e4:	e001      	b.n	80068ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80068e6:	2303      	movs	r3, #3
 80068e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	88db      	ldrh	r3, [r3, #6]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d110      	bne.n	8006914 <USBD_StdItfReq+0xc0>
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10d      	bne.n	8006914 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fdc7 	bl	800748c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068fe:	e009      	b.n	8006914 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fcf7 	bl	80072f6 <USBD_CtlError>
          break;
 8006908:	e004      	b.n	8006914 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fcf2 	bl	80072f6 <USBD_CtlError>
          break;
 8006912:	e000      	b.n	8006916 <USBD_StdItfReq+0xc2>
          break;
 8006914:	bf00      	nop
      }
      break;
 8006916:	e004      	b.n	8006922 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fceb 	bl	80072f6 <USBD_CtlError>
      break;
 8006920:	bf00      	nop
  }

  return ret;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006936:	2300      	movs	r3, #0
 8006938:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	889b      	ldrh	r3, [r3, #4]
 800693e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d007      	beq.n	800695c <USBD_StdEPReq+0x30>
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	f200 817f 	bhi.w	8006c50 <USBD_StdEPReq+0x324>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d02a      	beq.n	80069ac <USBD_StdEPReq+0x80>
 8006956:	2b20      	cmp	r3, #32
 8006958:	f040 817a 	bne.w	8006c50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff fe83 	bl	800666c <USBD_CoreFindEP>
 8006966:	4603      	mov	r3, r0
 8006968:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800696a:	7b7b      	ldrb	r3, [r7, #13]
 800696c:	2bff      	cmp	r3, #255	; 0xff
 800696e:	f000 8174 	beq.w	8006c5a <USBD_StdEPReq+0x32e>
 8006972:	7b7b      	ldrb	r3, [r7, #13]
 8006974:	2b00      	cmp	r3, #0
 8006976:	f040 8170 	bne.w	8006c5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800697a:	7b7a      	ldrb	r2, [r7, #13]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006982:	7b7a      	ldrb	r2, [r7, #13]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	32ae      	adds	r2, #174	; 0xae
 8006988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8163 	beq.w	8006c5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006994:	7b7a      	ldrb	r2, [r7, #13]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	; 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069aa:	e156      	b.n	8006c5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	785b      	ldrb	r3, [r3, #1]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d008      	beq.n	80069c6 <USBD_StdEPReq+0x9a>
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	f300 8145 	bgt.w	8006c44 <USBD_StdEPReq+0x318>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 809b 	beq.w	8006af6 <USBD_StdEPReq+0x1ca>
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d03c      	beq.n	8006a3e <USBD_StdEPReq+0x112>
 80069c4:	e13e      	b.n	8006c44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d002      	beq.n	80069d8 <USBD_StdEPReq+0xac>
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d016      	beq.n	8006a04 <USBD_StdEPReq+0xd8>
 80069d6:	e02c      	b.n	8006a32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <USBD_StdEPReq+0xce>
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	2b80      	cmp	r3, #128	; 0x80
 80069e2:	d00a      	beq.n	80069fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 f963 	bl	8007cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f95f 	bl	8007cb4 <USBD_LL_StallEP>
 80069f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f8:	e020      	b.n	8006a3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fc7a 	bl	80072f6 <USBD_CtlError>
              break;
 8006a02:	e01b      	b.n	8006a3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	885b      	ldrh	r3, [r3, #2]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10e      	bne.n	8006a2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <USBD_StdEPReq+0xfe>
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d008      	beq.n	8006a2a <USBD_StdEPReq+0xfe>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	88db      	ldrh	r3, [r3, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f945 	bl	8007cb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fd2e 	bl	800748c <USBD_CtlSendStatus>

              break;
 8006a30:	e004      	b.n	8006a3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc5e 	bl	80072f6 <USBD_CtlError>
              break;
 8006a3a:	bf00      	nop
          }
          break;
 8006a3c:	e107      	b.n	8006c4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d002      	beq.n	8006a50 <USBD_StdEPReq+0x124>
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d016      	beq.n	8006a7c <USBD_StdEPReq+0x150>
 8006a4e:	e04b      	b.n	8006ae8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00d      	beq.n	8006a72 <USBD_StdEPReq+0x146>
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b80      	cmp	r3, #128	; 0x80
 8006a5a:	d00a      	beq.n	8006a72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f927 	bl	8007cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f923 	bl	8007cb4 <USBD_LL_StallEP>
 8006a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a70:	e040      	b.n	8006af4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fc3e 	bl	80072f6 <USBD_CtlError>
              break;
 8006a7a:	e03b      	b.n	8006af4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	885b      	ldrh	r3, [r3, #2]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d136      	bne.n	8006af2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 f92d 	bl	8007cf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fcf7 	bl	800748c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fde2 	bl	800666c <USBD_CoreFindEP>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006aac:	7b7b      	ldrb	r3, [r7, #13]
 8006aae:	2bff      	cmp	r3, #255	; 0xff
 8006ab0:	d01f      	beq.n	8006af2 <USBD_StdEPReq+0x1c6>
 8006ab2:	7b7b      	ldrb	r3, [r7, #13]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d11c      	bne.n	8006af2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ab8:	7b7a      	ldrb	r2, [r7, #13]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006ac0:	7b7a      	ldrb	r2, [r7, #13]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	32ae      	adds	r2, #174	; 0xae
 8006ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d010      	beq.n	8006af2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ad0:	7b7a      	ldrb	r2, [r7, #13]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	32ae      	adds	r2, #174	; 0xae
 8006ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	6839      	ldr	r1, [r7, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ae6:	e004      	b.n	8006af2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fc03 	bl	80072f6 <USBD_CtlError>
              break;
 8006af0:	e000      	b.n	8006af4 <USBD_StdEPReq+0x1c8>
              break;
 8006af2:	bf00      	nop
          }
          break;
 8006af4:	e0ab      	b.n	8006c4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d002      	beq.n	8006b08 <USBD_StdEPReq+0x1dc>
 8006b02:	2b03      	cmp	r3, #3
 8006b04:	d032      	beq.n	8006b6c <USBD_StdEPReq+0x240>
 8006b06:	e097      	b.n	8006c38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d007      	beq.n	8006b1e <USBD_StdEPReq+0x1f2>
 8006b0e:	7bbb      	ldrb	r3, [r7, #14]
 8006b10:	2b80      	cmp	r3, #128	; 0x80
 8006b12:	d004      	beq.n	8006b1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fbed 	bl	80072f6 <USBD_CtlError>
                break;
 8006b1c:	e091      	b.n	8006c42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	da0b      	bge.n	8006b3e <USBD_StdEPReq+0x212>
 8006b26:	7bbb      	ldrb	r3, [r7, #14]
 8006b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	3310      	adds	r3, #16
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	e00b      	b.n	8006b56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	4413      	add	r3, r2
 8006b54:	3304      	adds	r3, #4
 8006b56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2202      	movs	r2, #2
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fc37 	bl	80073d8 <USBD_CtlSendData>
              break;
 8006b6a:	e06a      	b.n	8006c42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da11      	bge.n	8006b98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
 8006b76:	f003 020f 	and.w	r2, r3, #15
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	3324      	adds	r3, #36	; 0x24
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d117      	bne.n	8006bbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbb0 	bl	80072f6 <USBD_CtlError>
                  break;
 8006b96:	e054      	b.n	8006c42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b98:	7bbb      	ldrb	r3, [r7, #14]
 8006b9a:	f003 020f 	and.w	r2, r3, #15
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	440b      	add	r3, r1
 8006baa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fb9d 	bl	80072f6 <USBD_CtlError>
                  break;
 8006bbc:	e041      	b.n	8006c42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da0b      	bge.n	8006bde <USBD_StdEPReq+0x2b2>
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	3310      	adds	r3, #16
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3304      	adds	r3, #4
 8006bdc:	e00b      	b.n	8006bf6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <USBD_StdEPReq+0x2d8>
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b80      	cmp	r3, #128	; 0x80
 8006c02:	d103      	bne.n	8006c0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	e00e      	b.n	8006c2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f88d 	bl	8007d30 <USBD_LL_IsStallEP>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e002      	b.n	8006c2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fbd1 	bl	80073d8 <USBD_CtlSendData>
              break;
 8006c36:	e004      	b.n	8006c42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fb5b 	bl	80072f6 <USBD_CtlError>
              break;
 8006c40:	bf00      	nop
          }
          break;
 8006c42:	e004      	b.n	8006c4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb55 	bl	80072f6 <USBD_CtlError>
          break;
 8006c4c:	bf00      	nop
      }
      break;
 8006c4e:	e005      	b.n	8006c5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fb4f 	bl	80072f6 <USBD_CtlError>
      break;
 8006c58:	e000      	b.n	8006c5c <USBD_StdEPReq+0x330>
      break;
 8006c5a:	bf00      	nop
  }

  return ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	885b      	ldrh	r3, [r3, #2]
 8006c82:	0a1b      	lsrs	r3, r3, #8
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	f200 8128 	bhi.w	8006ede <USBD_GetDescriptor+0x276>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <USBD_GetDescriptor+0x2c>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006d09 	.word	0x08006d09
 8006ca0:	08006edf 	.word	0x08006edf
 8006ca4:	08006edf 	.word	0x08006edf
 8006ca8:	08006e7f 	.word	0x08006e7f
 8006cac:	08006eab 	.word	0x08006eab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7c12      	ldrb	r2, [r2, #16]
 8006cbc:	f107 0108 	add.w	r1, r7, #8
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	60f8      	str	r0, [r7, #12]
      break;
 8006cc6:	e112      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7c1b      	ldrb	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	f107 0208 	add.w	r2, r7, #8
 8006cdc:	4610      	mov	r0, r2
 8006cde:	4798      	blx	r3
 8006ce0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cea:	e100      	b.n	8006eee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	f107 0208 	add.w	r2, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	2202      	movs	r2, #2
 8006d04:	701a      	strb	r2, [r3, #0]
      break;
 8006d06:	e0f2      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	885b      	ldrh	r3, [r3, #2]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b05      	cmp	r3, #5
 8006d10:	f200 80ac 	bhi.w	8006e6c <USBD_GetDescriptor+0x204>
 8006d14:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <USBD_GetDescriptor+0xb4>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d35 	.word	0x08006d35
 8006d20:	08006d69 	.word	0x08006d69
 8006d24:	08006d9d 	.word	0x08006d9d
 8006d28:	08006dd1 	.word	0x08006dd1
 8006d2c:	08006e05 	.word	0x08006e05
 8006d30:	08006e39 	.word	0x08006e39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7c12      	ldrb	r2, [r2, #16]
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
 8006d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d56:	e091      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 facb 	bl	80072f6 <USBD_CtlError>
            err++;
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	3301      	adds	r3, #1
 8006d64:	72fb      	strb	r3, [r7, #11]
          break;
 8006d66:	e089      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	7c12      	ldrb	r2, [r2, #16]
 8006d80:	f107 0108 	add.w	r1, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d8a:	e077      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fab1 	bl	80072f6 <USBD_CtlError>
            err++;
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	3301      	adds	r3, #1
 8006d98:	72fb      	strb	r3, [r7, #11]
          break;
 8006d9a:	e06f      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	7c12      	ldrb	r2, [r2, #16]
 8006db4:	f107 0108 	add.w	r1, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dbe:	e05d      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa97 	bl	80072f6 <USBD_CtlError>
            err++;
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dce:	e055      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7c12      	ldrb	r2, [r2, #16]
 8006de8:	f107 0108 	add.w	r1, r7, #8
 8006dec:	4610      	mov	r0, r2
 8006dee:	4798      	blx	r3
 8006df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006df2:	e043      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa7d 	bl	80072f6 <USBD_CtlError>
            err++;
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	72fb      	strb	r3, [r7, #11]
          break;
 8006e02:	e03b      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	7c12      	ldrb	r2, [r2, #16]
 8006e1c:	f107 0108 	add.w	r1, r7, #8
 8006e20:	4610      	mov	r0, r2
 8006e22:	4798      	blx	r3
 8006e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e26:	e029      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa63 	bl	80072f6 <USBD_CtlError>
            err++;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	3301      	adds	r3, #1
 8006e34:	72fb      	strb	r3, [r7, #11]
          break;
 8006e36:	e021      	b.n	8006e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00b      	beq.n	8006e5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	f107 0108 	add.w	r1, r7, #8
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e5a:	e00f      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa49 	bl	80072f6 <USBD_CtlError>
            err++;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	3301      	adds	r3, #1
 8006e68:	72fb      	strb	r3, [r7, #11]
          break;
 8006e6a:	e007      	b.n	8006e7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa41 	bl	80072f6 <USBD_CtlError>
          err++;
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	3301      	adds	r3, #1
 8006e78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e7a:	bf00      	nop
      }
      break;
 8006e7c:	e037      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	7c1b      	ldrb	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d109      	bne.n	8006e9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	f107 0208 	add.w	r2, r7, #8
 8006e92:	4610      	mov	r0, r2
 8006e94:	4798      	blx	r3
 8006e96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e98:	e029      	b.n	8006eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fa2a 	bl	80072f6 <USBD_CtlError>
        err++;
 8006ea2:	7afb      	ldrb	r3, [r7, #11]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ea8:	e021      	b.n	8006eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7c1b      	ldrb	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10d      	bne.n	8006ece <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	f107 0208 	add.w	r2, r7, #8
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	4798      	blx	r3
 8006ec2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	2207      	movs	r2, #7
 8006eca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ecc:	e00f      	b.n	8006eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa10 	bl	80072f6 <USBD_CtlError>
        err++;
 8006ed6:	7afb      	ldrb	r3, [r7, #11]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	72fb      	strb	r3, [r7, #11]
      break;
 8006edc:	e007      	b.n	8006eee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fa08 	bl	80072f6 <USBD_CtlError>
      err++;
 8006ee6:	7afb      	ldrb	r3, [r7, #11]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	72fb      	strb	r3, [r7, #11]
      break;
 8006eec:	bf00      	nop
  }

  if (err != 0U)
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d11e      	bne.n	8006f32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	88db      	ldrh	r3, [r3, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d016      	beq.n	8006f2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006efc:	893b      	ldrh	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00e      	beq.n	8006f20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	88da      	ldrh	r2, [r3, #6]
 8006f06:	893b      	ldrh	r3, [r7, #8]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bf28      	it	cs
 8006f0c:	4613      	movcs	r3, r2
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f12:	893b      	ldrh	r3, [r7, #8]
 8006f14:	461a      	mov	r2, r3
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa5d 	bl	80073d8 <USBD_CtlSendData>
 8006f1e:	e009      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f9e7 	bl	80072f6 <USBD_CtlError>
 8006f28:	e004      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 faae 	bl	800748c <USBD_CtlSendStatus>
 8006f30:	e000      	b.n	8006f34 <USBD_GetDescriptor+0x2cc>
    return;
 8006f32:	bf00      	nop
  }
}
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop

08006f3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d131      	bne.n	8006fb2 <USBD_SetAddress+0x76>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	88db      	ldrh	r3, [r3, #6]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d12d      	bne.n	8006fb2 <USBD_SetAddress+0x76>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f5c:	d829      	bhi.n	8006fb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d104      	bne.n	8006f80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f9bc 	bl	80072f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7e:	e01d      	b.n	8006fbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7bfa      	ldrb	r2, [r7, #15]
 8006f84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fefb 	bl	8007d88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa7a 	bl	800748c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	e009      	b.n	8006fbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb0:	e004      	b.n	8006fbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f99e 	bl	80072f6 <USBD_CtlError>
  }
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	885b      	ldrh	r3, [r3, #2]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	4b4e      	ldr	r3, [pc, #312]	; (8007114 <USBD_SetConfig+0x150>)
 8006fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fdc:	4b4d      	ldr	r3, [pc, #308]	; (8007114 <USBD_SetConfig+0x150>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d905      	bls.n	8006ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f985 	bl	80072f6 <USBD_CtlError>
    return USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e08c      	b.n	800710a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d002      	beq.n	8007002 <USBD_SetConfig+0x3e>
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d029      	beq.n	8007054 <USBD_SetConfig+0x90>
 8007000:	e075      	b.n	80070ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007002:	4b44      	ldr	r3, [pc, #272]	; (8007114 <USBD_SetConfig+0x150>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d020      	beq.n	800704c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800700a:	4b42      	ldr	r3, [pc, #264]	; (8007114 <USBD_SetConfig+0x150>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007014:	4b3f      	ldr	r3, [pc, #252]	; (8007114 <USBD_SetConfig+0x150>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fe ffe1 	bl	8005fe2 <USBD_SetClassConfig>
 8007020:	4603      	mov	r3, r0
 8007022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f962 	bl	80072f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800703a:	e065      	b.n	8007108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 fa25 	bl	800748c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2203      	movs	r2, #3
 8007046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800704a:	e05d      	b.n	8007108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa1d 	bl	800748c <USBD_CtlSendStatus>
      break;
 8007052:	e059      	b.n	8007108 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007054:	4b2f      	ldr	r3, [pc, #188]	; (8007114 <USBD_SetConfig+0x150>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d112      	bne.n	8007082 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007064:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <USBD_SetConfig+0x150>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800706e:	4b29      	ldr	r3, [pc, #164]	; (8007114 <USBD_SetConfig+0x150>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fe ffd0 	bl	800601a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa06 	bl	800748c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007080:	e042      	b.n	8007108 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007082:	4b24      	ldr	r3, [pc, #144]	; (8007114 <USBD_SetConfig+0x150>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	429a      	cmp	r2, r3
 800708e:	d02a      	beq.n	80070e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	4619      	mov	r1, r3
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fe ffbe 	bl	800601a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800709e:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <USBD_SetConfig+0x150>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070a8:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <USBD_SetConfig+0x150>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	4619      	mov	r1, r3
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fe ff97 	bl	8005fe2 <USBD_SetClassConfig>
 80070b4:	4603      	mov	r3, r0
 80070b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00f      	beq.n	80070de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f918 	bl	80072f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fe ffa3 	bl	800601a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070dc:	e014      	b.n	8007108 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9d4 	bl	800748c <USBD_CtlSendStatus>
      break;
 80070e4:	e010      	b.n	8007108 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9d0 	bl	800748c <USBD_CtlSendStatus>
      break;
 80070ec:	e00c      	b.n	8007108 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f900 	bl	80072f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <USBD_SetConfig+0x150>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fe ff8c 	bl	800601a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007102:	2303      	movs	r3, #3
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	bf00      	nop
  }

  return ret;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000314 	.word	0x20000314

08007118 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d004      	beq.n	8007134 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8e2 	bl	80072f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007132:	e023      	b.n	800717c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	dc02      	bgt.n	8007146 <USBD_GetConfig+0x2e>
 8007140:	2b00      	cmp	r3, #0
 8007142:	dc03      	bgt.n	800714c <USBD_GetConfig+0x34>
 8007144:	e015      	b.n	8007172 <USBD_GetConfig+0x5a>
 8007146:	2b03      	cmp	r3, #3
 8007148:	d00b      	beq.n	8007162 <USBD_GetConfig+0x4a>
 800714a:	e012      	b.n	8007172 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3308      	adds	r3, #8
 8007156:	2201      	movs	r2, #1
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f93c 	bl	80073d8 <USBD_CtlSendData>
        break;
 8007160:	e00c      	b.n	800717c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3304      	adds	r3, #4
 8007166:	2201      	movs	r2, #1
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f934 	bl	80073d8 <USBD_CtlSendData>
        break;
 8007170:	e004      	b.n	800717c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f8be 	bl	80072f6 <USBD_CtlError>
        break;
 800717a:	bf00      	nop
}
 800717c:	bf00      	nop
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007194:	b2db      	uxtb	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	2b02      	cmp	r3, #2
 800719a:	d81e      	bhi.n	80071da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	88db      	ldrh	r3, [r3, #6]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d004      	beq.n	80071ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f8a5 	bl	80072f6 <USBD_CtlError>
        break;
 80071ac:	e01a      	b.n	80071e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f043 0202 	orr.w	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	330c      	adds	r3, #12
 80071ce:	2202      	movs	r2, #2
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f900 	bl	80073d8 <USBD_CtlSendData>
      break;
 80071d8:	e004      	b.n	80071e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f88a 	bl	80072f6 <USBD_CtlError>
      break;
 80071e2:	bf00      	nop
  }
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d107      	bne.n	800720e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f940 	bl	800748c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800720c:	e013      	b.n	8007236 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d10b      	bne.n	800722e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	889b      	ldrh	r3, [r3, #4]
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	b29b      	uxth	r3, r3
 800721e:	b2da      	uxtb	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f930 	bl	800748c <USBD_CtlSendStatus>
}
 800722c:	e003      	b.n	8007236 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f860 	bl	80072f6 <USBD_CtlError>
}
 8007236:	bf00      	nop
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	3b01      	subs	r3, #1
 8007252:	2b02      	cmp	r3, #2
 8007254:	d80b      	bhi.n	800726e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10c      	bne.n	8007278 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f910 	bl	800748c <USBD_CtlSendStatus>
      }
      break;
 800726c:	e004      	b.n	8007278 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f840 	bl	80072f6 <USBD_CtlError>
      break;
 8007276:	e000      	b.n	800727a <USBD_ClrFeature+0x3c>
      break;
 8007278:	bf00      	nop
  }
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f7ff fa41 	bl	8006734 <SWAPBYTE>
 80072b2:	4603      	mov	r3, r0
 80072b4:	461a      	mov	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3301      	adds	r3, #1
 80072be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff fa34 	bl	8006734 <SWAPBYTE>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7ff fa27 	bl	8006734 <SWAPBYTE>
 80072e6:	4603      	mov	r3, r0
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	80da      	strh	r2, [r3, #6]
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b082      	sub	sp, #8
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fcd6 	bl	8007cb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007308:	2100      	movs	r1, #0
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fcd2 	bl	8007cb4 <USBD_LL_StallEP>
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d036      	beq.n	800739c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007332:	6938      	ldr	r0, [r7, #16]
 8007334:	f000 f836 	bl	80073a4 <USBD_GetLen>
 8007338:	4603      	mov	r3, r0
 800733a:	3301      	adds	r3, #1
 800733c:	b29b      	uxth	r3, r3
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	4413      	add	r3, r2
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	701a      	strb	r2, [r3, #0]
  idx++;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	3301      	adds	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	2203      	movs	r2, #3
 8007360:	701a      	strb	r2, [r3, #0]
  idx++;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	3301      	adds	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007368:	e013      	b.n	8007392 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	4413      	add	r3, r2
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	3301      	adds	r3, #1
 800737a:	613b      	str	r3, [r7, #16]
    idx++;
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	3301      	adds	r3, #1
 8007380:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	4413      	add	r3, r2
 8007388:	2200      	movs	r2, #0
 800738a:	701a      	strb	r2, [r3, #0]
    idx++;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	3301      	adds	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e7      	bne.n	800736a <USBD_GetString+0x52>
 800739a:	e000      	b.n	800739e <USBD_GetString+0x86>
    return;
 800739c:	bf00      	nop
  }
}
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073b4:	e005      	b.n	80073c2 <USBD_GetLen+0x1e>
  {
    len++;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	3301      	adds	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	3301      	adds	r3, #1
 80073c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f5      	bne.n	80073b6 <USBD_GetLen+0x12>
  }

  return len;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	2100      	movs	r1, #0
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fce1 	bl	8007dc6 <USBD_LL_Transmit>

  return USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	2100      	movs	r1, #0
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 fcd0 	bl	8007dc6 <USBD_LL_Transmit>

  return USBD_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2203      	movs	r2, #3
 8007440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	2100      	movs	r1, #0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fcd4 	bl	8007e08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	2100      	movs	r1, #0
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fcc3 	bl	8007e08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2204      	movs	r2, #4
 8007498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800749c:	2300      	movs	r3, #0
 800749e:	2200      	movs	r2, #0
 80074a0:	2100      	movs	r1, #0
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fc8f 	bl	8007dc6 <USBD_LL_Transmit>

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2205      	movs	r2, #5
 80074be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074c2:	2300      	movs	r3, #0
 80074c4:	2200      	movs	r2, #0
 80074c6:	2100      	movs	r1, #0
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fc9d 	bl	8007e08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074dc:	2200      	movs	r2, #0
 80074de:	4912      	ldr	r1, [pc, #72]	; (8007528 <MX_USB_DEVICE_Init+0x50>)
 80074e0:	4812      	ldr	r0, [pc, #72]	; (800752c <MX_USB_DEVICE_Init+0x54>)
 80074e2:	f7fe fd01 	bl	8005ee8 <USBD_Init>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074ec:	f7fa f9a8 	bl	8001840 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074f0:	490f      	ldr	r1, [pc, #60]	; (8007530 <MX_USB_DEVICE_Init+0x58>)
 80074f2:	480e      	ldr	r0, [pc, #56]	; (800752c <MX_USB_DEVICE_Init+0x54>)
 80074f4:	f7fe fd28 	bl	8005f48 <USBD_RegisterClass>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074fe:	f7fa f99f 	bl	8001840 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007502:	490c      	ldr	r1, [pc, #48]	; (8007534 <MX_USB_DEVICE_Init+0x5c>)
 8007504:	4809      	ldr	r0, [pc, #36]	; (800752c <MX_USB_DEVICE_Init+0x54>)
 8007506:	f7fe fc1f 	bl	8005d48 <USBD_CDC_RegisterInterface>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007510:	f7fa f996 	bl	8001840 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007514:	4805      	ldr	r0, [pc, #20]	; (800752c <MX_USB_DEVICE_Init+0x54>)
 8007516:	f7fe fd4d 	bl	8005fb4 <USBD_Start>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007520:	f7fa f98e 	bl	8001840 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007524:	bf00      	nop
 8007526:	bd80      	pop	{r7, pc}
 8007528:	200000ac 	.word	0x200000ac
 800752c:	20000318 	.word	0x20000318
 8007530:	20000018 	.word	0x20000018
 8007534:	20000098 	.word	0x20000098

08007538 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800753c:	2200      	movs	r2, #0
 800753e:	4905      	ldr	r1, [pc, #20]	; (8007554 <CDC_Init_FS+0x1c>)
 8007540:	4805      	ldr	r0, [pc, #20]	; (8007558 <CDC_Init_FS+0x20>)
 8007542:	f7fe fc1b 	bl	8005d7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007546:	4905      	ldr	r1, [pc, #20]	; (800755c <CDC_Init_FS+0x24>)
 8007548:	4803      	ldr	r0, [pc, #12]	; (8007558 <CDC_Init_FS+0x20>)
 800754a:	f7fe fc39 	bl	8005dc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800754e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007550:	4618      	mov	r0, r3
 8007552:	bd80      	pop	{r7, pc}
 8007554:	200009f4 	.word	0x200009f4
 8007558:	20000318 	.word	0x20000318
 800755c:	200005f4 	.word	0x200005f4

08007560 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007564:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007566:	4618      	mov	r0, r3
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	6039      	str	r1, [r7, #0]
 800757a:	71fb      	strb	r3, [r7, #7]
 800757c:	4613      	mov	r3, r2
 800757e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	2b23      	cmp	r3, #35	; 0x23
 8007584:	d84a      	bhi.n	800761c <CDC_Control_FS+0xac>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <CDC_Control_FS+0x1c>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	0800761d 	.word	0x0800761d
 8007590:	0800761d 	.word	0x0800761d
 8007594:	0800761d 	.word	0x0800761d
 8007598:	0800761d 	.word	0x0800761d
 800759c:	0800761d 	.word	0x0800761d
 80075a0:	0800761d 	.word	0x0800761d
 80075a4:	0800761d 	.word	0x0800761d
 80075a8:	0800761d 	.word	0x0800761d
 80075ac:	0800761d 	.word	0x0800761d
 80075b0:	0800761d 	.word	0x0800761d
 80075b4:	0800761d 	.word	0x0800761d
 80075b8:	0800761d 	.word	0x0800761d
 80075bc:	0800761d 	.word	0x0800761d
 80075c0:	0800761d 	.word	0x0800761d
 80075c4:	0800761d 	.word	0x0800761d
 80075c8:	0800761d 	.word	0x0800761d
 80075cc:	0800761d 	.word	0x0800761d
 80075d0:	0800761d 	.word	0x0800761d
 80075d4:	0800761d 	.word	0x0800761d
 80075d8:	0800761d 	.word	0x0800761d
 80075dc:	0800761d 	.word	0x0800761d
 80075e0:	0800761d 	.word	0x0800761d
 80075e4:	0800761d 	.word	0x0800761d
 80075e8:	0800761d 	.word	0x0800761d
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	0800761d 	.word	0x0800761d
 80075f4:	0800761d 	.word	0x0800761d
 80075f8:	0800761d 	.word	0x0800761d
 80075fc:	0800761d 	.word	0x0800761d
 8007600:	0800761d 	.word	0x0800761d
 8007604:	0800761d 	.word	0x0800761d
 8007608:	0800761d 	.word	0x0800761d
 800760c:	0800761d 	.word	0x0800761d
 8007610:	0800761d 	.word	0x0800761d
 8007614:	0800761d 	.word	0x0800761d
 8007618:	0800761d 	.word	0x0800761d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800761c:	bf00      	nop
  }

  return (USBD_OK);
 800761e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	4805      	ldr	r0, [pc, #20]	; (8007650 <CDC_Receive_FS+0x24>)
 800763a:	f7fe fbc1 	bl	8005dc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800763e:	4804      	ldr	r0, [pc, #16]	; (8007650 <CDC_Receive_FS+0x24>)
 8007640:	f7fe fc1c 	bl	8005e7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007644:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000318 	.word	0x20000318

08007654 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007664:	4b0d      	ldr	r3, [pc, #52]	; (800769c <CDC_Transmit_FS+0x48>)
 8007666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007676:	2301      	movs	r3, #1
 8007678:	e00b      	b.n	8007692 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800767a:	887b      	ldrh	r3, [r7, #2]
 800767c:	461a      	mov	r2, r3
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4806      	ldr	r0, [pc, #24]	; (800769c <CDC_Transmit_FS+0x48>)
 8007682:	f7fe fb7b 	bl	8005d7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007686:	4805      	ldr	r0, [pc, #20]	; (800769c <CDC_Transmit_FS+0x48>)
 8007688:	f7fe fbb8 	bl	8005dfc <USBD_CDC_TransmitPacket>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007690:	7bfb      	ldrb	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000318 	.word	0x20000318

080076a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80076b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2212      	movs	r2, #18
 80076d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076d6:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	200000c8 	.word	0x200000c8

080076e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	6039      	str	r1, [r7, #0]
 80076f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2204      	movs	r2, #4
 80076f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076fa:	4b03      	ldr	r3, [pc, #12]	; (8007708 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	200000dc 	.word	0x200000dc

0800770c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007718:	79fb      	ldrb	r3, [r7, #7]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	4907      	ldr	r1, [pc, #28]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
 8007722:	4808      	ldr	r0, [pc, #32]	; (8007744 <USBD_FS_ProductStrDescriptor+0x38>)
 8007724:	f7ff fdf8 	bl	8007318 <USBD_GetString>
 8007728:	e004      	b.n	8007734 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4904      	ldr	r1, [pc, #16]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
 800772e:	4805      	ldr	r0, [pc, #20]	; (8007744 <USBD_FS_ProductStrDescriptor+0x38>)
 8007730:	f7ff fdf2 	bl	8007318 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20000df4 	.word	0x20000df4
 8007744:	0800c778 	.word	0x0800c778

08007748 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	6039      	str	r1, [r7, #0]
 8007752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	4904      	ldr	r1, [pc, #16]	; (8007768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007758:	4804      	ldr	r0, [pc, #16]	; (800776c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800775a:	f7ff fddd 	bl	8007318 <USBD_GetString>
  return USBD_StrDesc;
 800775e:	4b02      	ldr	r3, [pc, #8]	; (8007768 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20000df4 	.word	0x20000df4
 800776c:	0800c790 	.word	0x0800c790

08007770 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	221a      	movs	r2, #26
 8007780:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007782:	f000 f843 	bl	800780c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007786:	4b02      	ldr	r3, [pc, #8]	; (8007790 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	200000e0 	.word	0x200000e0

08007794 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4907      	ldr	r1, [pc, #28]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077aa:	4808      	ldr	r0, [pc, #32]	; (80077cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077ac:	f7ff fdb4 	bl	8007318 <USBD_GetString>
 80077b0:	e004      	b.n	80077bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4904      	ldr	r1, [pc, #16]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077b6:	4805      	ldr	r0, [pc, #20]	; (80077cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077b8:	f7ff fdae 	bl	8007318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077bc:	4b02      	ldr	r3, [pc, #8]	; (80077c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000df4 	.word	0x20000df4
 80077cc:	0800c7a4 	.word	0x0800c7a4

080077d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	6039      	str	r1, [r7, #0]
 80077da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	4907      	ldr	r1, [pc, #28]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077e6:	4808      	ldr	r0, [pc, #32]	; (8007808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077e8:	f7ff fd96 	bl	8007318 <USBD_GetString>
 80077ec:	e004      	b.n	80077f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	4904      	ldr	r1, [pc, #16]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077f2:	4805      	ldr	r0, [pc, #20]	; (8007808 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077f4:	f7ff fd90 	bl	8007318 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000df4 	.word	0x20000df4
 8007808:	0800c7b0 	.word	0x0800c7b0

0800780c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007812:	4b0f      	ldr	r3, [pc, #60]	; (8007850 <Get_SerialNum+0x44>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007818:	4b0e      	ldr	r3, [pc, #56]	; (8007854 <Get_SerialNum+0x48>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800781e:	4b0e      	ldr	r3, [pc, #56]	; (8007858 <Get_SerialNum+0x4c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007832:	2208      	movs	r2, #8
 8007834:	4909      	ldr	r1, [pc, #36]	; (800785c <Get_SerialNum+0x50>)
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 f814 	bl	8007864 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800783c:	2204      	movs	r2, #4
 800783e:	4908      	ldr	r1, [pc, #32]	; (8007860 <Get_SerialNum+0x54>)
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 f80f 	bl	8007864 <IntToUnicode>
  }
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	1fff7a10 	.word	0x1fff7a10
 8007854:	1fff7a14 	.word	0x1fff7a14
 8007858:	1fff7a18 	.word	0x1fff7a18
 800785c:	200000e2 	.word	0x200000e2
 8007860:	200000f2 	.word	0x200000f2

08007864 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	4613      	mov	r3, r2
 8007870:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007876:	2300      	movs	r3, #0
 8007878:	75fb      	strb	r3, [r7, #23]
 800787a:	e027      	b.n	80078cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	2b09      	cmp	r3, #9
 8007882:	d80b      	bhi.n	800789c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	0f1b      	lsrs	r3, r3, #28
 8007888:	b2da      	uxtb	r2, r3
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	4619      	mov	r1, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	440b      	add	r3, r1
 8007894:	3230      	adds	r2, #48	; 0x30
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	e00a      	b.n	80078b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0f1b      	lsrs	r3, r3, #28
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4619      	mov	r1, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	440b      	add	r3, r1
 80078ac:	3237      	adds	r2, #55	; 0x37
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	3301      	adds	r3, #1
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4413      	add	r3, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	3301      	adds	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
 80078cc:	7dfa      	ldrb	r2, [r7, #23]
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d3d3      	bcc.n	800787c <IntToUnicode+0x18>
  }
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	; 0x28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ec:	f107 0314 	add.w	r3, r7, #20
 80078f0:	2200      	movs	r2, #0
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	609a      	str	r2, [r3, #8]
 80078f8:	60da      	str	r2, [r3, #12]
 80078fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007904:	d13a      	bne.n	800797c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007906:	2300      	movs	r3, #0
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	4b1e      	ldr	r3, [pc, #120]	; (8007984 <HAL_PCD_MspInit+0xa0>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	4a1d      	ldr	r2, [pc, #116]	; (8007984 <HAL_PCD_MspInit+0xa0>)
 8007910:	f043 0301 	orr.w	r3, r3, #1
 8007914:	6313      	str	r3, [r2, #48]	; 0x30
 8007916:	4b1b      	ldr	r3, [pc, #108]	; (8007984 <HAL_PCD_MspInit+0xa0>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	613b      	str	r3, [r7, #16]
 8007920:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007922:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007928:	2302      	movs	r3, #2
 800792a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792c:	2300      	movs	r3, #0
 800792e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007930:	2303      	movs	r3, #3
 8007932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007934:	230a      	movs	r3, #10
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007938:	f107 0314 	add.w	r3, r7, #20
 800793c:	4619      	mov	r1, r3
 800793e:	4812      	ldr	r0, [pc, #72]	; (8007988 <HAL_PCD_MspInit+0xa4>)
 8007940:	f7fa fa8a 	bl	8001e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <HAL_PCD_MspInit+0xa0>)
 8007946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007948:	4a0e      	ldr	r2, [pc, #56]	; (8007984 <HAL_PCD_MspInit+0xa0>)
 800794a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794e:	6353      	str	r3, [r2, #52]	; 0x34
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <HAL_PCD_MspInit+0xa0>)
 8007956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007958:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <HAL_PCD_MspInit+0xa0>)
 800795a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800795e:	6453      	str	r3, [r2, #68]	; 0x44
 8007960:	4b08      	ldr	r3, [pc, #32]	; (8007984 <HAL_PCD_MspInit+0xa0>)
 8007962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800796c:	2200      	movs	r2, #0
 800796e:	2100      	movs	r1, #0
 8007970:	2043      	movs	r0, #67	; 0x43
 8007972:	f7fa fa3a 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007976:	2043      	movs	r0, #67	; 0x43
 8007978:	f7fa fa53 	bl	8001e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800797c:	bf00      	nop
 800797e:	3728      	adds	r7, #40	; 0x28
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40023800 	.word	0x40023800
 8007988:	40020000 	.word	0x40020000

0800798c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f7fe fb53 	bl	800604e <USBD_LL_SetupStage>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	4619      	mov	r1, r3
 80079da:	f7fe fb8d 	bl	80060f8 <USBD_LL_DataOutStage>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	6879      	ldr	r1, [r7, #4]
 80079fc:	4613      	mov	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	440b      	add	r3, r1
 8007a06:	3320      	adds	r3, #32
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f7fe fc26 	bl	800625e <USBD_LL_DataInStage>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fd60 	bl	80064ee <USBD_LL_SOF>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	79db      	ldrb	r3, [r3, #7]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d001      	beq.n	8007a4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a4a:	f7f9 fef9 	bl	8001840 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a54:	7bfa      	ldrb	r2, [r7, #15]
 8007a56:	4611      	mov	r1, r2
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fd04 	bl	8006466 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe fcac 	bl	80063c2 <USBD_LL_Reset>
}
 8007a6a:	bf00      	nop
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe fcff 	bl	8006486 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7adb      	ldrb	r3, [r3, #11]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <HAL_PCD_SuspendCallback+0x48>)
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	4a03      	ldr	r2, [pc, #12]	; (8007abc <HAL_PCD_SuspendCallback+0x48>)
 8007aae:	f043 0306 	orr.w	r3, r3, #6
 8007ab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	e000ed00 	.word	0xe000ed00

08007ac0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fcf5 	bl	80064be <USBD_LL_Resume>
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007aee:	78fa      	ldrb	r2, [r7, #3]
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe fd4d 	bl	8006592 <USBD_LL_IsoOUTIncomplete>
}
 8007af8:	bf00      	nop
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	4611      	mov	r1, r2
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fd09 	bl	800652e <USBD_LL_IsoINIncomplete>
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fd5f 	bl	80065f6 <USBD_LL_DevConnected>
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe fd5c 	bl	800660c <USBD_LL_DevDisconnected>
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d13c      	bne.n	8007be6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b6c:	4a20      	ldr	r2, [pc, #128]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1e      	ldr	r2, [pc, #120]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007b78:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b7c:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b84:	4b1a      	ldr	r3, [pc, #104]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007b86:	2204      	movs	r2, #4
 8007b88:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b8a:	4b19      	ldr	r3, [pc, #100]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b90:	4b17      	ldr	r3, [pc, #92]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007b98:	2202      	movs	r2, #2
 8007b9a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b9c:	4b14      	ldr	r3, [pc, #80]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ba2:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ba8:	4b11      	ldr	r3, [pc, #68]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bae:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bba:	480d      	ldr	r0, [pc, #52]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007bbc:	f7fa fb01 	bl	80021c2 <HAL_PCD_Init>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bc6:	f7f9 fe3b 	bl	8001840 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bca:	2180      	movs	r1, #128	; 0x80
 8007bcc:	4808      	ldr	r0, [pc, #32]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007bce:	f7fb fd2c 	bl	800362a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bd2:	2240      	movs	r2, #64	; 0x40
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4806      	ldr	r0, [pc, #24]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007bd8:	f7fb fce0 	bl	800359c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bdc:	2280      	movs	r2, #128	; 0x80
 8007bde:	2101      	movs	r1, #1
 8007be0:	4803      	ldr	r0, [pc, #12]	; (8007bf0 <USBD_LL_Init+0x94>)
 8007be2:	f7fb fcdb 	bl	800359c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000ff4 	.word	0x20000ff4

08007bf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fa fbe8 	bl	80023e0 <HAL_PCD_Start>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f942 	bl	8007ea0 <USBD_Get_USB_Status>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b084      	sub	sp, #16
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	4608      	mov	r0, r1
 8007c34:	4611      	mov	r1, r2
 8007c36:	461a      	mov	r2, r3
 8007c38:	4603      	mov	r3, r0
 8007c3a:	70fb      	strb	r3, [r7, #3]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70bb      	strb	r3, [r7, #2]
 8007c40:	4613      	mov	r3, r2
 8007c42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c52:	78bb      	ldrb	r3, [r7, #2]
 8007c54:	883a      	ldrh	r2, [r7, #0]
 8007c56:	78f9      	ldrb	r1, [r7, #3]
 8007c58:	f7fb f8bc 	bl	8002dd4 <HAL_PCD_EP_Open>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 f91c 	bl	8007ea0 <USBD_Get_USB_Status>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c90:	78fa      	ldrb	r2, [r7, #3]
 8007c92:	4611      	mov	r1, r2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fb f905 	bl	8002ea4 <HAL_PCD_EP_Close>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 f8fd 	bl	8007ea0 <USBD_Get_USB_Status>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cce:	78fa      	ldrb	r2, [r7, #3]
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fb f9bd 	bl	8003052 <HAL_PCD_EP_SetStall>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 f8de 	bl	8007ea0 <USBD_Get_USB_Status>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	4611      	mov	r1, r2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fb fa01 	bl	8003118 <HAL_PCD_EP_ClrStall>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f000 f8bf 	bl	8007ea0 <USBD_Get_USB_Status>
 8007d22:	4603      	mov	r3, r0
 8007d24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	da0b      	bge.n	8007d64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	4613      	mov	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	3316      	adds	r3, #22
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	e00b      	b.n	8007d7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d6a:	68f9      	ldr	r1, [r7, #12]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4413      	add	r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007d7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007da2:	78fa      	ldrb	r2, [r7, #3]
 8007da4:	4611      	mov	r1, r2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fa fff0 	bl	8002d8c <HAL_PCD_SetAddress>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 f874 	bl	8007ea0 <USBD_Get_USB_Status>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b086      	sub	sp, #24
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	607a      	str	r2, [r7, #4]
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007de4:	7af9      	ldrb	r1, [r7, #11]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	f7fb f8f8 	bl	8002fde <HAL_PCD_EP_Transmit>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 f853 	bl	8007ea0 <USBD_Get_USB_Status>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	460b      	mov	r3, r1
 8007e16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e26:	7af9      	ldrb	r1, [r7, #11]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	f7fb f884 	bl	8002f38 <HAL_PCD_EP_Receive>
 8007e30:	4603      	mov	r3, r0
 8007e32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f832 	bl	8007ea0 <USBD_Get_USB_Status>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e40:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fb f8a4 	bl	8002fae <HAL_PCD_EP_GetRxCount>
 8007e66:	4603      	mov	r3, r0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e78:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <USBD_static_malloc+0x18>)
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	200014d8 	.word	0x200014d8

08007e8c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]

}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d817      	bhi.n	8007ee4 <USBD_Get_USB_Status+0x44>
 8007eb4:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <USBD_Get_USB_Status+0x1c>)
 8007eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eba:	bf00      	nop
 8007ebc:	08007ecd 	.word	0x08007ecd
 8007ec0:	08007ed3 	.word	0x08007ed3
 8007ec4:	08007ed9 	.word	0x08007ed9
 8007ec8:	08007edf 	.word	0x08007edf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed0:	e00b      	b.n	8007eea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed6:	e008      	b.n	8007eea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	73fb      	strb	r3, [r7, #15]
    break;
 8007edc:	e005      	b.n	8007eea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee2:	e002      	b.n	8007eea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee8:	bf00      	nop
  }
  return usb_status;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <__cvt>:
 8007ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	ec55 4b10 	vmov	r4, r5, d0
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	460e      	mov	r6, r1
 8007f04:	4619      	mov	r1, r3
 8007f06:	462b      	mov	r3, r5
 8007f08:	bfbb      	ittet	lt
 8007f0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f0e:	461d      	movlt	r5, r3
 8007f10:	2300      	movge	r3, #0
 8007f12:	232d      	movlt	r3, #45	; 0x2d
 8007f14:	700b      	strb	r3, [r1, #0]
 8007f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f1c:	4691      	mov	r9, r2
 8007f1e:	f023 0820 	bic.w	r8, r3, #32
 8007f22:	bfbc      	itt	lt
 8007f24:	4622      	movlt	r2, r4
 8007f26:	4614      	movlt	r4, r2
 8007f28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f2c:	d005      	beq.n	8007f3a <__cvt+0x42>
 8007f2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f32:	d100      	bne.n	8007f36 <__cvt+0x3e>
 8007f34:	3601      	adds	r6, #1
 8007f36:	2102      	movs	r1, #2
 8007f38:	e000      	b.n	8007f3c <__cvt+0x44>
 8007f3a:	2103      	movs	r1, #3
 8007f3c:	ab03      	add	r3, sp, #12
 8007f3e:	9301      	str	r3, [sp, #4]
 8007f40:	ab02      	add	r3, sp, #8
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	ec45 4b10 	vmov	d0, r4, r5
 8007f48:	4653      	mov	r3, sl
 8007f4a:	4632      	mov	r2, r6
 8007f4c:	f001 f8b4 	bl	80090b8 <_dtoa_r>
 8007f50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f54:	4607      	mov	r7, r0
 8007f56:	d102      	bne.n	8007f5e <__cvt+0x66>
 8007f58:	f019 0f01 	tst.w	r9, #1
 8007f5c:	d022      	beq.n	8007fa4 <__cvt+0xac>
 8007f5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f62:	eb07 0906 	add.w	r9, r7, r6
 8007f66:	d110      	bne.n	8007f8a <__cvt+0x92>
 8007f68:	783b      	ldrb	r3, [r7, #0]
 8007f6a:	2b30      	cmp	r3, #48	; 0x30
 8007f6c:	d10a      	bne.n	8007f84 <__cvt+0x8c>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2300      	movs	r3, #0
 8007f72:	4620      	mov	r0, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	f7f8 fdaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f7a:	b918      	cbnz	r0, 8007f84 <__cvt+0x8c>
 8007f7c:	f1c6 0601 	rsb	r6, r6, #1
 8007f80:	f8ca 6000 	str.w	r6, [sl]
 8007f84:	f8da 3000 	ldr.w	r3, [sl]
 8007f88:	4499      	add	r9, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4629      	mov	r1, r5
 8007f92:	f7f8 fda1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f96:	b108      	cbz	r0, 8007f9c <__cvt+0xa4>
 8007f98:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f9c:	2230      	movs	r2, #48	; 0x30
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	454b      	cmp	r3, r9
 8007fa2:	d307      	bcc.n	8007fb4 <__cvt+0xbc>
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fa8:	1bdb      	subs	r3, r3, r7
 8007faa:	4638      	mov	r0, r7
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	b004      	add	sp, #16
 8007fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb4:	1c59      	adds	r1, r3, #1
 8007fb6:	9103      	str	r1, [sp, #12]
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	e7f0      	b.n	8007f9e <__cvt+0xa6>

08007fbc <__exponent>:
 8007fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2900      	cmp	r1, #0
 8007fc2:	bfb8      	it	lt
 8007fc4:	4249      	neglt	r1, r1
 8007fc6:	f803 2b02 	strb.w	r2, [r3], #2
 8007fca:	bfb4      	ite	lt
 8007fcc:	222d      	movlt	r2, #45	; 0x2d
 8007fce:	222b      	movge	r2, #43	; 0x2b
 8007fd0:	2909      	cmp	r1, #9
 8007fd2:	7042      	strb	r2, [r0, #1]
 8007fd4:	dd2a      	ble.n	800802c <__exponent+0x70>
 8007fd6:	f10d 0207 	add.w	r2, sp, #7
 8007fda:	4617      	mov	r7, r2
 8007fdc:	260a      	movs	r6, #10
 8007fde:	4694      	mov	ip, r2
 8007fe0:	fb91 f5f6 	sdiv	r5, r1, r6
 8007fe4:	fb06 1415 	mls	r4, r6, r5, r1
 8007fe8:	3430      	adds	r4, #48	; 0x30
 8007fea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007fee:	460c      	mov	r4, r1
 8007ff0:	2c63      	cmp	r4, #99	; 0x63
 8007ff2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	dcf1      	bgt.n	8007fde <__exponent+0x22>
 8007ffa:	3130      	adds	r1, #48	; 0x30
 8007ffc:	f1ac 0402 	sub.w	r4, ip, #2
 8008000:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008004:	1c41      	adds	r1, r0, #1
 8008006:	4622      	mov	r2, r4
 8008008:	42ba      	cmp	r2, r7
 800800a:	d30a      	bcc.n	8008022 <__exponent+0x66>
 800800c:	f10d 0209 	add.w	r2, sp, #9
 8008010:	eba2 020c 	sub.w	r2, r2, ip
 8008014:	42bc      	cmp	r4, r7
 8008016:	bf88      	it	hi
 8008018:	2200      	movhi	r2, #0
 800801a:	4413      	add	r3, r2
 800801c:	1a18      	subs	r0, r3, r0
 800801e:	b003      	add	sp, #12
 8008020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008022:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008026:	f801 5f01 	strb.w	r5, [r1, #1]!
 800802a:	e7ed      	b.n	8008008 <__exponent+0x4c>
 800802c:	2330      	movs	r3, #48	; 0x30
 800802e:	3130      	adds	r1, #48	; 0x30
 8008030:	7083      	strb	r3, [r0, #2]
 8008032:	70c1      	strb	r1, [r0, #3]
 8008034:	1d03      	adds	r3, r0, #4
 8008036:	e7f1      	b.n	800801c <__exponent+0x60>

08008038 <_printf_float>:
 8008038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800803c:	ed2d 8b02 	vpush	{d8}
 8008040:	b08d      	sub	sp, #52	; 0x34
 8008042:	460c      	mov	r4, r1
 8008044:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008048:	4616      	mov	r6, r2
 800804a:	461f      	mov	r7, r3
 800804c:	4605      	mov	r5, r0
 800804e:	f000 ff2b 	bl	8008ea8 <_localeconv_r>
 8008052:	f8d0 a000 	ldr.w	sl, [r0]
 8008056:	4650      	mov	r0, sl
 8008058:	f7f8 f912 	bl	8000280 <strlen>
 800805c:	2300      	movs	r3, #0
 800805e:	930a      	str	r3, [sp, #40]	; 0x28
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	9305      	str	r3, [sp, #20]
 8008064:	f8d8 3000 	ldr.w	r3, [r8]
 8008068:	f894 b018 	ldrb.w	fp, [r4, #24]
 800806c:	3307      	adds	r3, #7
 800806e:	f023 0307 	bic.w	r3, r3, #7
 8008072:	f103 0208 	add.w	r2, r3, #8
 8008076:	f8c8 2000 	str.w	r2, [r8]
 800807a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800807e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	f8cd 8018 	str.w	r8, [sp, #24]
 8008088:	ee08 0a10 	vmov	s16, r0
 800808c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008094:	4b9e      	ldr	r3, [pc, #632]	; (8008310 <_printf_float+0x2d8>)
 8008096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800809a:	f7f8 fd4f 	bl	8000b3c <__aeabi_dcmpun>
 800809e:	bb88      	cbnz	r0, 8008104 <_printf_float+0xcc>
 80080a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080a4:	4b9a      	ldr	r3, [pc, #616]	; (8008310 <_printf_float+0x2d8>)
 80080a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080aa:	f7f8 fd29 	bl	8000b00 <__aeabi_dcmple>
 80080ae:	bb48      	cbnz	r0, 8008104 <_printf_float+0xcc>
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 fd18 	bl	8000aec <__aeabi_dcmplt>
 80080bc:	b110      	cbz	r0, 80080c4 <_printf_float+0x8c>
 80080be:	232d      	movs	r3, #45	; 0x2d
 80080c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080c4:	4a93      	ldr	r2, [pc, #588]	; (8008314 <_printf_float+0x2dc>)
 80080c6:	4b94      	ldr	r3, [pc, #592]	; (8008318 <_printf_float+0x2e0>)
 80080c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80080cc:	bf94      	ite	ls
 80080ce:	4690      	movls	r8, r2
 80080d0:	4698      	movhi	r8, r3
 80080d2:	2303      	movs	r3, #3
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	9b05      	ldr	r3, [sp, #20]
 80080d8:	f023 0304 	bic.w	r3, r3, #4
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	f04f 0900 	mov.w	r9, #0
 80080e2:	9700      	str	r7, [sp, #0]
 80080e4:	4633      	mov	r3, r6
 80080e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f9da 	bl	80084a4 <_printf_common>
 80080f0:	3001      	adds	r0, #1
 80080f2:	f040 8090 	bne.w	8008216 <_printf_float+0x1de>
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080fa:	b00d      	add	sp, #52	; 0x34
 80080fc:	ecbd 8b02 	vpop	{d8}
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	4642      	mov	r2, r8
 8008106:	464b      	mov	r3, r9
 8008108:	4640      	mov	r0, r8
 800810a:	4649      	mov	r1, r9
 800810c:	f7f8 fd16 	bl	8000b3c <__aeabi_dcmpun>
 8008110:	b140      	cbz	r0, 8008124 <_printf_float+0xec>
 8008112:	464b      	mov	r3, r9
 8008114:	2b00      	cmp	r3, #0
 8008116:	bfbc      	itt	lt
 8008118:	232d      	movlt	r3, #45	; 0x2d
 800811a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800811e:	4a7f      	ldr	r2, [pc, #508]	; (800831c <_printf_float+0x2e4>)
 8008120:	4b7f      	ldr	r3, [pc, #508]	; (8008320 <_printf_float+0x2e8>)
 8008122:	e7d1      	b.n	80080c8 <_printf_float+0x90>
 8008124:	6863      	ldr	r3, [r4, #4]
 8008126:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800812a:	9206      	str	r2, [sp, #24]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	d13f      	bne.n	80081b0 <_printf_float+0x178>
 8008130:	2306      	movs	r3, #6
 8008132:	6063      	str	r3, [r4, #4]
 8008134:	9b05      	ldr	r3, [sp, #20]
 8008136:	6861      	ldr	r1, [r4, #4]
 8008138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800813c:	2300      	movs	r3, #0
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	ab0a      	add	r3, sp, #40	; 0x28
 8008142:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008146:	ab09      	add	r3, sp, #36	; 0x24
 8008148:	ec49 8b10 	vmov	d0, r8, r9
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	6022      	str	r2, [r4, #0]
 8008150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008154:	4628      	mov	r0, r5
 8008156:	f7ff fecf 	bl	8007ef8 <__cvt>
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800815e:	2b47      	cmp	r3, #71	; 0x47
 8008160:	4680      	mov	r8, r0
 8008162:	d108      	bne.n	8008176 <_printf_float+0x13e>
 8008164:	1cc8      	adds	r0, r1, #3
 8008166:	db02      	blt.n	800816e <_printf_float+0x136>
 8008168:	6863      	ldr	r3, [r4, #4]
 800816a:	4299      	cmp	r1, r3
 800816c:	dd41      	ble.n	80081f2 <_printf_float+0x1ba>
 800816e:	f1ab 0302 	sub.w	r3, fp, #2
 8008172:	fa5f fb83 	uxtb.w	fp, r3
 8008176:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800817a:	d820      	bhi.n	80081be <_printf_float+0x186>
 800817c:	3901      	subs	r1, #1
 800817e:	465a      	mov	r2, fp
 8008180:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008184:	9109      	str	r1, [sp, #36]	; 0x24
 8008186:	f7ff ff19 	bl	8007fbc <__exponent>
 800818a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800818c:	1813      	adds	r3, r2, r0
 800818e:	2a01      	cmp	r2, #1
 8008190:	4681      	mov	r9, r0
 8008192:	6123      	str	r3, [r4, #16]
 8008194:	dc02      	bgt.n	800819c <_printf_float+0x164>
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	07d2      	lsls	r2, r2, #31
 800819a:	d501      	bpl.n	80081a0 <_printf_float+0x168>
 800819c:	3301      	adds	r3, #1
 800819e:	6123      	str	r3, [r4, #16]
 80081a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d09c      	beq.n	80080e2 <_printf_float+0xaa>
 80081a8:	232d      	movs	r3, #45	; 0x2d
 80081aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081ae:	e798      	b.n	80080e2 <_printf_float+0xaa>
 80081b0:	9a06      	ldr	r2, [sp, #24]
 80081b2:	2a47      	cmp	r2, #71	; 0x47
 80081b4:	d1be      	bne.n	8008134 <_printf_float+0xfc>
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1bc      	bne.n	8008134 <_printf_float+0xfc>
 80081ba:	2301      	movs	r3, #1
 80081bc:	e7b9      	b.n	8008132 <_printf_float+0xfa>
 80081be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80081c2:	d118      	bne.n	80081f6 <_printf_float+0x1be>
 80081c4:	2900      	cmp	r1, #0
 80081c6:	6863      	ldr	r3, [r4, #4]
 80081c8:	dd0b      	ble.n	80081e2 <_printf_float+0x1aa>
 80081ca:	6121      	str	r1, [r4, #16]
 80081cc:	b913      	cbnz	r3, 80081d4 <_printf_float+0x19c>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	07d0      	lsls	r0, r2, #31
 80081d2:	d502      	bpl.n	80081da <_printf_float+0x1a2>
 80081d4:	3301      	adds	r3, #1
 80081d6:	440b      	add	r3, r1
 80081d8:	6123      	str	r3, [r4, #16]
 80081da:	65a1      	str	r1, [r4, #88]	; 0x58
 80081dc:	f04f 0900 	mov.w	r9, #0
 80081e0:	e7de      	b.n	80081a0 <_printf_float+0x168>
 80081e2:	b913      	cbnz	r3, 80081ea <_printf_float+0x1b2>
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	07d2      	lsls	r2, r2, #31
 80081e8:	d501      	bpl.n	80081ee <_printf_float+0x1b6>
 80081ea:	3302      	adds	r3, #2
 80081ec:	e7f4      	b.n	80081d8 <_printf_float+0x1a0>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e7f2      	b.n	80081d8 <_printf_float+0x1a0>
 80081f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f8:	4299      	cmp	r1, r3
 80081fa:	db05      	blt.n	8008208 <_printf_float+0x1d0>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	6121      	str	r1, [r4, #16]
 8008200:	07d8      	lsls	r0, r3, #31
 8008202:	d5ea      	bpl.n	80081da <_printf_float+0x1a2>
 8008204:	1c4b      	adds	r3, r1, #1
 8008206:	e7e7      	b.n	80081d8 <_printf_float+0x1a0>
 8008208:	2900      	cmp	r1, #0
 800820a:	bfd4      	ite	le
 800820c:	f1c1 0202 	rsble	r2, r1, #2
 8008210:	2201      	movgt	r2, #1
 8008212:	4413      	add	r3, r2
 8008214:	e7e0      	b.n	80081d8 <_printf_float+0x1a0>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	055a      	lsls	r2, r3, #21
 800821a:	d407      	bmi.n	800822c <_printf_float+0x1f4>
 800821c:	6923      	ldr	r3, [r4, #16]
 800821e:	4642      	mov	r2, r8
 8008220:	4631      	mov	r1, r6
 8008222:	4628      	mov	r0, r5
 8008224:	47b8      	blx	r7
 8008226:	3001      	adds	r0, #1
 8008228:	d12c      	bne.n	8008284 <_printf_float+0x24c>
 800822a:	e764      	b.n	80080f6 <_printf_float+0xbe>
 800822c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008230:	f240 80e0 	bls.w	80083f4 <_printf_float+0x3bc>
 8008234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	f7f8 fc4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008240:	2800      	cmp	r0, #0
 8008242:	d034      	beq.n	80082ae <_printf_float+0x276>
 8008244:	4a37      	ldr	r2, [pc, #220]	; (8008324 <_printf_float+0x2ec>)
 8008246:	2301      	movs	r3, #1
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f af51 	beq.w	80080f6 <_printf_float+0xbe>
 8008254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008258:	429a      	cmp	r2, r3
 800825a:	db02      	blt.n	8008262 <_printf_float+0x22a>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	07d8      	lsls	r0, r3, #31
 8008260:	d510      	bpl.n	8008284 <_printf_float+0x24c>
 8008262:	ee18 3a10 	vmov	r3, s16
 8008266:	4652      	mov	r2, sl
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f af41 	beq.w	80080f6 <_printf_float+0xbe>
 8008274:	f04f 0800 	mov.w	r8, #0
 8008278:	f104 091a 	add.w	r9, r4, #26
 800827c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800827e:	3b01      	subs	r3, #1
 8008280:	4543      	cmp	r3, r8
 8008282:	dc09      	bgt.n	8008298 <_printf_float+0x260>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	079b      	lsls	r3, r3, #30
 8008288:	f100 8107 	bmi.w	800849a <_printf_float+0x462>
 800828c:	68e0      	ldr	r0, [r4, #12]
 800828e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008290:	4298      	cmp	r0, r3
 8008292:	bfb8      	it	lt
 8008294:	4618      	movlt	r0, r3
 8008296:	e730      	b.n	80080fa <_printf_float+0xc2>
 8008298:	2301      	movs	r3, #1
 800829a:	464a      	mov	r2, r9
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f af27 	beq.w	80080f6 <_printf_float+0xbe>
 80082a8:	f108 0801 	add.w	r8, r8, #1
 80082ac:	e7e6      	b.n	800827c <_printf_float+0x244>
 80082ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	dc39      	bgt.n	8008328 <_printf_float+0x2f0>
 80082b4:	4a1b      	ldr	r2, [pc, #108]	; (8008324 <_printf_float+0x2ec>)
 80082b6:	2301      	movs	r3, #1
 80082b8:	4631      	mov	r1, r6
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b8      	blx	r7
 80082be:	3001      	adds	r0, #1
 80082c0:	f43f af19 	beq.w	80080f6 <_printf_float+0xbe>
 80082c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d102      	bne.n	80082d2 <_printf_float+0x29a>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	07d9      	lsls	r1, r3, #31
 80082d0:	d5d8      	bpl.n	8008284 <_printf_float+0x24c>
 80082d2:	ee18 3a10 	vmov	r3, s16
 80082d6:	4652      	mov	r2, sl
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	47b8      	blx	r7
 80082de:	3001      	adds	r0, #1
 80082e0:	f43f af09 	beq.w	80080f6 <_printf_float+0xbe>
 80082e4:	f04f 0900 	mov.w	r9, #0
 80082e8:	f104 0a1a 	add.w	sl, r4, #26
 80082ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ee:	425b      	negs	r3, r3
 80082f0:	454b      	cmp	r3, r9
 80082f2:	dc01      	bgt.n	80082f8 <_printf_float+0x2c0>
 80082f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f6:	e792      	b.n	800821e <_printf_float+0x1e6>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4652      	mov	r2, sl
 80082fc:	4631      	mov	r1, r6
 80082fe:	4628      	mov	r0, r5
 8008300:	47b8      	blx	r7
 8008302:	3001      	adds	r0, #1
 8008304:	f43f aef7 	beq.w	80080f6 <_printf_float+0xbe>
 8008308:	f109 0901 	add.w	r9, r9, #1
 800830c:	e7ee      	b.n	80082ec <_printf_float+0x2b4>
 800830e:	bf00      	nop
 8008310:	7fefffff 	.word	0x7fefffff
 8008314:	0800c7d0 	.word	0x0800c7d0
 8008318:	0800c7d4 	.word	0x0800c7d4
 800831c:	0800c7d8 	.word	0x0800c7d8
 8008320:	0800c7dc 	.word	0x0800c7dc
 8008324:	0800c7e0 	.word	0x0800c7e0
 8008328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800832c:	429a      	cmp	r2, r3
 800832e:	bfa8      	it	ge
 8008330:	461a      	movge	r2, r3
 8008332:	2a00      	cmp	r2, #0
 8008334:	4691      	mov	r9, r2
 8008336:	dc37      	bgt.n	80083a8 <_printf_float+0x370>
 8008338:	f04f 0b00 	mov.w	fp, #0
 800833c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008340:	f104 021a 	add.w	r2, r4, #26
 8008344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	eba3 0309 	sub.w	r3, r3, r9
 800834c:	455b      	cmp	r3, fp
 800834e:	dc33      	bgt.n	80083b8 <_printf_float+0x380>
 8008350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008354:	429a      	cmp	r2, r3
 8008356:	db3b      	blt.n	80083d0 <_printf_float+0x398>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	07da      	lsls	r2, r3, #31
 800835c:	d438      	bmi.n	80083d0 <_printf_float+0x398>
 800835e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008362:	eba2 0903 	sub.w	r9, r2, r3
 8008366:	9b05      	ldr	r3, [sp, #20]
 8008368:	1ad2      	subs	r2, r2, r3
 800836a:	4591      	cmp	r9, r2
 800836c:	bfa8      	it	ge
 800836e:	4691      	movge	r9, r2
 8008370:	f1b9 0f00 	cmp.w	r9, #0
 8008374:	dc35      	bgt.n	80083e2 <_printf_float+0x3aa>
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800837e:	f104 0a1a 	add.w	sl, r4, #26
 8008382:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	eba3 0309 	sub.w	r3, r3, r9
 800838c:	4543      	cmp	r3, r8
 800838e:	f77f af79 	ble.w	8008284 <_printf_float+0x24c>
 8008392:	2301      	movs	r3, #1
 8008394:	4652      	mov	r2, sl
 8008396:	4631      	mov	r1, r6
 8008398:	4628      	mov	r0, r5
 800839a:	47b8      	blx	r7
 800839c:	3001      	adds	r0, #1
 800839e:	f43f aeaa 	beq.w	80080f6 <_printf_float+0xbe>
 80083a2:	f108 0801 	add.w	r8, r8, #1
 80083a6:	e7ec      	b.n	8008382 <_printf_float+0x34a>
 80083a8:	4613      	mov	r3, r2
 80083aa:	4631      	mov	r1, r6
 80083ac:	4642      	mov	r2, r8
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	d1c0      	bne.n	8008338 <_printf_float+0x300>
 80083b6:	e69e      	b.n	80080f6 <_printf_float+0xbe>
 80083b8:	2301      	movs	r3, #1
 80083ba:	4631      	mov	r1, r6
 80083bc:	4628      	mov	r0, r5
 80083be:	9205      	str	r2, [sp, #20]
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	f43f ae97 	beq.w	80080f6 <_printf_float+0xbe>
 80083c8:	9a05      	ldr	r2, [sp, #20]
 80083ca:	f10b 0b01 	add.w	fp, fp, #1
 80083ce:	e7b9      	b.n	8008344 <_printf_float+0x30c>
 80083d0:	ee18 3a10 	vmov	r3, s16
 80083d4:	4652      	mov	r2, sl
 80083d6:	4631      	mov	r1, r6
 80083d8:	4628      	mov	r0, r5
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	d1be      	bne.n	800835e <_printf_float+0x326>
 80083e0:	e689      	b.n	80080f6 <_printf_float+0xbe>
 80083e2:	9a05      	ldr	r2, [sp, #20]
 80083e4:	464b      	mov	r3, r9
 80083e6:	4442      	add	r2, r8
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	d1c1      	bne.n	8008376 <_printf_float+0x33e>
 80083f2:	e680      	b.n	80080f6 <_printf_float+0xbe>
 80083f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	dc01      	bgt.n	80083fe <_printf_float+0x3c6>
 80083fa:	07db      	lsls	r3, r3, #31
 80083fc:	d53a      	bpl.n	8008474 <_printf_float+0x43c>
 80083fe:	2301      	movs	r3, #1
 8008400:	4642      	mov	r2, r8
 8008402:	4631      	mov	r1, r6
 8008404:	4628      	mov	r0, r5
 8008406:	47b8      	blx	r7
 8008408:	3001      	adds	r0, #1
 800840a:	f43f ae74 	beq.w	80080f6 <_printf_float+0xbe>
 800840e:	ee18 3a10 	vmov	r3, s16
 8008412:	4652      	mov	r2, sl
 8008414:	4631      	mov	r1, r6
 8008416:	4628      	mov	r0, r5
 8008418:	47b8      	blx	r7
 800841a:	3001      	adds	r0, #1
 800841c:	f43f ae6b 	beq.w	80080f6 <_printf_float+0xbe>
 8008420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008424:	2200      	movs	r2, #0
 8008426:	2300      	movs	r3, #0
 8008428:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800842c:	f7f8 fb54 	bl	8000ad8 <__aeabi_dcmpeq>
 8008430:	b9d8      	cbnz	r0, 800846a <_printf_float+0x432>
 8008432:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008436:	f108 0201 	add.w	r2, r8, #1
 800843a:	4631      	mov	r1, r6
 800843c:	4628      	mov	r0, r5
 800843e:	47b8      	blx	r7
 8008440:	3001      	adds	r0, #1
 8008442:	d10e      	bne.n	8008462 <_printf_float+0x42a>
 8008444:	e657      	b.n	80080f6 <_printf_float+0xbe>
 8008446:	2301      	movs	r3, #1
 8008448:	4652      	mov	r2, sl
 800844a:	4631      	mov	r1, r6
 800844c:	4628      	mov	r0, r5
 800844e:	47b8      	blx	r7
 8008450:	3001      	adds	r0, #1
 8008452:	f43f ae50 	beq.w	80080f6 <_printf_float+0xbe>
 8008456:	f108 0801 	add.w	r8, r8, #1
 800845a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845c:	3b01      	subs	r3, #1
 800845e:	4543      	cmp	r3, r8
 8008460:	dcf1      	bgt.n	8008446 <_printf_float+0x40e>
 8008462:	464b      	mov	r3, r9
 8008464:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008468:	e6da      	b.n	8008220 <_printf_float+0x1e8>
 800846a:	f04f 0800 	mov.w	r8, #0
 800846e:	f104 0a1a 	add.w	sl, r4, #26
 8008472:	e7f2      	b.n	800845a <_printf_float+0x422>
 8008474:	2301      	movs	r3, #1
 8008476:	4642      	mov	r2, r8
 8008478:	e7df      	b.n	800843a <_printf_float+0x402>
 800847a:	2301      	movs	r3, #1
 800847c:	464a      	mov	r2, r9
 800847e:	4631      	mov	r1, r6
 8008480:	4628      	mov	r0, r5
 8008482:	47b8      	blx	r7
 8008484:	3001      	adds	r0, #1
 8008486:	f43f ae36 	beq.w	80080f6 <_printf_float+0xbe>
 800848a:	f108 0801 	add.w	r8, r8, #1
 800848e:	68e3      	ldr	r3, [r4, #12]
 8008490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008492:	1a5b      	subs	r3, r3, r1
 8008494:	4543      	cmp	r3, r8
 8008496:	dcf0      	bgt.n	800847a <_printf_float+0x442>
 8008498:	e6f8      	b.n	800828c <_printf_float+0x254>
 800849a:	f04f 0800 	mov.w	r8, #0
 800849e:	f104 0919 	add.w	r9, r4, #25
 80084a2:	e7f4      	b.n	800848e <_printf_float+0x456>

080084a4 <_printf_common>:
 80084a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	4616      	mov	r6, r2
 80084aa:	4699      	mov	r9, r3
 80084ac:	688a      	ldr	r2, [r1, #8]
 80084ae:	690b      	ldr	r3, [r1, #16]
 80084b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	bfb8      	it	lt
 80084b8:	4613      	movlt	r3, r2
 80084ba:	6033      	str	r3, [r6, #0]
 80084bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084c0:	4607      	mov	r7, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	b10a      	cbz	r2, 80084ca <_printf_common+0x26>
 80084c6:	3301      	adds	r3, #1
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	0699      	lsls	r1, r3, #26
 80084ce:	bf42      	ittt	mi
 80084d0:	6833      	ldrmi	r3, [r6, #0]
 80084d2:	3302      	addmi	r3, #2
 80084d4:	6033      	strmi	r3, [r6, #0]
 80084d6:	6825      	ldr	r5, [r4, #0]
 80084d8:	f015 0506 	ands.w	r5, r5, #6
 80084dc:	d106      	bne.n	80084ec <_printf_common+0x48>
 80084de:	f104 0a19 	add.w	sl, r4, #25
 80084e2:	68e3      	ldr	r3, [r4, #12]
 80084e4:	6832      	ldr	r2, [r6, #0]
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	42ab      	cmp	r3, r5
 80084ea:	dc26      	bgt.n	800853a <_printf_common+0x96>
 80084ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084f0:	1e13      	subs	r3, r2, #0
 80084f2:	6822      	ldr	r2, [r4, #0]
 80084f4:	bf18      	it	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	0692      	lsls	r2, r2, #26
 80084fa:	d42b      	bmi.n	8008554 <_printf_common+0xb0>
 80084fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008500:	4649      	mov	r1, r9
 8008502:	4638      	mov	r0, r7
 8008504:	47c0      	blx	r8
 8008506:	3001      	adds	r0, #1
 8008508:	d01e      	beq.n	8008548 <_printf_common+0xa4>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	6922      	ldr	r2, [r4, #16]
 800850e:	f003 0306 	and.w	r3, r3, #6
 8008512:	2b04      	cmp	r3, #4
 8008514:	bf02      	ittt	eq
 8008516:	68e5      	ldreq	r5, [r4, #12]
 8008518:	6833      	ldreq	r3, [r6, #0]
 800851a:	1aed      	subeq	r5, r5, r3
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	bf0c      	ite	eq
 8008520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008524:	2500      	movne	r5, #0
 8008526:	4293      	cmp	r3, r2
 8008528:	bfc4      	itt	gt
 800852a:	1a9b      	subgt	r3, r3, r2
 800852c:	18ed      	addgt	r5, r5, r3
 800852e:	2600      	movs	r6, #0
 8008530:	341a      	adds	r4, #26
 8008532:	42b5      	cmp	r5, r6
 8008534:	d11a      	bne.n	800856c <_printf_common+0xc8>
 8008536:	2000      	movs	r0, #0
 8008538:	e008      	b.n	800854c <_printf_common+0xa8>
 800853a:	2301      	movs	r3, #1
 800853c:	4652      	mov	r2, sl
 800853e:	4649      	mov	r1, r9
 8008540:	4638      	mov	r0, r7
 8008542:	47c0      	blx	r8
 8008544:	3001      	adds	r0, #1
 8008546:	d103      	bne.n	8008550 <_printf_common+0xac>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008550:	3501      	adds	r5, #1
 8008552:	e7c6      	b.n	80084e2 <_printf_common+0x3e>
 8008554:	18e1      	adds	r1, r4, r3
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	2030      	movs	r0, #48	; 0x30
 800855a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800855e:	4422      	add	r2, r4
 8008560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008568:	3302      	adds	r3, #2
 800856a:	e7c7      	b.n	80084fc <_printf_common+0x58>
 800856c:	2301      	movs	r3, #1
 800856e:	4622      	mov	r2, r4
 8008570:	4649      	mov	r1, r9
 8008572:	4638      	mov	r0, r7
 8008574:	47c0      	blx	r8
 8008576:	3001      	adds	r0, #1
 8008578:	d0e6      	beq.n	8008548 <_printf_common+0xa4>
 800857a:	3601      	adds	r6, #1
 800857c:	e7d9      	b.n	8008532 <_printf_common+0x8e>
	...

08008580 <_printf_i>:
 8008580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	7e0f      	ldrb	r7, [r1, #24]
 8008586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008588:	2f78      	cmp	r7, #120	; 0x78
 800858a:	4691      	mov	r9, r2
 800858c:	4680      	mov	r8, r0
 800858e:	460c      	mov	r4, r1
 8008590:	469a      	mov	sl, r3
 8008592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008596:	d807      	bhi.n	80085a8 <_printf_i+0x28>
 8008598:	2f62      	cmp	r7, #98	; 0x62
 800859a:	d80a      	bhi.n	80085b2 <_printf_i+0x32>
 800859c:	2f00      	cmp	r7, #0
 800859e:	f000 80d4 	beq.w	800874a <_printf_i+0x1ca>
 80085a2:	2f58      	cmp	r7, #88	; 0x58
 80085a4:	f000 80c0 	beq.w	8008728 <_printf_i+0x1a8>
 80085a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085b0:	e03a      	b.n	8008628 <_printf_i+0xa8>
 80085b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085b6:	2b15      	cmp	r3, #21
 80085b8:	d8f6      	bhi.n	80085a8 <_printf_i+0x28>
 80085ba:	a101      	add	r1, pc, #4	; (adr r1, 80085c0 <_printf_i+0x40>)
 80085bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085c0:	08008619 	.word	0x08008619
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	080085a9 	.word	0x080085a9
 80085cc:	080085a9 	.word	0x080085a9
 80085d0:	080085a9 	.word	0x080085a9
 80085d4:	080085a9 	.word	0x080085a9
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	080085a9 	.word	0x080085a9
 80085e0:	080085a9 	.word	0x080085a9
 80085e4:	080085a9 	.word	0x080085a9
 80085e8:	080085a9 	.word	0x080085a9
 80085ec:	08008731 	.word	0x08008731
 80085f0:	08008659 	.word	0x08008659
 80085f4:	080086eb 	.word	0x080086eb
 80085f8:	080085a9 	.word	0x080085a9
 80085fc:	080085a9 	.word	0x080085a9
 8008600:	08008753 	.word	0x08008753
 8008604:	080085a9 	.word	0x080085a9
 8008608:	08008659 	.word	0x08008659
 800860c:	080085a9 	.word	0x080085a9
 8008610:	080085a9 	.word	0x080085a9
 8008614:	080086f3 	.word	0x080086f3
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	602a      	str	r2, [r5, #0]
 8008620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008628:	2301      	movs	r3, #1
 800862a:	e09f      	b.n	800876c <_printf_i+0x1ec>
 800862c:	6820      	ldr	r0, [r4, #0]
 800862e:	682b      	ldr	r3, [r5, #0]
 8008630:	0607      	lsls	r7, r0, #24
 8008632:	f103 0104 	add.w	r1, r3, #4
 8008636:	6029      	str	r1, [r5, #0]
 8008638:	d501      	bpl.n	800863e <_printf_i+0xbe>
 800863a:	681e      	ldr	r6, [r3, #0]
 800863c:	e003      	b.n	8008646 <_printf_i+0xc6>
 800863e:	0646      	lsls	r6, r0, #25
 8008640:	d5fb      	bpl.n	800863a <_printf_i+0xba>
 8008642:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008646:	2e00      	cmp	r6, #0
 8008648:	da03      	bge.n	8008652 <_printf_i+0xd2>
 800864a:	232d      	movs	r3, #45	; 0x2d
 800864c:	4276      	negs	r6, r6
 800864e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008652:	485a      	ldr	r0, [pc, #360]	; (80087bc <_printf_i+0x23c>)
 8008654:	230a      	movs	r3, #10
 8008656:	e012      	b.n	800867e <_printf_i+0xfe>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	6820      	ldr	r0, [r4, #0]
 800865c:	1d19      	adds	r1, r3, #4
 800865e:	6029      	str	r1, [r5, #0]
 8008660:	0605      	lsls	r5, r0, #24
 8008662:	d501      	bpl.n	8008668 <_printf_i+0xe8>
 8008664:	681e      	ldr	r6, [r3, #0]
 8008666:	e002      	b.n	800866e <_printf_i+0xee>
 8008668:	0641      	lsls	r1, r0, #25
 800866a:	d5fb      	bpl.n	8008664 <_printf_i+0xe4>
 800866c:	881e      	ldrh	r6, [r3, #0]
 800866e:	4853      	ldr	r0, [pc, #332]	; (80087bc <_printf_i+0x23c>)
 8008670:	2f6f      	cmp	r7, #111	; 0x6f
 8008672:	bf0c      	ite	eq
 8008674:	2308      	moveq	r3, #8
 8008676:	230a      	movne	r3, #10
 8008678:	2100      	movs	r1, #0
 800867a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800867e:	6865      	ldr	r5, [r4, #4]
 8008680:	60a5      	str	r5, [r4, #8]
 8008682:	2d00      	cmp	r5, #0
 8008684:	bfa2      	ittt	ge
 8008686:	6821      	ldrge	r1, [r4, #0]
 8008688:	f021 0104 	bicge.w	r1, r1, #4
 800868c:	6021      	strge	r1, [r4, #0]
 800868e:	b90e      	cbnz	r6, 8008694 <_printf_i+0x114>
 8008690:	2d00      	cmp	r5, #0
 8008692:	d04b      	beq.n	800872c <_printf_i+0x1ac>
 8008694:	4615      	mov	r5, r2
 8008696:	fbb6 f1f3 	udiv	r1, r6, r3
 800869a:	fb03 6711 	mls	r7, r3, r1, r6
 800869e:	5dc7      	ldrb	r7, [r0, r7]
 80086a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086a4:	4637      	mov	r7, r6
 80086a6:	42bb      	cmp	r3, r7
 80086a8:	460e      	mov	r6, r1
 80086aa:	d9f4      	bls.n	8008696 <_printf_i+0x116>
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d10b      	bne.n	80086c8 <_printf_i+0x148>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	07de      	lsls	r6, r3, #31
 80086b4:	d508      	bpl.n	80086c8 <_printf_i+0x148>
 80086b6:	6923      	ldr	r3, [r4, #16]
 80086b8:	6861      	ldr	r1, [r4, #4]
 80086ba:	4299      	cmp	r1, r3
 80086bc:	bfde      	ittt	le
 80086be:	2330      	movle	r3, #48	; 0x30
 80086c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80086c8:	1b52      	subs	r2, r2, r5
 80086ca:	6122      	str	r2, [r4, #16]
 80086cc:	f8cd a000 	str.w	sl, [sp]
 80086d0:	464b      	mov	r3, r9
 80086d2:	aa03      	add	r2, sp, #12
 80086d4:	4621      	mov	r1, r4
 80086d6:	4640      	mov	r0, r8
 80086d8:	f7ff fee4 	bl	80084a4 <_printf_common>
 80086dc:	3001      	adds	r0, #1
 80086de:	d14a      	bne.n	8008776 <_printf_i+0x1f6>
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086e4:	b004      	add	sp, #16
 80086e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	f043 0320 	orr.w	r3, r3, #32
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	4833      	ldr	r0, [pc, #204]	; (80087c0 <_printf_i+0x240>)
 80086f4:	2778      	movs	r7, #120	; 0x78
 80086f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	6829      	ldr	r1, [r5, #0]
 80086fe:	061f      	lsls	r7, r3, #24
 8008700:	f851 6b04 	ldr.w	r6, [r1], #4
 8008704:	d402      	bmi.n	800870c <_printf_i+0x18c>
 8008706:	065f      	lsls	r7, r3, #25
 8008708:	bf48      	it	mi
 800870a:	b2b6      	uxthmi	r6, r6
 800870c:	07df      	lsls	r7, r3, #31
 800870e:	bf48      	it	mi
 8008710:	f043 0320 	orrmi.w	r3, r3, #32
 8008714:	6029      	str	r1, [r5, #0]
 8008716:	bf48      	it	mi
 8008718:	6023      	strmi	r3, [r4, #0]
 800871a:	b91e      	cbnz	r6, 8008724 <_printf_i+0x1a4>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	f023 0320 	bic.w	r3, r3, #32
 8008722:	6023      	str	r3, [r4, #0]
 8008724:	2310      	movs	r3, #16
 8008726:	e7a7      	b.n	8008678 <_printf_i+0xf8>
 8008728:	4824      	ldr	r0, [pc, #144]	; (80087bc <_printf_i+0x23c>)
 800872a:	e7e4      	b.n	80086f6 <_printf_i+0x176>
 800872c:	4615      	mov	r5, r2
 800872e:	e7bd      	b.n	80086ac <_printf_i+0x12c>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	6826      	ldr	r6, [r4, #0]
 8008734:	6961      	ldr	r1, [r4, #20]
 8008736:	1d18      	adds	r0, r3, #4
 8008738:	6028      	str	r0, [r5, #0]
 800873a:	0635      	lsls	r5, r6, #24
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	d501      	bpl.n	8008744 <_printf_i+0x1c4>
 8008740:	6019      	str	r1, [r3, #0]
 8008742:	e002      	b.n	800874a <_printf_i+0x1ca>
 8008744:	0670      	lsls	r0, r6, #25
 8008746:	d5fb      	bpl.n	8008740 <_printf_i+0x1c0>
 8008748:	8019      	strh	r1, [r3, #0]
 800874a:	2300      	movs	r3, #0
 800874c:	6123      	str	r3, [r4, #16]
 800874e:	4615      	mov	r5, r2
 8008750:	e7bc      	b.n	80086cc <_printf_i+0x14c>
 8008752:	682b      	ldr	r3, [r5, #0]
 8008754:	1d1a      	adds	r2, r3, #4
 8008756:	602a      	str	r2, [r5, #0]
 8008758:	681d      	ldr	r5, [r3, #0]
 800875a:	6862      	ldr	r2, [r4, #4]
 800875c:	2100      	movs	r1, #0
 800875e:	4628      	mov	r0, r5
 8008760:	f7f7 fd3e 	bl	80001e0 <memchr>
 8008764:	b108      	cbz	r0, 800876a <_printf_i+0x1ea>
 8008766:	1b40      	subs	r0, r0, r5
 8008768:	6060      	str	r0, [r4, #4]
 800876a:	6863      	ldr	r3, [r4, #4]
 800876c:	6123      	str	r3, [r4, #16]
 800876e:	2300      	movs	r3, #0
 8008770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008774:	e7aa      	b.n	80086cc <_printf_i+0x14c>
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	462a      	mov	r2, r5
 800877a:	4649      	mov	r1, r9
 800877c:	4640      	mov	r0, r8
 800877e:	47d0      	blx	sl
 8008780:	3001      	adds	r0, #1
 8008782:	d0ad      	beq.n	80086e0 <_printf_i+0x160>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	079b      	lsls	r3, r3, #30
 8008788:	d413      	bmi.n	80087b2 <_printf_i+0x232>
 800878a:	68e0      	ldr	r0, [r4, #12]
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	4298      	cmp	r0, r3
 8008790:	bfb8      	it	lt
 8008792:	4618      	movlt	r0, r3
 8008794:	e7a6      	b.n	80086e4 <_printf_i+0x164>
 8008796:	2301      	movs	r3, #1
 8008798:	4632      	mov	r2, r6
 800879a:	4649      	mov	r1, r9
 800879c:	4640      	mov	r0, r8
 800879e:	47d0      	blx	sl
 80087a0:	3001      	adds	r0, #1
 80087a2:	d09d      	beq.n	80086e0 <_printf_i+0x160>
 80087a4:	3501      	adds	r5, #1
 80087a6:	68e3      	ldr	r3, [r4, #12]
 80087a8:	9903      	ldr	r1, [sp, #12]
 80087aa:	1a5b      	subs	r3, r3, r1
 80087ac:	42ab      	cmp	r3, r5
 80087ae:	dcf2      	bgt.n	8008796 <_printf_i+0x216>
 80087b0:	e7eb      	b.n	800878a <_printf_i+0x20a>
 80087b2:	2500      	movs	r5, #0
 80087b4:	f104 0619 	add.w	r6, r4, #25
 80087b8:	e7f5      	b.n	80087a6 <_printf_i+0x226>
 80087ba:	bf00      	nop
 80087bc:	0800c7e2 	.word	0x0800c7e2
 80087c0:	0800c7f3 	.word	0x0800c7f3

080087c4 <_scanf_float>:
 80087c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c8:	b087      	sub	sp, #28
 80087ca:	4617      	mov	r7, r2
 80087cc:	9303      	str	r3, [sp, #12]
 80087ce:	688b      	ldr	r3, [r1, #8]
 80087d0:	1e5a      	subs	r2, r3, #1
 80087d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087d6:	bf83      	ittte	hi
 80087d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087dc:	195b      	addhi	r3, r3, r5
 80087de:	9302      	strhi	r3, [sp, #8]
 80087e0:	2300      	movls	r3, #0
 80087e2:	bf86      	itte	hi
 80087e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087e8:	608b      	strhi	r3, [r1, #8]
 80087ea:	9302      	strls	r3, [sp, #8]
 80087ec:	680b      	ldr	r3, [r1, #0]
 80087ee:	468b      	mov	fp, r1
 80087f0:	2500      	movs	r5, #0
 80087f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80087f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80087fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80087fe:	4680      	mov	r8, r0
 8008800:	460c      	mov	r4, r1
 8008802:	465e      	mov	r6, fp
 8008804:	46aa      	mov	sl, r5
 8008806:	46a9      	mov	r9, r5
 8008808:	9501      	str	r5, [sp, #4]
 800880a:	68a2      	ldr	r2, [r4, #8]
 800880c:	b152      	cbz	r2, 8008824 <_scanf_float+0x60>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	2b4e      	cmp	r3, #78	; 0x4e
 8008814:	d864      	bhi.n	80088e0 <_scanf_float+0x11c>
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	d83c      	bhi.n	8008894 <_scanf_float+0xd0>
 800881a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800881e:	b2c8      	uxtb	r0, r1
 8008820:	280e      	cmp	r0, #14
 8008822:	d93a      	bls.n	800889a <_scanf_float+0xd6>
 8008824:	f1b9 0f00 	cmp.w	r9, #0
 8008828:	d003      	beq.n	8008832 <_scanf_float+0x6e>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008836:	f1ba 0f01 	cmp.w	sl, #1
 800883a:	f200 8113 	bhi.w	8008a64 <_scanf_float+0x2a0>
 800883e:	455e      	cmp	r6, fp
 8008840:	f200 8105 	bhi.w	8008a4e <_scanf_float+0x28a>
 8008844:	2501      	movs	r5, #1
 8008846:	4628      	mov	r0, r5
 8008848:	b007      	add	sp, #28
 800884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008852:	2a0d      	cmp	r2, #13
 8008854:	d8e6      	bhi.n	8008824 <_scanf_float+0x60>
 8008856:	a101      	add	r1, pc, #4	; (adr r1, 800885c <_scanf_float+0x98>)
 8008858:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800885c:	0800899b 	.word	0x0800899b
 8008860:	08008825 	.word	0x08008825
 8008864:	08008825 	.word	0x08008825
 8008868:	08008825 	.word	0x08008825
 800886c:	080089fb 	.word	0x080089fb
 8008870:	080089d3 	.word	0x080089d3
 8008874:	08008825 	.word	0x08008825
 8008878:	08008825 	.word	0x08008825
 800887c:	080089a9 	.word	0x080089a9
 8008880:	08008825 	.word	0x08008825
 8008884:	08008825 	.word	0x08008825
 8008888:	08008825 	.word	0x08008825
 800888c:	08008825 	.word	0x08008825
 8008890:	08008961 	.word	0x08008961
 8008894:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008898:	e7db      	b.n	8008852 <_scanf_float+0x8e>
 800889a:	290e      	cmp	r1, #14
 800889c:	d8c2      	bhi.n	8008824 <_scanf_float+0x60>
 800889e:	a001      	add	r0, pc, #4	; (adr r0, 80088a4 <_scanf_float+0xe0>)
 80088a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088a4:	08008953 	.word	0x08008953
 80088a8:	08008825 	.word	0x08008825
 80088ac:	08008953 	.word	0x08008953
 80088b0:	080089e7 	.word	0x080089e7
 80088b4:	08008825 	.word	0x08008825
 80088b8:	08008901 	.word	0x08008901
 80088bc:	0800893d 	.word	0x0800893d
 80088c0:	0800893d 	.word	0x0800893d
 80088c4:	0800893d 	.word	0x0800893d
 80088c8:	0800893d 	.word	0x0800893d
 80088cc:	0800893d 	.word	0x0800893d
 80088d0:	0800893d 	.word	0x0800893d
 80088d4:	0800893d 	.word	0x0800893d
 80088d8:	0800893d 	.word	0x0800893d
 80088dc:	0800893d 	.word	0x0800893d
 80088e0:	2b6e      	cmp	r3, #110	; 0x6e
 80088e2:	d809      	bhi.n	80088f8 <_scanf_float+0x134>
 80088e4:	2b60      	cmp	r3, #96	; 0x60
 80088e6:	d8b2      	bhi.n	800884e <_scanf_float+0x8a>
 80088e8:	2b54      	cmp	r3, #84	; 0x54
 80088ea:	d077      	beq.n	80089dc <_scanf_float+0x218>
 80088ec:	2b59      	cmp	r3, #89	; 0x59
 80088ee:	d199      	bne.n	8008824 <_scanf_float+0x60>
 80088f0:	2d07      	cmp	r5, #7
 80088f2:	d197      	bne.n	8008824 <_scanf_float+0x60>
 80088f4:	2508      	movs	r5, #8
 80088f6:	e029      	b.n	800894c <_scanf_float+0x188>
 80088f8:	2b74      	cmp	r3, #116	; 0x74
 80088fa:	d06f      	beq.n	80089dc <_scanf_float+0x218>
 80088fc:	2b79      	cmp	r3, #121	; 0x79
 80088fe:	e7f6      	b.n	80088ee <_scanf_float+0x12a>
 8008900:	6821      	ldr	r1, [r4, #0]
 8008902:	05c8      	lsls	r0, r1, #23
 8008904:	d51a      	bpl.n	800893c <_scanf_float+0x178>
 8008906:	9b02      	ldr	r3, [sp, #8]
 8008908:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800890c:	6021      	str	r1, [r4, #0]
 800890e:	f109 0901 	add.w	r9, r9, #1
 8008912:	b11b      	cbz	r3, 800891c <_scanf_float+0x158>
 8008914:	3b01      	subs	r3, #1
 8008916:	3201      	adds	r2, #1
 8008918:	9302      	str	r3, [sp, #8]
 800891a:	60a2      	str	r2, [r4, #8]
 800891c:	68a3      	ldr	r3, [r4, #8]
 800891e:	3b01      	subs	r3, #1
 8008920:	60a3      	str	r3, [r4, #8]
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	3301      	adds	r3, #1
 8008926:	6123      	str	r3, [r4, #16]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3b01      	subs	r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	607b      	str	r3, [r7, #4]
 8008930:	f340 8084 	ble.w	8008a3c <_scanf_float+0x278>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	3301      	adds	r3, #1
 8008938:	603b      	str	r3, [r7, #0]
 800893a:	e766      	b.n	800880a <_scanf_float+0x46>
 800893c:	eb1a 0f05 	cmn.w	sl, r5
 8008940:	f47f af70 	bne.w	8008824 <_scanf_float+0x60>
 8008944:	6822      	ldr	r2, [r4, #0]
 8008946:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800894a:	6022      	str	r2, [r4, #0]
 800894c:	f806 3b01 	strb.w	r3, [r6], #1
 8008950:	e7e4      	b.n	800891c <_scanf_float+0x158>
 8008952:	6822      	ldr	r2, [r4, #0]
 8008954:	0610      	lsls	r0, r2, #24
 8008956:	f57f af65 	bpl.w	8008824 <_scanf_float+0x60>
 800895a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895e:	e7f4      	b.n	800894a <_scanf_float+0x186>
 8008960:	f1ba 0f00 	cmp.w	sl, #0
 8008964:	d10e      	bne.n	8008984 <_scanf_float+0x1c0>
 8008966:	f1b9 0f00 	cmp.w	r9, #0
 800896a:	d10e      	bne.n	800898a <_scanf_float+0x1c6>
 800896c:	6822      	ldr	r2, [r4, #0]
 800896e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008972:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008976:	d108      	bne.n	800898a <_scanf_float+0x1c6>
 8008978:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800897c:	6022      	str	r2, [r4, #0]
 800897e:	f04f 0a01 	mov.w	sl, #1
 8008982:	e7e3      	b.n	800894c <_scanf_float+0x188>
 8008984:	f1ba 0f02 	cmp.w	sl, #2
 8008988:	d055      	beq.n	8008a36 <_scanf_float+0x272>
 800898a:	2d01      	cmp	r5, #1
 800898c:	d002      	beq.n	8008994 <_scanf_float+0x1d0>
 800898e:	2d04      	cmp	r5, #4
 8008990:	f47f af48 	bne.w	8008824 <_scanf_float+0x60>
 8008994:	3501      	adds	r5, #1
 8008996:	b2ed      	uxtb	r5, r5
 8008998:	e7d8      	b.n	800894c <_scanf_float+0x188>
 800899a:	f1ba 0f01 	cmp.w	sl, #1
 800899e:	f47f af41 	bne.w	8008824 <_scanf_float+0x60>
 80089a2:	f04f 0a02 	mov.w	sl, #2
 80089a6:	e7d1      	b.n	800894c <_scanf_float+0x188>
 80089a8:	b97d      	cbnz	r5, 80089ca <_scanf_float+0x206>
 80089aa:	f1b9 0f00 	cmp.w	r9, #0
 80089ae:	f47f af3c 	bne.w	800882a <_scanf_float+0x66>
 80089b2:	6822      	ldr	r2, [r4, #0]
 80089b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089bc:	f47f af39 	bne.w	8008832 <_scanf_float+0x6e>
 80089c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089c4:	6022      	str	r2, [r4, #0]
 80089c6:	2501      	movs	r5, #1
 80089c8:	e7c0      	b.n	800894c <_scanf_float+0x188>
 80089ca:	2d03      	cmp	r5, #3
 80089cc:	d0e2      	beq.n	8008994 <_scanf_float+0x1d0>
 80089ce:	2d05      	cmp	r5, #5
 80089d0:	e7de      	b.n	8008990 <_scanf_float+0x1cc>
 80089d2:	2d02      	cmp	r5, #2
 80089d4:	f47f af26 	bne.w	8008824 <_scanf_float+0x60>
 80089d8:	2503      	movs	r5, #3
 80089da:	e7b7      	b.n	800894c <_scanf_float+0x188>
 80089dc:	2d06      	cmp	r5, #6
 80089de:	f47f af21 	bne.w	8008824 <_scanf_float+0x60>
 80089e2:	2507      	movs	r5, #7
 80089e4:	e7b2      	b.n	800894c <_scanf_float+0x188>
 80089e6:	6822      	ldr	r2, [r4, #0]
 80089e8:	0591      	lsls	r1, r2, #22
 80089ea:	f57f af1b 	bpl.w	8008824 <_scanf_float+0x60>
 80089ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80089f2:	6022      	str	r2, [r4, #0]
 80089f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80089f8:	e7a8      	b.n	800894c <_scanf_float+0x188>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a04:	d006      	beq.n	8008a14 <_scanf_float+0x250>
 8008a06:	0550      	lsls	r0, r2, #21
 8008a08:	f57f af0c 	bpl.w	8008824 <_scanf_float+0x60>
 8008a0c:	f1b9 0f00 	cmp.w	r9, #0
 8008a10:	f43f af0f 	beq.w	8008832 <_scanf_float+0x6e>
 8008a14:	0591      	lsls	r1, r2, #22
 8008a16:	bf58      	it	pl
 8008a18:	9901      	ldrpl	r1, [sp, #4]
 8008a1a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a1e:	bf58      	it	pl
 8008a20:	eba9 0101 	subpl.w	r1, r9, r1
 8008a24:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a28:	bf58      	it	pl
 8008a2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a2e:	6022      	str	r2, [r4, #0]
 8008a30:	f04f 0900 	mov.w	r9, #0
 8008a34:	e78a      	b.n	800894c <_scanf_float+0x188>
 8008a36:	f04f 0a03 	mov.w	sl, #3
 8008a3a:	e787      	b.n	800894c <_scanf_float+0x188>
 8008a3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a40:	4639      	mov	r1, r7
 8008a42:	4640      	mov	r0, r8
 8008a44:	4798      	blx	r3
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f aedf 	beq.w	800880a <_scanf_float+0x46>
 8008a4c:	e6ea      	b.n	8008824 <_scanf_float+0x60>
 8008a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a56:	463a      	mov	r2, r7
 8008a58:	4640      	mov	r0, r8
 8008a5a:	4798      	blx	r3
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	6123      	str	r3, [r4, #16]
 8008a62:	e6ec      	b.n	800883e <_scanf_float+0x7a>
 8008a64:	1e6b      	subs	r3, r5, #1
 8008a66:	2b06      	cmp	r3, #6
 8008a68:	d825      	bhi.n	8008ab6 <_scanf_float+0x2f2>
 8008a6a:	2d02      	cmp	r5, #2
 8008a6c:	d836      	bhi.n	8008adc <_scanf_float+0x318>
 8008a6e:	455e      	cmp	r6, fp
 8008a70:	f67f aee8 	bls.w	8008844 <_scanf_float+0x80>
 8008a74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a7c:	463a      	mov	r2, r7
 8008a7e:	4640      	mov	r0, r8
 8008a80:	4798      	blx	r3
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	3b01      	subs	r3, #1
 8008a86:	6123      	str	r3, [r4, #16]
 8008a88:	e7f1      	b.n	8008a6e <_scanf_float+0x2aa>
 8008a8a:	9802      	ldr	r0, [sp, #8]
 8008a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a90:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a94:	9002      	str	r0, [sp, #8]
 8008a96:	463a      	mov	r2, r7
 8008a98:	4640      	mov	r0, r8
 8008a9a:	4798      	blx	r3
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	6123      	str	r3, [r4, #16]
 8008aa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008aa6:	fa5f fa8a 	uxtb.w	sl, sl
 8008aaa:	f1ba 0f02 	cmp.w	sl, #2
 8008aae:	d1ec      	bne.n	8008a8a <_scanf_float+0x2c6>
 8008ab0:	3d03      	subs	r5, #3
 8008ab2:	b2ed      	uxtb	r5, r5
 8008ab4:	1b76      	subs	r6, r6, r5
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	05da      	lsls	r2, r3, #23
 8008aba:	d52f      	bpl.n	8008b1c <_scanf_float+0x358>
 8008abc:	055b      	lsls	r3, r3, #21
 8008abe:	d510      	bpl.n	8008ae2 <_scanf_float+0x31e>
 8008ac0:	455e      	cmp	r6, fp
 8008ac2:	f67f aebf 	bls.w	8008844 <_scanf_float+0x80>
 8008ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ace:	463a      	mov	r2, r7
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	4798      	blx	r3
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	6123      	str	r3, [r4, #16]
 8008ada:	e7f1      	b.n	8008ac0 <_scanf_float+0x2fc>
 8008adc:	46aa      	mov	sl, r5
 8008ade:	9602      	str	r6, [sp, #8]
 8008ae0:	e7df      	b.n	8008aa2 <_scanf_float+0x2de>
 8008ae2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	2965      	cmp	r1, #101	; 0x65
 8008aea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008aee:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008af2:	6123      	str	r3, [r4, #16]
 8008af4:	d00c      	beq.n	8008b10 <_scanf_float+0x34c>
 8008af6:	2945      	cmp	r1, #69	; 0x45
 8008af8:	d00a      	beq.n	8008b10 <_scanf_float+0x34c>
 8008afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008afe:	463a      	mov	r2, r7
 8008b00:	4640      	mov	r0, r8
 8008b02:	4798      	blx	r3
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	1eb5      	subs	r5, r6, #2
 8008b0e:	6123      	str	r3, [r4, #16]
 8008b10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b14:	463a      	mov	r2, r7
 8008b16:	4640      	mov	r0, r8
 8008b18:	4798      	blx	r3
 8008b1a:	462e      	mov	r6, r5
 8008b1c:	6825      	ldr	r5, [r4, #0]
 8008b1e:	f015 0510 	ands.w	r5, r5, #16
 8008b22:	d158      	bne.n	8008bd6 <_scanf_float+0x412>
 8008b24:	7035      	strb	r5, [r6, #0]
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b30:	d11c      	bne.n	8008b6c <_scanf_float+0x3a8>
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	454b      	cmp	r3, r9
 8008b36:	eba3 0209 	sub.w	r2, r3, r9
 8008b3a:	d124      	bne.n	8008b86 <_scanf_float+0x3c2>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4659      	mov	r1, fp
 8008b40:	4640      	mov	r0, r8
 8008b42:	f002 fc65 	bl	800b410 <_strtod_r>
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	6821      	ldr	r1, [r4, #0]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f011 0f02 	tst.w	r1, #2
 8008b50:	ec57 6b10 	vmov	r6, r7, d0
 8008b54:	f103 0204 	add.w	r2, r3, #4
 8008b58:	d020      	beq.n	8008b9c <_scanf_float+0x3d8>
 8008b5a:	9903      	ldr	r1, [sp, #12]
 8008b5c:	600a      	str	r2, [r1, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	e9c3 6700 	strd	r6, r7, [r3]
 8008b64:	68e3      	ldr	r3, [r4, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60e3      	str	r3, [r4, #12]
 8008b6a:	e66c      	b.n	8008846 <_scanf_float+0x82>
 8008b6c:	9b04      	ldr	r3, [sp, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d0e4      	beq.n	8008b3c <_scanf_float+0x378>
 8008b72:	9905      	ldr	r1, [sp, #20]
 8008b74:	230a      	movs	r3, #10
 8008b76:	462a      	mov	r2, r5
 8008b78:	3101      	adds	r1, #1
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	f002 fcd0 	bl	800b520 <_strtol_r>
 8008b80:	9b04      	ldr	r3, [sp, #16]
 8008b82:	9e05      	ldr	r6, [sp, #20]
 8008b84:	1ac2      	subs	r2, r0, r3
 8008b86:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b8a:	429e      	cmp	r6, r3
 8008b8c:	bf28      	it	cs
 8008b8e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b92:	4912      	ldr	r1, [pc, #72]	; (8008bdc <_scanf_float+0x418>)
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 f91b 	bl	8008dd0 <siprintf>
 8008b9a:	e7cf      	b.n	8008b3c <_scanf_float+0x378>
 8008b9c:	f011 0f04 	tst.w	r1, #4
 8008ba0:	9903      	ldr	r1, [sp, #12]
 8008ba2:	600a      	str	r2, [r1, #0]
 8008ba4:	d1db      	bne.n	8008b5e <_scanf_float+0x39a>
 8008ba6:	f8d3 8000 	ldr.w	r8, [r3]
 8008baa:	ee10 2a10 	vmov	r2, s0
 8008bae:	ee10 0a10 	vmov	r0, s0
 8008bb2:	463b      	mov	r3, r7
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	f7f7 ffc1 	bl	8000b3c <__aeabi_dcmpun>
 8008bba:	b128      	cbz	r0, 8008bc8 <_scanf_float+0x404>
 8008bbc:	4808      	ldr	r0, [pc, #32]	; (8008be0 <_scanf_float+0x41c>)
 8008bbe:	f000 f9eb 	bl	8008f98 <nanf>
 8008bc2:	ed88 0a00 	vstr	s0, [r8]
 8008bc6:	e7cd      	b.n	8008b64 <_scanf_float+0x3a0>
 8008bc8:	4630      	mov	r0, r6
 8008bca:	4639      	mov	r1, r7
 8008bcc:	f7f8 f814 	bl	8000bf8 <__aeabi_d2f>
 8008bd0:	f8c8 0000 	str.w	r0, [r8]
 8008bd4:	e7c6      	b.n	8008b64 <_scanf_float+0x3a0>
 8008bd6:	2500      	movs	r5, #0
 8008bd8:	e635      	b.n	8008846 <_scanf_float+0x82>
 8008bda:	bf00      	nop
 8008bdc:	0800c804 	.word	0x0800c804
 8008be0:	0800cb95 	.word	0x0800cb95

08008be4 <std>:
 8008be4:	2300      	movs	r3, #0
 8008be6:	b510      	push	{r4, lr}
 8008be8:	4604      	mov	r4, r0
 8008bea:	e9c0 3300 	strd	r3, r3, [r0]
 8008bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bf2:	6083      	str	r3, [r0, #8]
 8008bf4:	8181      	strh	r1, [r0, #12]
 8008bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8008bf8:	81c2      	strh	r2, [r0, #14]
 8008bfa:	6183      	str	r3, [r0, #24]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	2208      	movs	r2, #8
 8008c00:	305c      	adds	r0, #92	; 0x5c
 8008c02:	f000 f948 	bl	8008e96 <memset>
 8008c06:	4b0d      	ldr	r3, [pc, #52]	; (8008c3c <std+0x58>)
 8008c08:	6263      	str	r3, [r4, #36]	; 0x24
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <std+0x5c>)
 8008c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	; (8008c44 <std+0x60>)
 8008c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c12:	4b0d      	ldr	r3, [pc, #52]	; (8008c48 <std+0x64>)
 8008c14:	6323      	str	r3, [r4, #48]	; 0x30
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <std+0x68>)
 8008c18:	6224      	str	r4, [r4, #32]
 8008c1a:	429c      	cmp	r4, r3
 8008c1c:	d006      	beq.n	8008c2c <std+0x48>
 8008c1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c22:	4294      	cmp	r4, r2
 8008c24:	d002      	beq.n	8008c2c <std+0x48>
 8008c26:	33d0      	adds	r3, #208	; 0xd0
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	d105      	bne.n	8008c38 <std+0x54>
 8008c2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c34:	f000 b9ac 	b.w	8008f90 <__retarget_lock_init_recursive>
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	bf00      	nop
 8008c3c:	08008e11 	.word	0x08008e11
 8008c40:	08008e33 	.word	0x08008e33
 8008c44:	08008e6b 	.word	0x08008e6b
 8008c48:	08008e8f 	.word	0x08008e8f
 8008c4c:	200016f8 	.word	0x200016f8

08008c50 <stdio_exit_handler>:
 8008c50:	4a02      	ldr	r2, [pc, #8]	; (8008c5c <stdio_exit_handler+0xc>)
 8008c52:	4903      	ldr	r1, [pc, #12]	; (8008c60 <stdio_exit_handler+0x10>)
 8008c54:	4803      	ldr	r0, [pc, #12]	; (8008c64 <stdio_exit_handler+0x14>)
 8008c56:	f000 b869 	b.w	8008d2c <_fwalk_sglue>
 8008c5a:	bf00      	nop
 8008c5c:	200000fc 	.word	0x200000fc
 8008c60:	0800b8e1 	.word	0x0800b8e1
 8008c64:	20000108 	.word	0x20000108

08008c68 <cleanup_stdio>:
 8008c68:	6841      	ldr	r1, [r0, #4]
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <cleanup_stdio+0x34>)
 8008c6c:	4299      	cmp	r1, r3
 8008c6e:	b510      	push	{r4, lr}
 8008c70:	4604      	mov	r4, r0
 8008c72:	d001      	beq.n	8008c78 <cleanup_stdio+0x10>
 8008c74:	f002 fe34 	bl	800b8e0 <_fflush_r>
 8008c78:	68a1      	ldr	r1, [r4, #8]
 8008c7a:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <cleanup_stdio+0x38>)
 8008c7c:	4299      	cmp	r1, r3
 8008c7e:	d002      	beq.n	8008c86 <cleanup_stdio+0x1e>
 8008c80:	4620      	mov	r0, r4
 8008c82:	f002 fe2d 	bl	800b8e0 <_fflush_r>
 8008c86:	68e1      	ldr	r1, [r4, #12]
 8008c88:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <cleanup_stdio+0x3c>)
 8008c8a:	4299      	cmp	r1, r3
 8008c8c:	d004      	beq.n	8008c98 <cleanup_stdio+0x30>
 8008c8e:	4620      	mov	r0, r4
 8008c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c94:	f002 be24 	b.w	800b8e0 <_fflush_r>
 8008c98:	bd10      	pop	{r4, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200016f8 	.word	0x200016f8
 8008ca0:	20001760 	.word	0x20001760
 8008ca4:	200017c8 	.word	0x200017c8

08008ca8 <global_stdio_init.part.0>:
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <global_stdio_init.part.0+0x30>)
 8008cac:	4c0b      	ldr	r4, [pc, #44]	; (8008cdc <global_stdio_init.part.0+0x34>)
 8008cae:	4a0c      	ldr	r2, [pc, #48]	; (8008ce0 <global_stdio_init.part.0+0x38>)
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2104      	movs	r1, #4
 8008cb8:	f7ff ff94 	bl	8008be4 <std>
 8008cbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	2109      	movs	r1, #9
 8008cc4:	f7ff ff8e 	bl	8008be4 <std>
 8008cc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008ccc:	2202      	movs	r2, #2
 8008cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd2:	2112      	movs	r1, #18
 8008cd4:	f7ff bf86 	b.w	8008be4 <std>
 8008cd8:	20001830 	.word	0x20001830
 8008cdc:	200016f8 	.word	0x200016f8
 8008ce0:	08008c51 	.word	0x08008c51

08008ce4 <__sfp_lock_acquire>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__sfp_lock_acquire+0x8>)
 8008ce6:	f000 b954 	b.w	8008f92 <__retarget_lock_acquire_recursive>
 8008cea:	bf00      	nop
 8008cec:	20001839 	.word	0x20001839

08008cf0 <__sfp_lock_release>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	; (8008cf8 <__sfp_lock_release+0x8>)
 8008cf2:	f000 b94f 	b.w	8008f94 <__retarget_lock_release_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	20001839 	.word	0x20001839

08008cfc <__sinit>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	4604      	mov	r4, r0
 8008d00:	f7ff fff0 	bl	8008ce4 <__sfp_lock_acquire>
 8008d04:	6a23      	ldr	r3, [r4, #32]
 8008d06:	b11b      	cbz	r3, 8008d10 <__sinit+0x14>
 8008d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d0c:	f7ff bff0 	b.w	8008cf0 <__sfp_lock_release>
 8008d10:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <__sinit+0x28>)
 8008d12:	6223      	str	r3, [r4, #32]
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <__sinit+0x2c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1f5      	bne.n	8008d08 <__sinit+0xc>
 8008d1c:	f7ff ffc4 	bl	8008ca8 <global_stdio_init.part.0>
 8008d20:	e7f2      	b.n	8008d08 <__sinit+0xc>
 8008d22:	bf00      	nop
 8008d24:	08008c69 	.word	0x08008c69
 8008d28:	20001830 	.word	0x20001830

08008d2c <_fwalk_sglue>:
 8008d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d30:	4607      	mov	r7, r0
 8008d32:	4688      	mov	r8, r1
 8008d34:	4614      	mov	r4, r2
 8008d36:	2600      	movs	r6, #0
 8008d38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d3c:	f1b9 0901 	subs.w	r9, r9, #1
 8008d40:	d505      	bpl.n	8008d4e <_fwalk_sglue+0x22>
 8008d42:	6824      	ldr	r4, [r4, #0]
 8008d44:	2c00      	cmp	r4, #0
 8008d46:	d1f7      	bne.n	8008d38 <_fwalk_sglue+0xc>
 8008d48:	4630      	mov	r0, r6
 8008d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d907      	bls.n	8008d64 <_fwalk_sglue+0x38>
 8008d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	d003      	beq.n	8008d64 <_fwalk_sglue+0x38>
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4638      	mov	r0, r7
 8008d60:	47c0      	blx	r8
 8008d62:	4306      	orrs	r6, r0
 8008d64:	3568      	adds	r5, #104	; 0x68
 8008d66:	e7e9      	b.n	8008d3c <_fwalk_sglue+0x10>

08008d68 <sniprintf>:
 8008d68:	b40c      	push	{r2, r3}
 8008d6a:	b530      	push	{r4, r5, lr}
 8008d6c:	4b17      	ldr	r3, [pc, #92]	; (8008dcc <sniprintf+0x64>)
 8008d6e:	1e0c      	subs	r4, r1, #0
 8008d70:	681d      	ldr	r5, [r3, #0]
 8008d72:	b09d      	sub	sp, #116	; 0x74
 8008d74:	da08      	bge.n	8008d88 <sniprintf+0x20>
 8008d76:	238b      	movs	r3, #139	; 0x8b
 8008d78:	602b      	str	r3, [r5, #0]
 8008d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d7e:	b01d      	add	sp, #116	; 0x74
 8008d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d84:	b002      	add	sp, #8
 8008d86:	4770      	bx	lr
 8008d88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d90:	bf14      	ite	ne
 8008d92:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008d96:	4623      	moveq	r3, r4
 8008d98:	9304      	str	r3, [sp, #16]
 8008d9a:	9307      	str	r3, [sp, #28]
 8008d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008da0:	9002      	str	r0, [sp, #8]
 8008da2:	9006      	str	r0, [sp, #24]
 8008da4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008da8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008daa:	ab21      	add	r3, sp, #132	; 0x84
 8008dac:	a902      	add	r1, sp, #8
 8008dae:	4628      	mov	r0, r5
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	f002 fc11 	bl	800b5d8 <_svfiprintf_r>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	bfbc      	itt	lt
 8008dba:	238b      	movlt	r3, #139	; 0x8b
 8008dbc:	602b      	strlt	r3, [r5, #0]
 8008dbe:	2c00      	cmp	r4, #0
 8008dc0:	d0dd      	beq.n	8008d7e <sniprintf+0x16>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	e7d9      	b.n	8008d7e <sniprintf+0x16>
 8008dca:	bf00      	nop
 8008dcc:	20000154 	.word	0x20000154

08008dd0 <siprintf>:
 8008dd0:	b40e      	push	{r1, r2, r3}
 8008dd2:	b500      	push	{lr}
 8008dd4:	b09c      	sub	sp, #112	; 0x70
 8008dd6:	ab1d      	add	r3, sp, #116	; 0x74
 8008dd8:	9002      	str	r0, [sp, #8]
 8008dda:	9006      	str	r0, [sp, #24]
 8008ddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008de0:	4809      	ldr	r0, [pc, #36]	; (8008e08 <siprintf+0x38>)
 8008de2:	9107      	str	r1, [sp, #28]
 8008de4:	9104      	str	r1, [sp, #16]
 8008de6:	4909      	ldr	r1, [pc, #36]	; (8008e0c <siprintf+0x3c>)
 8008de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dec:	9105      	str	r1, [sp, #20]
 8008dee:	6800      	ldr	r0, [r0, #0]
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	a902      	add	r1, sp, #8
 8008df4:	f002 fbf0 	bl	800b5d8 <_svfiprintf_r>
 8008df8:	9b02      	ldr	r3, [sp, #8]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
 8008dfe:	b01c      	add	sp, #112	; 0x70
 8008e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e04:	b003      	add	sp, #12
 8008e06:	4770      	bx	lr
 8008e08:	20000154 	.word	0x20000154
 8008e0c:	ffff0208 	.word	0xffff0208

08008e10 <__sread>:
 8008e10:	b510      	push	{r4, lr}
 8008e12:	460c      	mov	r4, r1
 8008e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e18:	f000 f86c 	bl	8008ef4 <_read_r>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	bfab      	itete	ge
 8008e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e22:	89a3      	ldrhlt	r3, [r4, #12]
 8008e24:	181b      	addge	r3, r3, r0
 8008e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e2a:	bfac      	ite	ge
 8008e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e2e:	81a3      	strhlt	r3, [r4, #12]
 8008e30:	bd10      	pop	{r4, pc}

08008e32 <__swrite>:
 8008e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e36:	461f      	mov	r7, r3
 8008e38:	898b      	ldrh	r3, [r1, #12]
 8008e3a:	05db      	lsls	r3, r3, #23
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4616      	mov	r6, r2
 8008e42:	d505      	bpl.n	8008e50 <__swrite+0x1e>
 8008e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e48:	2302      	movs	r3, #2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f000 f840 	bl	8008ed0 <_lseek_r>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	463b      	mov	r3, r7
 8008e60:	4628      	mov	r0, r5
 8008e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	f000 b857 	b.w	8008f18 <_write_r>

08008e6a <__sseek>:
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e72:	f000 f82d 	bl	8008ed0 <_lseek_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	bf15      	itete	ne
 8008e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e86:	81a3      	strheq	r3, [r4, #12]
 8008e88:	bf18      	it	ne
 8008e8a:	81a3      	strhne	r3, [r4, #12]
 8008e8c:	bd10      	pop	{r4, pc}

08008e8e <__sclose>:
 8008e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e92:	f000 b80d 	b.w	8008eb0 <_close_r>

08008e96 <memset>:
 8008e96:	4402      	add	r2, r0
 8008e98:	4603      	mov	r3, r0
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d100      	bne.n	8008ea0 <memset+0xa>
 8008e9e:	4770      	bx	lr
 8008ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea4:	e7f9      	b.n	8008e9a <memset+0x4>
	...

08008ea8 <_localeconv_r>:
 8008ea8:	4800      	ldr	r0, [pc, #0]	; (8008eac <_localeconv_r+0x4>)
 8008eaa:	4770      	bx	lr
 8008eac:	20000248 	.word	0x20000248

08008eb0 <_close_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d06      	ldr	r5, [pc, #24]	; (8008ecc <_close_r+0x1c>)
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	4604      	mov	r4, r0
 8008eb8:	4608      	mov	r0, r1
 8008eba:	602b      	str	r3, [r5, #0]
 8008ebc:	f7f8 fd7d 	bl	80019ba <_close>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_close_r+0x1a>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_close_r+0x1a>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20001834 	.word	0x20001834

08008ed0 <_lseek_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d07      	ldr	r5, [pc, #28]	; (8008ef0 <_lseek_r+0x20>)
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	4608      	mov	r0, r1
 8008ed8:	4611      	mov	r1, r2
 8008eda:	2200      	movs	r2, #0
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f7f8 fd92 	bl	8001a08 <_lseek>
 8008ee4:	1c43      	adds	r3, r0, #1
 8008ee6:	d102      	bne.n	8008eee <_lseek_r+0x1e>
 8008ee8:	682b      	ldr	r3, [r5, #0]
 8008eea:	b103      	cbz	r3, 8008eee <_lseek_r+0x1e>
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	bd38      	pop	{r3, r4, r5, pc}
 8008ef0:	20001834 	.word	0x20001834

08008ef4 <_read_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	; (8008f14 <_read_r+0x20>)
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	602a      	str	r2, [r5, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7f8 fd20 	bl	8001948 <_read>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_read_r+0x1e>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_read_r+0x1e>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	20001834 	.word	0x20001834

08008f18 <_write_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	; (8008f38 <_write_r+0x20>)
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	602a      	str	r2, [r5, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	f7f8 fd2b 	bl	8001982 <_write>
 8008f2c:	1c43      	adds	r3, r0, #1
 8008f2e:	d102      	bne.n	8008f36 <_write_r+0x1e>
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	b103      	cbz	r3, 8008f36 <_write_r+0x1e>
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	20001834 	.word	0x20001834

08008f3c <__errno>:
 8008f3c:	4b01      	ldr	r3, [pc, #4]	; (8008f44 <__errno+0x8>)
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20000154 	.word	0x20000154

08008f48 <__libc_init_array>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4d0d      	ldr	r5, [pc, #52]	; (8008f80 <__libc_init_array+0x38>)
 8008f4c:	4c0d      	ldr	r4, [pc, #52]	; (8008f84 <__libc_init_array+0x3c>)
 8008f4e:	1b64      	subs	r4, r4, r5
 8008f50:	10a4      	asrs	r4, r4, #2
 8008f52:	2600      	movs	r6, #0
 8008f54:	42a6      	cmp	r6, r4
 8008f56:	d109      	bne.n	8008f6c <__libc_init_array+0x24>
 8008f58:	4d0b      	ldr	r5, [pc, #44]	; (8008f88 <__libc_init_array+0x40>)
 8008f5a:	4c0c      	ldr	r4, [pc, #48]	; (8008f8c <__libc_init_array+0x44>)
 8008f5c:	f003 fbd8 	bl	800c710 <_init>
 8008f60:	1b64      	subs	r4, r4, r5
 8008f62:	10a4      	asrs	r4, r4, #2
 8008f64:	2600      	movs	r6, #0
 8008f66:	42a6      	cmp	r6, r4
 8008f68:	d105      	bne.n	8008f76 <__libc_init_array+0x2e>
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}
 8008f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f70:	4798      	blx	r3
 8008f72:	3601      	adds	r6, #1
 8008f74:	e7ee      	b.n	8008f54 <__libc_init_array+0xc>
 8008f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f7a:	4798      	blx	r3
 8008f7c:	3601      	adds	r6, #1
 8008f7e:	e7f2      	b.n	8008f66 <__libc_init_array+0x1e>
 8008f80:	0800cc00 	.word	0x0800cc00
 8008f84:	0800cc00 	.word	0x0800cc00
 8008f88:	0800cc00 	.word	0x0800cc00
 8008f8c:	0800cc04 	.word	0x0800cc04

08008f90 <__retarget_lock_init_recursive>:
 8008f90:	4770      	bx	lr

08008f92 <__retarget_lock_acquire_recursive>:
 8008f92:	4770      	bx	lr

08008f94 <__retarget_lock_release_recursive>:
 8008f94:	4770      	bx	lr
	...

08008f98 <nanf>:
 8008f98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008fa0 <nanf+0x8>
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	7fc00000 	.word	0x7fc00000

08008fa4 <quorem>:
 8008fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa8:	6903      	ldr	r3, [r0, #16]
 8008faa:	690c      	ldr	r4, [r1, #16]
 8008fac:	42a3      	cmp	r3, r4
 8008fae:	4607      	mov	r7, r0
 8008fb0:	db7e      	blt.n	80090b0 <quorem+0x10c>
 8008fb2:	3c01      	subs	r4, #1
 8008fb4:	f101 0814 	add.w	r8, r1, #20
 8008fb8:	f100 0514 	add.w	r5, r0, #20
 8008fbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fda:	d331      	bcc.n	8009040 <quorem+0x9c>
 8008fdc:	f04f 0e00 	mov.w	lr, #0
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	46ac      	mov	ip, r5
 8008fe4:	46f2      	mov	sl, lr
 8008fe6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fea:	b293      	uxth	r3, r2
 8008fec:	fb06 e303 	mla	r3, r6, r3, lr
 8008ff0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ff4:	0c1a      	lsrs	r2, r3, #16
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	ebaa 0303 	sub.w	r3, sl, r3
 8008ffc:	f8dc a000 	ldr.w	sl, [ip]
 8009000:	fa13 f38a 	uxtah	r3, r3, sl
 8009004:	fb06 220e 	mla	r2, r6, lr, r2
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	9b00      	ldr	r3, [sp, #0]
 800900c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009010:	b292      	uxth	r2, r2
 8009012:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009016:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800901a:	f8bd 3000 	ldrh.w	r3, [sp]
 800901e:	4581      	cmp	r9, r0
 8009020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009024:	f84c 3b04 	str.w	r3, [ip], #4
 8009028:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800902c:	d2db      	bcs.n	8008fe6 <quorem+0x42>
 800902e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009032:	b92b      	cbnz	r3, 8009040 <quorem+0x9c>
 8009034:	9b01      	ldr	r3, [sp, #4]
 8009036:	3b04      	subs	r3, #4
 8009038:	429d      	cmp	r5, r3
 800903a:	461a      	mov	r2, r3
 800903c:	d32c      	bcc.n	8009098 <quorem+0xf4>
 800903e:	613c      	str	r4, [r7, #16]
 8009040:	4638      	mov	r0, r7
 8009042:	f001 f9f1 	bl	800a428 <__mcmp>
 8009046:	2800      	cmp	r0, #0
 8009048:	db22      	blt.n	8009090 <quorem+0xec>
 800904a:	3601      	adds	r6, #1
 800904c:	4629      	mov	r1, r5
 800904e:	2000      	movs	r0, #0
 8009050:	f858 2b04 	ldr.w	r2, [r8], #4
 8009054:	f8d1 c000 	ldr.w	ip, [r1]
 8009058:	b293      	uxth	r3, r2
 800905a:	1ac3      	subs	r3, r0, r3
 800905c:	0c12      	lsrs	r2, r2, #16
 800905e:	fa13 f38c 	uxtah	r3, r3, ip
 8009062:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009066:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800906a:	b29b      	uxth	r3, r3
 800906c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009070:	45c1      	cmp	r9, r8
 8009072:	f841 3b04 	str.w	r3, [r1], #4
 8009076:	ea4f 4022 	mov.w	r0, r2, asr #16
 800907a:	d2e9      	bcs.n	8009050 <quorem+0xac>
 800907c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009080:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009084:	b922      	cbnz	r2, 8009090 <quorem+0xec>
 8009086:	3b04      	subs	r3, #4
 8009088:	429d      	cmp	r5, r3
 800908a:	461a      	mov	r2, r3
 800908c:	d30a      	bcc.n	80090a4 <quorem+0x100>
 800908e:	613c      	str	r4, [r7, #16]
 8009090:	4630      	mov	r0, r6
 8009092:	b003      	add	sp, #12
 8009094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009098:	6812      	ldr	r2, [r2, #0]
 800909a:	3b04      	subs	r3, #4
 800909c:	2a00      	cmp	r2, #0
 800909e:	d1ce      	bne.n	800903e <quorem+0x9a>
 80090a0:	3c01      	subs	r4, #1
 80090a2:	e7c9      	b.n	8009038 <quorem+0x94>
 80090a4:	6812      	ldr	r2, [r2, #0]
 80090a6:	3b04      	subs	r3, #4
 80090a8:	2a00      	cmp	r2, #0
 80090aa:	d1f0      	bne.n	800908e <quorem+0xea>
 80090ac:	3c01      	subs	r4, #1
 80090ae:	e7eb      	b.n	8009088 <quorem+0xe4>
 80090b0:	2000      	movs	r0, #0
 80090b2:	e7ee      	b.n	8009092 <quorem+0xee>
 80090b4:	0000      	movs	r0, r0
	...

080090b8 <_dtoa_r>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	ed2d 8b04 	vpush	{d8-d9}
 80090c0:	69c5      	ldr	r5, [r0, #28]
 80090c2:	b093      	sub	sp, #76	; 0x4c
 80090c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090c8:	ec57 6b10 	vmov	r6, r7, d0
 80090cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090d0:	9107      	str	r1, [sp, #28]
 80090d2:	4604      	mov	r4, r0
 80090d4:	920a      	str	r2, [sp, #40]	; 0x28
 80090d6:	930d      	str	r3, [sp, #52]	; 0x34
 80090d8:	b975      	cbnz	r5, 80090f8 <_dtoa_r+0x40>
 80090da:	2010      	movs	r0, #16
 80090dc:	f000 fe2a 	bl	8009d34 <malloc>
 80090e0:	4602      	mov	r2, r0
 80090e2:	61e0      	str	r0, [r4, #28]
 80090e4:	b920      	cbnz	r0, 80090f0 <_dtoa_r+0x38>
 80090e6:	4bae      	ldr	r3, [pc, #696]	; (80093a0 <_dtoa_r+0x2e8>)
 80090e8:	21ef      	movs	r1, #239	; 0xef
 80090ea:	48ae      	ldr	r0, [pc, #696]	; (80093a4 <_dtoa_r+0x2ec>)
 80090ec:	f002 fc74 	bl	800b9d8 <__assert_func>
 80090f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090f4:	6005      	str	r5, [r0, #0]
 80090f6:	60c5      	str	r5, [r0, #12]
 80090f8:	69e3      	ldr	r3, [r4, #28]
 80090fa:	6819      	ldr	r1, [r3, #0]
 80090fc:	b151      	cbz	r1, 8009114 <_dtoa_r+0x5c>
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	604a      	str	r2, [r1, #4]
 8009102:	2301      	movs	r3, #1
 8009104:	4093      	lsls	r3, r2
 8009106:	608b      	str	r3, [r1, #8]
 8009108:	4620      	mov	r0, r4
 800910a:	f000 ff07 	bl	8009f1c <_Bfree>
 800910e:	69e3      	ldr	r3, [r4, #28]
 8009110:	2200      	movs	r2, #0
 8009112:	601a      	str	r2, [r3, #0]
 8009114:	1e3b      	subs	r3, r7, #0
 8009116:	bfbb      	ittet	lt
 8009118:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800911c:	9303      	strlt	r3, [sp, #12]
 800911e:	2300      	movge	r3, #0
 8009120:	2201      	movlt	r2, #1
 8009122:	bfac      	ite	ge
 8009124:	f8c8 3000 	strge.w	r3, [r8]
 8009128:	f8c8 2000 	strlt.w	r2, [r8]
 800912c:	4b9e      	ldr	r3, [pc, #632]	; (80093a8 <_dtoa_r+0x2f0>)
 800912e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009132:	ea33 0308 	bics.w	r3, r3, r8
 8009136:	d11b      	bne.n	8009170 <_dtoa_r+0xb8>
 8009138:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800913a:	f242 730f 	movw	r3, #9999	; 0x270f
 800913e:	6013      	str	r3, [r2, #0]
 8009140:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009144:	4333      	orrs	r3, r6
 8009146:	f000 8593 	beq.w	8009c70 <_dtoa_r+0xbb8>
 800914a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800914c:	b963      	cbnz	r3, 8009168 <_dtoa_r+0xb0>
 800914e:	4b97      	ldr	r3, [pc, #604]	; (80093ac <_dtoa_r+0x2f4>)
 8009150:	e027      	b.n	80091a2 <_dtoa_r+0xea>
 8009152:	4b97      	ldr	r3, [pc, #604]	; (80093b0 <_dtoa_r+0x2f8>)
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	3308      	adds	r3, #8
 8009158:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	9800      	ldr	r0, [sp, #0]
 800915e:	b013      	add	sp, #76	; 0x4c
 8009160:	ecbd 8b04 	vpop	{d8-d9}
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	4b90      	ldr	r3, [pc, #576]	; (80093ac <_dtoa_r+0x2f4>)
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	3303      	adds	r3, #3
 800916e:	e7f3      	b.n	8009158 <_dtoa_r+0xa0>
 8009170:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009174:	2200      	movs	r2, #0
 8009176:	ec51 0b17 	vmov	r0, r1, d7
 800917a:	eeb0 8a47 	vmov.f32	s16, s14
 800917e:	eef0 8a67 	vmov.f32	s17, s15
 8009182:	2300      	movs	r3, #0
 8009184:	f7f7 fca8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009188:	4681      	mov	r9, r0
 800918a:	b160      	cbz	r0, 80091a6 <_dtoa_r+0xee>
 800918c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800918e:	2301      	movs	r3, #1
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8568 	beq.w	8009c6a <_dtoa_r+0xbb2>
 800919a:	4b86      	ldr	r3, [pc, #536]	; (80093b4 <_dtoa_r+0x2fc>)
 800919c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	9300      	str	r3, [sp, #0]
 80091a4:	e7da      	b.n	800915c <_dtoa_r+0xa4>
 80091a6:	aa10      	add	r2, sp, #64	; 0x40
 80091a8:	a911      	add	r1, sp, #68	; 0x44
 80091aa:	4620      	mov	r0, r4
 80091ac:	eeb0 0a48 	vmov.f32	s0, s16
 80091b0:	eef0 0a68 	vmov.f32	s1, s17
 80091b4:	f001 fa4e 	bl	800a654 <__d2b>
 80091b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80091bc:	4682      	mov	sl, r0
 80091be:	2d00      	cmp	r5, #0
 80091c0:	d07f      	beq.n	80092c2 <_dtoa_r+0x20a>
 80091c2:	ee18 3a90 	vmov	r3, s17
 80091c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80091ce:	ec51 0b18 	vmov	r0, r1, d8
 80091d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80091de:	4619      	mov	r1, r3
 80091e0:	2200      	movs	r2, #0
 80091e2:	4b75      	ldr	r3, [pc, #468]	; (80093b8 <_dtoa_r+0x300>)
 80091e4:	f7f7 f858 	bl	8000298 <__aeabi_dsub>
 80091e8:	a367      	add	r3, pc, #412	; (adr r3, 8009388 <_dtoa_r+0x2d0>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	f7f7 fa0b 	bl	8000608 <__aeabi_dmul>
 80091f2:	a367      	add	r3, pc, #412	; (adr r3, 8009390 <_dtoa_r+0x2d8>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 f850 	bl	800029c <__adddf3>
 80091fc:	4606      	mov	r6, r0
 80091fe:	4628      	mov	r0, r5
 8009200:	460f      	mov	r7, r1
 8009202:	f7f7 f997 	bl	8000534 <__aeabi_i2d>
 8009206:	a364      	add	r3, pc, #400	; (adr r3, 8009398 <_dtoa_r+0x2e0>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f7f7 f9fc 	bl	8000608 <__aeabi_dmul>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f7f7 f840 	bl	800029c <__adddf3>
 800921c:	4606      	mov	r6, r0
 800921e:	460f      	mov	r7, r1
 8009220:	f7f7 fca2 	bl	8000b68 <__aeabi_d2iz>
 8009224:	2200      	movs	r2, #0
 8009226:	4683      	mov	fp, r0
 8009228:	2300      	movs	r3, #0
 800922a:	4630      	mov	r0, r6
 800922c:	4639      	mov	r1, r7
 800922e:	f7f7 fc5d 	bl	8000aec <__aeabi_dcmplt>
 8009232:	b148      	cbz	r0, 8009248 <_dtoa_r+0x190>
 8009234:	4658      	mov	r0, fp
 8009236:	f7f7 f97d 	bl	8000534 <__aeabi_i2d>
 800923a:	4632      	mov	r2, r6
 800923c:	463b      	mov	r3, r7
 800923e:	f7f7 fc4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009242:	b908      	cbnz	r0, 8009248 <_dtoa_r+0x190>
 8009244:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009248:	f1bb 0f16 	cmp.w	fp, #22
 800924c:	d857      	bhi.n	80092fe <_dtoa_r+0x246>
 800924e:	4b5b      	ldr	r3, [pc, #364]	; (80093bc <_dtoa_r+0x304>)
 8009250:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	ec51 0b18 	vmov	r0, r1, d8
 800925c:	f7f7 fc46 	bl	8000aec <__aeabi_dcmplt>
 8009260:	2800      	cmp	r0, #0
 8009262:	d04e      	beq.n	8009302 <_dtoa_r+0x24a>
 8009264:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009268:	2300      	movs	r3, #0
 800926a:	930c      	str	r3, [sp, #48]	; 0x30
 800926c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800926e:	1b5b      	subs	r3, r3, r5
 8009270:	1e5a      	subs	r2, r3, #1
 8009272:	bf45      	ittet	mi
 8009274:	f1c3 0301 	rsbmi	r3, r3, #1
 8009278:	9305      	strmi	r3, [sp, #20]
 800927a:	2300      	movpl	r3, #0
 800927c:	2300      	movmi	r3, #0
 800927e:	9206      	str	r2, [sp, #24]
 8009280:	bf54      	ite	pl
 8009282:	9305      	strpl	r3, [sp, #20]
 8009284:	9306      	strmi	r3, [sp, #24]
 8009286:	f1bb 0f00 	cmp.w	fp, #0
 800928a:	db3c      	blt.n	8009306 <_dtoa_r+0x24e>
 800928c:	9b06      	ldr	r3, [sp, #24]
 800928e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009292:	445b      	add	r3, fp
 8009294:	9306      	str	r3, [sp, #24]
 8009296:	2300      	movs	r3, #0
 8009298:	9308      	str	r3, [sp, #32]
 800929a:	9b07      	ldr	r3, [sp, #28]
 800929c:	2b09      	cmp	r3, #9
 800929e:	d868      	bhi.n	8009372 <_dtoa_r+0x2ba>
 80092a0:	2b05      	cmp	r3, #5
 80092a2:	bfc4      	itt	gt
 80092a4:	3b04      	subgt	r3, #4
 80092a6:	9307      	strgt	r3, [sp, #28]
 80092a8:	9b07      	ldr	r3, [sp, #28]
 80092aa:	f1a3 0302 	sub.w	r3, r3, #2
 80092ae:	bfcc      	ite	gt
 80092b0:	2500      	movgt	r5, #0
 80092b2:	2501      	movle	r5, #1
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	f200 8085 	bhi.w	80093c4 <_dtoa_r+0x30c>
 80092ba:	e8df f003 	tbb	[pc, r3]
 80092be:	3b2e      	.short	0x3b2e
 80092c0:	5839      	.short	0x5839
 80092c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092c6:	441d      	add	r5, r3
 80092c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	bfc1      	itttt	gt
 80092d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80092d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80092dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80092e0:	bfd6      	itet	le
 80092e2:	f1c3 0320 	rsble	r3, r3, #32
 80092e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80092ea:	fa06 f003 	lslle.w	r0, r6, r3
 80092ee:	f7f7 f911 	bl	8000514 <__aeabi_ui2d>
 80092f2:	2201      	movs	r2, #1
 80092f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80092f8:	3d01      	subs	r5, #1
 80092fa:	920e      	str	r2, [sp, #56]	; 0x38
 80092fc:	e76f      	b.n	80091de <_dtoa_r+0x126>
 80092fe:	2301      	movs	r3, #1
 8009300:	e7b3      	b.n	800926a <_dtoa_r+0x1b2>
 8009302:	900c      	str	r0, [sp, #48]	; 0x30
 8009304:	e7b2      	b.n	800926c <_dtoa_r+0x1b4>
 8009306:	9b05      	ldr	r3, [sp, #20]
 8009308:	eba3 030b 	sub.w	r3, r3, fp
 800930c:	9305      	str	r3, [sp, #20]
 800930e:	f1cb 0300 	rsb	r3, fp, #0
 8009312:	9308      	str	r3, [sp, #32]
 8009314:	2300      	movs	r3, #0
 8009316:	930b      	str	r3, [sp, #44]	; 0x2c
 8009318:	e7bf      	b.n	800929a <_dtoa_r+0x1e2>
 800931a:	2300      	movs	r3, #0
 800931c:	9309      	str	r3, [sp, #36]	; 0x24
 800931e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009320:	2b00      	cmp	r3, #0
 8009322:	dc52      	bgt.n	80093ca <_dtoa_r+0x312>
 8009324:	2301      	movs	r3, #1
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	461a      	mov	r2, r3
 800932c:	920a      	str	r2, [sp, #40]	; 0x28
 800932e:	e00b      	b.n	8009348 <_dtoa_r+0x290>
 8009330:	2301      	movs	r3, #1
 8009332:	e7f3      	b.n	800931c <_dtoa_r+0x264>
 8009334:	2300      	movs	r3, #0
 8009336:	9309      	str	r3, [sp, #36]	; 0x24
 8009338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933a:	445b      	add	r3, fp
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	3301      	adds	r3, #1
 8009340:	2b01      	cmp	r3, #1
 8009342:	9304      	str	r3, [sp, #16]
 8009344:	bfb8      	it	lt
 8009346:	2301      	movlt	r3, #1
 8009348:	69e0      	ldr	r0, [r4, #28]
 800934a:	2100      	movs	r1, #0
 800934c:	2204      	movs	r2, #4
 800934e:	f102 0614 	add.w	r6, r2, #20
 8009352:	429e      	cmp	r6, r3
 8009354:	d93d      	bls.n	80093d2 <_dtoa_r+0x31a>
 8009356:	6041      	str	r1, [r0, #4]
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fd9f 	bl	8009e9c <_Balloc>
 800935e:	9000      	str	r0, [sp, #0]
 8009360:	2800      	cmp	r0, #0
 8009362:	d139      	bne.n	80093d8 <_dtoa_r+0x320>
 8009364:	4b16      	ldr	r3, [pc, #88]	; (80093c0 <_dtoa_r+0x308>)
 8009366:	4602      	mov	r2, r0
 8009368:	f240 11af 	movw	r1, #431	; 0x1af
 800936c:	e6bd      	b.n	80090ea <_dtoa_r+0x32>
 800936e:	2301      	movs	r3, #1
 8009370:	e7e1      	b.n	8009336 <_dtoa_r+0x27e>
 8009372:	2501      	movs	r5, #1
 8009374:	2300      	movs	r3, #0
 8009376:	9307      	str	r3, [sp, #28]
 8009378:	9509      	str	r5, [sp, #36]	; 0x24
 800937a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	2200      	movs	r2, #0
 8009384:	2312      	movs	r3, #18
 8009386:	e7d1      	b.n	800932c <_dtoa_r+0x274>
 8009388:	636f4361 	.word	0x636f4361
 800938c:	3fd287a7 	.word	0x3fd287a7
 8009390:	8b60c8b3 	.word	0x8b60c8b3
 8009394:	3fc68a28 	.word	0x3fc68a28
 8009398:	509f79fb 	.word	0x509f79fb
 800939c:	3fd34413 	.word	0x3fd34413
 80093a0:	0800c816 	.word	0x0800c816
 80093a4:	0800c82d 	.word	0x0800c82d
 80093a8:	7ff00000 	.word	0x7ff00000
 80093ac:	0800c812 	.word	0x0800c812
 80093b0:	0800c809 	.word	0x0800c809
 80093b4:	0800c7e1 	.word	0x0800c7e1
 80093b8:	3ff80000 	.word	0x3ff80000
 80093bc:	0800c918 	.word	0x0800c918
 80093c0:	0800c885 	.word	0x0800c885
 80093c4:	2301      	movs	r3, #1
 80093c6:	9309      	str	r3, [sp, #36]	; 0x24
 80093c8:	e7d7      	b.n	800937a <_dtoa_r+0x2c2>
 80093ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093cc:	9301      	str	r3, [sp, #4]
 80093ce:	9304      	str	r3, [sp, #16]
 80093d0:	e7ba      	b.n	8009348 <_dtoa_r+0x290>
 80093d2:	3101      	adds	r1, #1
 80093d4:	0052      	lsls	r2, r2, #1
 80093d6:	e7ba      	b.n	800934e <_dtoa_r+0x296>
 80093d8:	69e3      	ldr	r3, [r4, #28]
 80093da:	9a00      	ldr	r2, [sp, #0]
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	2b0e      	cmp	r3, #14
 80093e2:	f200 80a8 	bhi.w	8009536 <_dtoa_r+0x47e>
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	f000 80a5 	beq.w	8009536 <_dtoa_r+0x47e>
 80093ec:	f1bb 0f00 	cmp.w	fp, #0
 80093f0:	dd38      	ble.n	8009464 <_dtoa_r+0x3ac>
 80093f2:	4bc0      	ldr	r3, [pc, #768]	; (80096f4 <_dtoa_r+0x63c>)
 80093f4:	f00b 020f 	and.w	r2, fp, #15
 80093f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009400:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009404:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009408:	d019      	beq.n	800943e <_dtoa_r+0x386>
 800940a:	4bbb      	ldr	r3, [pc, #748]	; (80096f8 <_dtoa_r+0x640>)
 800940c:	ec51 0b18 	vmov	r0, r1, d8
 8009410:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009414:	f7f7 fa22 	bl	800085c <__aeabi_ddiv>
 8009418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800941c:	f008 080f 	and.w	r8, r8, #15
 8009420:	2503      	movs	r5, #3
 8009422:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80096f8 <_dtoa_r+0x640>
 8009426:	f1b8 0f00 	cmp.w	r8, #0
 800942a:	d10a      	bne.n	8009442 <_dtoa_r+0x38a>
 800942c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009430:	4632      	mov	r2, r6
 8009432:	463b      	mov	r3, r7
 8009434:	f7f7 fa12 	bl	800085c <__aeabi_ddiv>
 8009438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800943c:	e02b      	b.n	8009496 <_dtoa_r+0x3de>
 800943e:	2502      	movs	r5, #2
 8009440:	e7ef      	b.n	8009422 <_dtoa_r+0x36a>
 8009442:	f018 0f01 	tst.w	r8, #1
 8009446:	d008      	beq.n	800945a <_dtoa_r+0x3a2>
 8009448:	4630      	mov	r0, r6
 800944a:	4639      	mov	r1, r7
 800944c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009450:	f7f7 f8da 	bl	8000608 <__aeabi_dmul>
 8009454:	3501      	adds	r5, #1
 8009456:	4606      	mov	r6, r0
 8009458:	460f      	mov	r7, r1
 800945a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800945e:	f109 0908 	add.w	r9, r9, #8
 8009462:	e7e0      	b.n	8009426 <_dtoa_r+0x36e>
 8009464:	f000 809f 	beq.w	80095a6 <_dtoa_r+0x4ee>
 8009468:	f1cb 0600 	rsb	r6, fp, #0
 800946c:	4ba1      	ldr	r3, [pc, #644]	; (80096f4 <_dtoa_r+0x63c>)
 800946e:	4fa2      	ldr	r7, [pc, #648]	; (80096f8 <_dtoa_r+0x640>)
 8009470:	f006 020f 	and.w	r2, r6, #15
 8009474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	ec51 0b18 	vmov	r0, r1, d8
 8009480:	f7f7 f8c2 	bl	8000608 <__aeabi_dmul>
 8009484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009488:	1136      	asrs	r6, r6, #4
 800948a:	2300      	movs	r3, #0
 800948c:	2502      	movs	r5, #2
 800948e:	2e00      	cmp	r6, #0
 8009490:	d17e      	bne.n	8009590 <_dtoa_r+0x4d8>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1d0      	bne.n	8009438 <_dtoa_r+0x380>
 8009496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009498:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 8084 	beq.w	80095aa <_dtoa_r+0x4f2>
 80094a2:	4b96      	ldr	r3, [pc, #600]	; (80096fc <_dtoa_r+0x644>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	4640      	mov	r0, r8
 80094a8:	4649      	mov	r1, r9
 80094aa:	f7f7 fb1f 	bl	8000aec <__aeabi_dcmplt>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d07b      	beq.n	80095aa <_dtoa_r+0x4f2>
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d078      	beq.n	80095aa <_dtoa_r+0x4f2>
 80094b8:	9b01      	ldr	r3, [sp, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dd39      	ble.n	8009532 <_dtoa_r+0x47a>
 80094be:	4b90      	ldr	r3, [pc, #576]	; (8009700 <_dtoa_r+0x648>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f7 f89f 	bl	8000608 <__aeabi_dmul>
 80094ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ce:	9e01      	ldr	r6, [sp, #4]
 80094d0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80094d4:	3501      	adds	r5, #1
 80094d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094da:	4628      	mov	r0, r5
 80094dc:	f7f7 f82a 	bl	8000534 <__aeabi_i2d>
 80094e0:	4642      	mov	r2, r8
 80094e2:	464b      	mov	r3, r9
 80094e4:	f7f7 f890 	bl	8000608 <__aeabi_dmul>
 80094e8:	4b86      	ldr	r3, [pc, #536]	; (8009704 <_dtoa_r+0x64c>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	f7f6 fed6 	bl	800029c <__adddf3>
 80094f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80094f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094f8:	9303      	str	r3, [sp, #12]
 80094fa:	2e00      	cmp	r6, #0
 80094fc:	d158      	bne.n	80095b0 <_dtoa_r+0x4f8>
 80094fe:	4b82      	ldr	r3, [pc, #520]	; (8009708 <_dtoa_r+0x650>)
 8009500:	2200      	movs	r2, #0
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f7f6 fec7 	bl	8000298 <__aeabi_dsub>
 800950a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800950e:	4680      	mov	r8, r0
 8009510:	4689      	mov	r9, r1
 8009512:	f7f7 fb09 	bl	8000b28 <__aeabi_dcmpgt>
 8009516:	2800      	cmp	r0, #0
 8009518:	f040 8296 	bne.w	8009a48 <_dtoa_r+0x990>
 800951c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009520:	4640      	mov	r0, r8
 8009522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009526:	4649      	mov	r1, r9
 8009528:	f7f7 fae0 	bl	8000aec <__aeabi_dcmplt>
 800952c:	2800      	cmp	r0, #0
 800952e:	f040 8289 	bne.w	8009a44 <_dtoa_r+0x98c>
 8009532:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009538:	2b00      	cmp	r3, #0
 800953a:	f2c0 814e 	blt.w	80097da <_dtoa_r+0x722>
 800953e:	f1bb 0f0e 	cmp.w	fp, #14
 8009542:	f300 814a 	bgt.w	80097da <_dtoa_r+0x722>
 8009546:	4b6b      	ldr	r3, [pc, #428]	; (80096f4 <_dtoa_r+0x63c>)
 8009548:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800954c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009552:	2b00      	cmp	r3, #0
 8009554:	f280 80dc 	bge.w	8009710 <_dtoa_r+0x658>
 8009558:	9b04      	ldr	r3, [sp, #16]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f300 80d8 	bgt.w	8009710 <_dtoa_r+0x658>
 8009560:	f040 826f 	bne.w	8009a42 <_dtoa_r+0x98a>
 8009564:	4b68      	ldr	r3, [pc, #416]	; (8009708 <_dtoa_r+0x650>)
 8009566:	2200      	movs	r2, #0
 8009568:	4640      	mov	r0, r8
 800956a:	4649      	mov	r1, r9
 800956c:	f7f7 f84c 	bl	8000608 <__aeabi_dmul>
 8009570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009574:	f7f7 face 	bl	8000b14 <__aeabi_dcmpge>
 8009578:	9e04      	ldr	r6, [sp, #16]
 800957a:	4637      	mov	r7, r6
 800957c:	2800      	cmp	r0, #0
 800957e:	f040 8245 	bne.w	8009a0c <_dtoa_r+0x954>
 8009582:	9d00      	ldr	r5, [sp, #0]
 8009584:	2331      	movs	r3, #49	; 0x31
 8009586:	f805 3b01 	strb.w	r3, [r5], #1
 800958a:	f10b 0b01 	add.w	fp, fp, #1
 800958e:	e241      	b.n	8009a14 <_dtoa_r+0x95c>
 8009590:	07f2      	lsls	r2, r6, #31
 8009592:	d505      	bpl.n	80095a0 <_dtoa_r+0x4e8>
 8009594:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009598:	f7f7 f836 	bl	8000608 <__aeabi_dmul>
 800959c:	3501      	adds	r5, #1
 800959e:	2301      	movs	r3, #1
 80095a0:	1076      	asrs	r6, r6, #1
 80095a2:	3708      	adds	r7, #8
 80095a4:	e773      	b.n	800948e <_dtoa_r+0x3d6>
 80095a6:	2502      	movs	r5, #2
 80095a8:	e775      	b.n	8009496 <_dtoa_r+0x3de>
 80095aa:	9e04      	ldr	r6, [sp, #16]
 80095ac:	465f      	mov	r7, fp
 80095ae:	e792      	b.n	80094d6 <_dtoa_r+0x41e>
 80095b0:	9900      	ldr	r1, [sp, #0]
 80095b2:	4b50      	ldr	r3, [pc, #320]	; (80096f4 <_dtoa_r+0x63c>)
 80095b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095b8:	4431      	add	r1, r6
 80095ba:	9102      	str	r1, [sp, #8]
 80095bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095be:	eeb0 9a47 	vmov.f32	s18, s14
 80095c2:	eef0 9a67 	vmov.f32	s19, s15
 80095c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095ce:	2900      	cmp	r1, #0
 80095d0:	d044      	beq.n	800965c <_dtoa_r+0x5a4>
 80095d2:	494e      	ldr	r1, [pc, #312]	; (800970c <_dtoa_r+0x654>)
 80095d4:	2000      	movs	r0, #0
 80095d6:	f7f7 f941 	bl	800085c <__aeabi_ddiv>
 80095da:	ec53 2b19 	vmov	r2, r3, d9
 80095de:	f7f6 fe5b 	bl	8000298 <__aeabi_dsub>
 80095e2:	9d00      	ldr	r5, [sp, #0]
 80095e4:	ec41 0b19 	vmov	d9, r0, r1
 80095e8:	4649      	mov	r1, r9
 80095ea:	4640      	mov	r0, r8
 80095ec:	f7f7 fabc 	bl	8000b68 <__aeabi_d2iz>
 80095f0:	4606      	mov	r6, r0
 80095f2:	f7f6 ff9f 	bl	8000534 <__aeabi_i2d>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	4640      	mov	r0, r8
 80095fc:	4649      	mov	r1, r9
 80095fe:	f7f6 fe4b 	bl	8000298 <__aeabi_dsub>
 8009602:	3630      	adds	r6, #48	; 0x30
 8009604:	f805 6b01 	strb.w	r6, [r5], #1
 8009608:	ec53 2b19 	vmov	r2, r3, d9
 800960c:	4680      	mov	r8, r0
 800960e:	4689      	mov	r9, r1
 8009610:	f7f7 fa6c 	bl	8000aec <__aeabi_dcmplt>
 8009614:	2800      	cmp	r0, #0
 8009616:	d164      	bne.n	80096e2 <_dtoa_r+0x62a>
 8009618:	4642      	mov	r2, r8
 800961a:	464b      	mov	r3, r9
 800961c:	4937      	ldr	r1, [pc, #220]	; (80096fc <_dtoa_r+0x644>)
 800961e:	2000      	movs	r0, #0
 8009620:	f7f6 fe3a 	bl	8000298 <__aeabi_dsub>
 8009624:	ec53 2b19 	vmov	r2, r3, d9
 8009628:	f7f7 fa60 	bl	8000aec <__aeabi_dcmplt>
 800962c:	2800      	cmp	r0, #0
 800962e:	f040 80b6 	bne.w	800979e <_dtoa_r+0x6e6>
 8009632:	9b02      	ldr	r3, [sp, #8]
 8009634:	429d      	cmp	r5, r3
 8009636:	f43f af7c 	beq.w	8009532 <_dtoa_r+0x47a>
 800963a:	4b31      	ldr	r3, [pc, #196]	; (8009700 <_dtoa_r+0x648>)
 800963c:	ec51 0b19 	vmov	r0, r1, d9
 8009640:	2200      	movs	r2, #0
 8009642:	f7f6 ffe1 	bl	8000608 <__aeabi_dmul>
 8009646:	4b2e      	ldr	r3, [pc, #184]	; (8009700 <_dtoa_r+0x648>)
 8009648:	ec41 0b19 	vmov	d9, r0, r1
 800964c:	2200      	movs	r2, #0
 800964e:	4640      	mov	r0, r8
 8009650:	4649      	mov	r1, r9
 8009652:	f7f6 ffd9 	bl	8000608 <__aeabi_dmul>
 8009656:	4680      	mov	r8, r0
 8009658:	4689      	mov	r9, r1
 800965a:	e7c5      	b.n	80095e8 <_dtoa_r+0x530>
 800965c:	ec51 0b17 	vmov	r0, r1, d7
 8009660:	f7f6 ffd2 	bl	8000608 <__aeabi_dmul>
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	9d00      	ldr	r5, [sp, #0]
 8009668:	930f      	str	r3, [sp, #60]	; 0x3c
 800966a:	ec41 0b19 	vmov	d9, r0, r1
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	f7f7 fa79 	bl	8000b68 <__aeabi_d2iz>
 8009676:	4606      	mov	r6, r0
 8009678:	f7f6 ff5c 	bl	8000534 <__aeabi_i2d>
 800967c:	3630      	adds	r6, #48	; 0x30
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	4640      	mov	r0, r8
 8009684:	4649      	mov	r1, r9
 8009686:	f7f6 fe07 	bl	8000298 <__aeabi_dsub>
 800968a:	f805 6b01 	strb.w	r6, [r5], #1
 800968e:	9b02      	ldr	r3, [sp, #8]
 8009690:	429d      	cmp	r5, r3
 8009692:	4680      	mov	r8, r0
 8009694:	4689      	mov	r9, r1
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	d124      	bne.n	80096e6 <_dtoa_r+0x62e>
 800969c:	4b1b      	ldr	r3, [pc, #108]	; (800970c <_dtoa_r+0x654>)
 800969e:	ec51 0b19 	vmov	r0, r1, d9
 80096a2:	f7f6 fdfb 	bl	800029c <__adddf3>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4640      	mov	r0, r8
 80096ac:	4649      	mov	r1, r9
 80096ae:	f7f7 fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d173      	bne.n	800979e <_dtoa_r+0x6e6>
 80096b6:	ec53 2b19 	vmov	r2, r3, d9
 80096ba:	4914      	ldr	r1, [pc, #80]	; (800970c <_dtoa_r+0x654>)
 80096bc:	2000      	movs	r0, #0
 80096be:	f7f6 fdeb 	bl	8000298 <__aeabi_dsub>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4640      	mov	r0, r8
 80096c8:	4649      	mov	r1, r9
 80096ca:	f7f7 fa0f 	bl	8000aec <__aeabi_dcmplt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f43f af2f 	beq.w	8009532 <_dtoa_r+0x47a>
 80096d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096d6:	1e6b      	subs	r3, r5, #1
 80096d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80096da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096de:	2b30      	cmp	r3, #48	; 0x30
 80096e0:	d0f8      	beq.n	80096d4 <_dtoa_r+0x61c>
 80096e2:	46bb      	mov	fp, r7
 80096e4:	e04a      	b.n	800977c <_dtoa_r+0x6c4>
 80096e6:	4b06      	ldr	r3, [pc, #24]	; (8009700 <_dtoa_r+0x648>)
 80096e8:	f7f6 ff8e 	bl	8000608 <__aeabi_dmul>
 80096ec:	4680      	mov	r8, r0
 80096ee:	4689      	mov	r9, r1
 80096f0:	e7bd      	b.n	800966e <_dtoa_r+0x5b6>
 80096f2:	bf00      	nop
 80096f4:	0800c918 	.word	0x0800c918
 80096f8:	0800c8f0 	.word	0x0800c8f0
 80096fc:	3ff00000 	.word	0x3ff00000
 8009700:	40240000 	.word	0x40240000
 8009704:	401c0000 	.word	0x401c0000
 8009708:	40140000 	.word	0x40140000
 800970c:	3fe00000 	.word	0x3fe00000
 8009710:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009714:	9d00      	ldr	r5, [sp, #0]
 8009716:	4642      	mov	r2, r8
 8009718:	464b      	mov	r3, r9
 800971a:	4630      	mov	r0, r6
 800971c:	4639      	mov	r1, r7
 800971e:	f7f7 f89d 	bl	800085c <__aeabi_ddiv>
 8009722:	f7f7 fa21 	bl	8000b68 <__aeabi_d2iz>
 8009726:	9001      	str	r0, [sp, #4]
 8009728:	f7f6 ff04 	bl	8000534 <__aeabi_i2d>
 800972c:	4642      	mov	r2, r8
 800972e:	464b      	mov	r3, r9
 8009730:	f7f6 ff6a 	bl	8000608 <__aeabi_dmul>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	4630      	mov	r0, r6
 800973a:	4639      	mov	r1, r7
 800973c:	f7f6 fdac 	bl	8000298 <__aeabi_dsub>
 8009740:	9e01      	ldr	r6, [sp, #4]
 8009742:	9f04      	ldr	r7, [sp, #16]
 8009744:	3630      	adds	r6, #48	; 0x30
 8009746:	f805 6b01 	strb.w	r6, [r5], #1
 800974a:	9e00      	ldr	r6, [sp, #0]
 800974c:	1bae      	subs	r6, r5, r6
 800974e:	42b7      	cmp	r7, r6
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	d134      	bne.n	80097c0 <_dtoa_r+0x708>
 8009756:	f7f6 fda1 	bl	800029c <__adddf3>
 800975a:	4642      	mov	r2, r8
 800975c:	464b      	mov	r3, r9
 800975e:	4606      	mov	r6, r0
 8009760:	460f      	mov	r7, r1
 8009762:	f7f7 f9e1 	bl	8000b28 <__aeabi_dcmpgt>
 8009766:	b9c8      	cbnz	r0, 800979c <_dtoa_r+0x6e4>
 8009768:	4642      	mov	r2, r8
 800976a:	464b      	mov	r3, r9
 800976c:	4630      	mov	r0, r6
 800976e:	4639      	mov	r1, r7
 8009770:	f7f7 f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009774:	b110      	cbz	r0, 800977c <_dtoa_r+0x6c4>
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	07db      	lsls	r3, r3, #31
 800977a:	d40f      	bmi.n	800979c <_dtoa_r+0x6e4>
 800977c:	4651      	mov	r1, sl
 800977e:	4620      	mov	r0, r4
 8009780:	f000 fbcc 	bl	8009f1c <_Bfree>
 8009784:	2300      	movs	r3, #0
 8009786:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009788:	702b      	strb	r3, [r5, #0]
 800978a:	f10b 0301 	add.w	r3, fp, #1
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009792:	2b00      	cmp	r3, #0
 8009794:	f43f ace2 	beq.w	800915c <_dtoa_r+0xa4>
 8009798:	601d      	str	r5, [r3, #0]
 800979a:	e4df      	b.n	800915c <_dtoa_r+0xa4>
 800979c:	465f      	mov	r7, fp
 800979e:	462b      	mov	r3, r5
 80097a0:	461d      	mov	r5, r3
 80097a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097a6:	2a39      	cmp	r2, #57	; 0x39
 80097a8:	d106      	bne.n	80097b8 <_dtoa_r+0x700>
 80097aa:	9a00      	ldr	r2, [sp, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d1f7      	bne.n	80097a0 <_dtoa_r+0x6e8>
 80097b0:	9900      	ldr	r1, [sp, #0]
 80097b2:	2230      	movs	r2, #48	; 0x30
 80097b4:	3701      	adds	r7, #1
 80097b6:	700a      	strb	r2, [r1, #0]
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	3201      	adds	r2, #1
 80097bc:	701a      	strb	r2, [r3, #0]
 80097be:	e790      	b.n	80096e2 <_dtoa_r+0x62a>
 80097c0:	4ba3      	ldr	r3, [pc, #652]	; (8009a50 <_dtoa_r+0x998>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	f7f6 ff20 	bl	8000608 <__aeabi_dmul>
 80097c8:	2200      	movs	r2, #0
 80097ca:	2300      	movs	r3, #0
 80097cc:	4606      	mov	r6, r0
 80097ce:	460f      	mov	r7, r1
 80097d0:	f7f7 f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d09e      	beq.n	8009716 <_dtoa_r+0x65e>
 80097d8:	e7d0      	b.n	800977c <_dtoa_r+0x6c4>
 80097da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097dc:	2a00      	cmp	r2, #0
 80097de:	f000 80ca 	beq.w	8009976 <_dtoa_r+0x8be>
 80097e2:	9a07      	ldr	r2, [sp, #28]
 80097e4:	2a01      	cmp	r2, #1
 80097e6:	f300 80ad 	bgt.w	8009944 <_dtoa_r+0x88c>
 80097ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	f000 80a5 	beq.w	800993c <_dtoa_r+0x884>
 80097f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097f6:	9e08      	ldr	r6, [sp, #32]
 80097f8:	9d05      	ldr	r5, [sp, #20]
 80097fa:	9a05      	ldr	r2, [sp, #20]
 80097fc:	441a      	add	r2, r3
 80097fe:	9205      	str	r2, [sp, #20]
 8009800:	9a06      	ldr	r2, [sp, #24]
 8009802:	2101      	movs	r1, #1
 8009804:	441a      	add	r2, r3
 8009806:	4620      	mov	r0, r4
 8009808:	9206      	str	r2, [sp, #24]
 800980a:	f000 fc87 	bl	800a11c <__i2b>
 800980e:	4607      	mov	r7, r0
 8009810:	b165      	cbz	r5, 800982c <_dtoa_r+0x774>
 8009812:	9b06      	ldr	r3, [sp, #24]
 8009814:	2b00      	cmp	r3, #0
 8009816:	dd09      	ble.n	800982c <_dtoa_r+0x774>
 8009818:	42ab      	cmp	r3, r5
 800981a:	9a05      	ldr	r2, [sp, #20]
 800981c:	bfa8      	it	ge
 800981e:	462b      	movge	r3, r5
 8009820:	1ad2      	subs	r2, r2, r3
 8009822:	9205      	str	r2, [sp, #20]
 8009824:	9a06      	ldr	r2, [sp, #24]
 8009826:	1aed      	subs	r5, r5, r3
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	9306      	str	r3, [sp, #24]
 800982c:	9b08      	ldr	r3, [sp, #32]
 800982e:	b1f3      	cbz	r3, 800986e <_dtoa_r+0x7b6>
 8009830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 80a3 	beq.w	800997e <_dtoa_r+0x8c6>
 8009838:	2e00      	cmp	r6, #0
 800983a:	dd10      	ble.n	800985e <_dtoa_r+0x7a6>
 800983c:	4639      	mov	r1, r7
 800983e:	4632      	mov	r2, r6
 8009840:	4620      	mov	r0, r4
 8009842:	f000 fd2b 	bl	800a29c <__pow5mult>
 8009846:	4652      	mov	r2, sl
 8009848:	4601      	mov	r1, r0
 800984a:	4607      	mov	r7, r0
 800984c:	4620      	mov	r0, r4
 800984e:	f000 fc7b 	bl	800a148 <__multiply>
 8009852:	4651      	mov	r1, sl
 8009854:	4680      	mov	r8, r0
 8009856:	4620      	mov	r0, r4
 8009858:	f000 fb60 	bl	8009f1c <_Bfree>
 800985c:	46c2      	mov	sl, r8
 800985e:	9b08      	ldr	r3, [sp, #32]
 8009860:	1b9a      	subs	r2, r3, r6
 8009862:	d004      	beq.n	800986e <_dtoa_r+0x7b6>
 8009864:	4651      	mov	r1, sl
 8009866:	4620      	mov	r0, r4
 8009868:	f000 fd18 	bl	800a29c <__pow5mult>
 800986c:	4682      	mov	sl, r0
 800986e:	2101      	movs	r1, #1
 8009870:	4620      	mov	r0, r4
 8009872:	f000 fc53 	bl	800a11c <__i2b>
 8009876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009878:	2b00      	cmp	r3, #0
 800987a:	4606      	mov	r6, r0
 800987c:	f340 8081 	ble.w	8009982 <_dtoa_r+0x8ca>
 8009880:	461a      	mov	r2, r3
 8009882:	4601      	mov	r1, r0
 8009884:	4620      	mov	r0, r4
 8009886:	f000 fd09 	bl	800a29c <__pow5mult>
 800988a:	9b07      	ldr	r3, [sp, #28]
 800988c:	2b01      	cmp	r3, #1
 800988e:	4606      	mov	r6, r0
 8009890:	dd7a      	ble.n	8009988 <_dtoa_r+0x8d0>
 8009892:	f04f 0800 	mov.w	r8, #0
 8009896:	6933      	ldr	r3, [r6, #16]
 8009898:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800989c:	6918      	ldr	r0, [r3, #16]
 800989e:	f000 fbef 	bl	800a080 <__hi0bits>
 80098a2:	f1c0 0020 	rsb	r0, r0, #32
 80098a6:	9b06      	ldr	r3, [sp, #24]
 80098a8:	4418      	add	r0, r3
 80098aa:	f010 001f 	ands.w	r0, r0, #31
 80098ae:	f000 8094 	beq.w	80099da <_dtoa_r+0x922>
 80098b2:	f1c0 0320 	rsb	r3, r0, #32
 80098b6:	2b04      	cmp	r3, #4
 80098b8:	f340 8085 	ble.w	80099c6 <_dtoa_r+0x90e>
 80098bc:	9b05      	ldr	r3, [sp, #20]
 80098be:	f1c0 001c 	rsb	r0, r0, #28
 80098c2:	4403      	add	r3, r0
 80098c4:	9305      	str	r3, [sp, #20]
 80098c6:	9b06      	ldr	r3, [sp, #24]
 80098c8:	4403      	add	r3, r0
 80098ca:	4405      	add	r5, r0
 80098cc:	9306      	str	r3, [sp, #24]
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	dd05      	ble.n	80098e0 <_dtoa_r+0x828>
 80098d4:	4651      	mov	r1, sl
 80098d6:	461a      	mov	r2, r3
 80098d8:	4620      	mov	r0, r4
 80098da:	f000 fd39 	bl	800a350 <__lshift>
 80098de:	4682      	mov	sl, r0
 80098e0:	9b06      	ldr	r3, [sp, #24]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dd05      	ble.n	80098f2 <_dtoa_r+0x83a>
 80098e6:	4631      	mov	r1, r6
 80098e8:	461a      	mov	r2, r3
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 fd30 	bl	800a350 <__lshift>
 80098f0:	4606      	mov	r6, r0
 80098f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d072      	beq.n	80099de <_dtoa_r+0x926>
 80098f8:	4631      	mov	r1, r6
 80098fa:	4650      	mov	r0, sl
 80098fc:	f000 fd94 	bl	800a428 <__mcmp>
 8009900:	2800      	cmp	r0, #0
 8009902:	da6c      	bge.n	80099de <_dtoa_r+0x926>
 8009904:	2300      	movs	r3, #0
 8009906:	4651      	mov	r1, sl
 8009908:	220a      	movs	r2, #10
 800990a:	4620      	mov	r0, r4
 800990c:	f000 fb28 	bl	8009f60 <__multadd>
 8009910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009912:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009916:	4682      	mov	sl, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 81b0 	beq.w	8009c7e <_dtoa_r+0xbc6>
 800991e:	2300      	movs	r3, #0
 8009920:	4639      	mov	r1, r7
 8009922:	220a      	movs	r2, #10
 8009924:	4620      	mov	r0, r4
 8009926:	f000 fb1b 	bl	8009f60 <__multadd>
 800992a:	9b01      	ldr	r3, [sp, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	4607      	mov	r7, r0
 8009930:	f300 8096 	bgt.w	8009a60 <_dtoa_r+0x9a8>
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	2b02      	cmp	r3, #2
 8009938:	dc59      	bgt.n	80099ee <_dtoa_r+0x936>
 800993a:	e091      	b.n	8009a60 <_dtoa_r+0x9a8>
 800993c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800993e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009942:	e758      	b.n	80097f6 <_dtoa_r+0x73e>
 8009944:	9b04      	ldr	r3, [sp, #16]
 8009946:	1e5e      	subs	r6, r3, #1
 8009948:	9b08      	ldr	r3, [sp, #32]
 800994a:	42b3      	cmp	r3, r6
 800994c:	bfbf      	itttt	lt
 800994e:	9b08      	ldrlt	r3, [sp, #32]
 8009950:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009952:	9608      	strlt	r6, [sp, #32]
 8009954:	1af3      	sublt	r3, r6, r3
 8009956:	bfb4      	ite	lt
 8009958:	18d2      	addlt	r2, r2, r3
 800995a:	1b9e      	subge	r6, r3, r6
 800995c:	9b04      	ldr	r3, [sp, #16]
 800995e:	bfbc      	itt	lt
 8009960:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009962:	2600      	movlt	r6, #0
 8009964:	2b00      	cmp	r3, #0
 8009966:	bfb7      	itett	lt
 8009968:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800996c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009970:	1a9d      	sublt	r5, r3, r2
 8009972:	2300      	movlt	r3, #0
 8009974:	e741      	b.n	80097fa <_dtoa_r+0x742>
 8009976:	9e08      	ldr	r6, [sp, #32]
 8009978:	9d05      	ldr	r5, [sp, #20]
 800997a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800997c:	e748      	b.n	8009810 <_dtoa_r+0x758>
 800997e:	9a08      	ldr	r2, [sp, #32]
 8009980:	e770      	b.n	8009864 <_dtoa_r+0x7ac>
 8009982:	9b07      	ldr	r3, [sp, #28]
 8009984:	2b01      	cmp	r3, #1
 8009986:	dc19      	bgt.n	80099bc <_dtoa_r+0x904>
 8009988:	9b02      	ldr	r3, [sp, #8]
 800998a:	b9bb      	cbnz	r3, 80099bc <_dtoa_r+0x904>
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009992:	b99b      	cbnz	r3, 80099bc <_dtoa_r+0x904>
 8009994:	9b03      	ldr	r3, [sp, #12]
 8009996:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800999a:	0d1b      	lsrs	r3, r3, #20
 800999c:	051b      	lsls	r3, r3, #20
 800999e:	b183      	cbz	r3, 80099c2 <_dtoa_r+0x90a>
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	3301      	adds	r3, #1
 80099a4:	9305      	str	r3, [sp, #20]
 80099a6:	9b06      	ldr	r3, [sp, #24]
 80099a8:	3301      	adds	r3, #1
 80099aa:	9306      	str	r3, [sp, #24]
 80099ac:	f04f 0801 	mov.w	r8, #1
 80099b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f47f af6f 	bne.w	8009896 <_dtoa_r+0x7de>
 80099b8:	2001      	movs	r0, #1
 80099ba:	e774      	b.n	80098a6 <_dtoa_r+0x7ee>
 80099bc:	f04f 0800 	mov.w	r8, #0
 80099c0:	e7f6      	b.n	80099b0 <_dtoa_r+0x8f8>
 80099c2:	4698      	mov	r8, r3
 80099c4:	e7f4      	b.n	80099b0 <_dtoa_r+0x8f8>
 80099c6:	d082      	beq.n	80098ce <_dtoa_r+0x816>
 80099c8:	9a05      	ldr	r2, [sp, #20]
 80099ca:	331c      	adds	r3, #28
 80099cc:	441a      	add	r2, r3
 80099ce:	9205      	str	r2, [sp, #20]
 80099d0:	9a06      	ldr	r2, [sp, #24]
 80099d2:	441a      	add	r2, r3
 80099d4:	441d      	add	r5, r3
 80099d6:	9206      	str	r2, [sp, #24]
 80099d8:	e779      	b.n	80098ce <_dtoa_r+0x816>
 80099da:	4603      	mov	r3, r0
 80099dc:	e7f4      	b.n	80099c8 <_dtoa_r+0x910>
 80099de:	9b04      	ldr	r3, [sp, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dc37      	bgt.n	8009a54 <_dtoa_r+0x99c>
 80099e4:	9b07      	ldr	r3, [sp, #28]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	dd34      	ble.n	8009a54 <_dtoa_r+0x99c>
 80099ea:	9b04      	ldr	r3, [sp, #16]
 80099ec:	9301      	str	r3, [sp, #4]
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	b963      	cbnz	r3, 8009a0c <_dtoa_r+0x954>
 80099f2:	4631      	mov	r1, r6
 80099f4:	2205      	movs	r2, #5
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 fab2 	bl	8009f60 <__multadd>
 80099fc:	4601      	mov	r1, r0
 80099fe:	4606      	mov	r6, r0
 8009a00:	4650      	mov	r0, sl
 8009a02:	f000 fd11 	bl	800a428 <__mcmp>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f73f adbb 	bgt.w	8009582 <_dtoa_r+0x4ca>
 8009a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a0e:	9d00      	ldr	r5, [sp, #0]
 8009a10:	ea6f 0b03 	mvn.w	fp, r3
 8009a14:	f04f 0800 	mov.w	r8, #0
 8009a18:	4631      	mov	r1, r6
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f000 fa7e 	bl	8009f1c <_Bfree>
 8009a20:	2f00      	cmp	r7, #0
 8009a22:	f43f aeab 	beq.w	800977c <_dtoa_r+0x6c4>
 8009a26:	f1b8 0f00 	cmp.w	r8, #0
 8009a2a:	d005      	beq.n	8009a38 <_dtoa_r+0x980>
 8009a2c:	45b8      	cmp	r8, r7
 8009a2e:	d003      	beq.n	8009a38 <_dtoa_r+0x980>
 8009a30:	4641      	mov	r1, r8
 8009a32:	4620      	mov	r0, r4
 8009a34:	f000 fa72 	bl	8009f1c <_Bfree>
 8009a38:	4639      	mov	r1, r7
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 fa6e 	bl	8009f1c <_Bfree>
 8009a40:	e69c      	b.n	800977c <_dtoa_r+0x6c4>
 8009a42:	2600      	movs	r6, #0
 8009a44:	4637      	mov	r7, r6
 8009a46:	e7e1      	b.n	8009a0c <_dtoa_r+0x954>
 8009a48:	46bb      	mov	fp, r7
 8009a4a:	4637      	mov	r7, r6
 8009a4c:	e599      	b.n	8009582 <_dtoa_r+0x4ca>
 8009a4e:	bf00      	nop
 8009a50:	40240000 	.word	0x40240000
 8009a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 80c8 	beq.w	8009bec <_dtoa_r+0xb34>
 8009a5c:	9b04      	ldr	r3, [sp, #16]
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	2d00      	cmp	r5, #0
 8009a62:	dd05      	ble.n	8009a70 <_dtoa_r+0x9b8>
 8009a64:	4639      	mov	r1, r7
 8009a66:	462a      	mov	r2, r5
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 fc71 	bl	800a350 <__lshift>
 8009a6e:	4607      	mov	r7, r0
 8009a70:	f1b8 0f00 	cmp.w	r8, #0
 8009a74:	d05b      	beq.n	8009b2e <_dtoa_r+0xa76>
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 fa0f 	bl	8009e9c <_Balloc>
 8009a7e:	4605      	mov	r5, r0
 8009a80:	b928      	cbnz	r0, 8009a8e <_dtoa_r+0x9d6>
 8009a82:	4b83      	ldr	r3, [pc, #524]	; (8009c90 <_dtoa_r+0xbd8>)
 8009a84:	4602      	mov	r2, r0
 8009a86:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009a8a:	f7ff bb2e 	b.w	80090ea <_dtoa_r+0x32>
 8009a8e:	693a      	ldr	r2, [r7, #16]
 8009a90:	3202      	adds	r2, #2
 8009a92:	0092      	lsls	r2, r2, #2
 8009a94:	f107 010c 	add.w	r1, r7, #12
 8009a98:	300c      	adds	r0, #12
 8009a9a:	f001 ff85 	bl	800b9a8 <memcpy>
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	4629      	mov	r1, r5
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fc54 	bl	800a350 <__lshift>
 8009aa8:	9b00      	ldr	r3, [sp, #0]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	9304      	str	r3, [sp, #16]
 8009aae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	9308      	str	r3, [sp, #32]
 8009ab6:	9b02      	ldr	r3, [sp, #8]
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	46b8      	mov	r8, r7
 8009abe:	9306      	str	r3, [sp, #24]
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	9b04      	ldr	r3, [sp, #16]
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	4650      	mov	r0, sl
 8009aca:	9301      	str	r3, [sp, #4]
 8009acc:	f7ff fa6a 	bl	8008fa4 <quorem>
 8009ad0:	4641      	mov	r1, r8
 8009ad2:	9002      	str	r0, [sp, #8]
 8009ad4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ad8:	4650      	mov	r0, sl
 8009ada:	f000 fca5 	bl	800a428 <__mcmp>
 8009ade:	463a      	mov	r2, r7
 8009ae0:	9005      	str	r0, [sp, #20]
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 fcbb 	bl	800a460 <__mdiff>
 8009aea:	68c2      	ldr	r2, [r0, #12]
 8009aec:	4605      	mov	r5, r0
 8009aee:	bb02      	cbnz	r2, 8009b32 <_dtoa_r+0xa7a>
 8009af0:	4601      	mov	r1, r0
 8009af2:	4650      	mov	r0, sl
 8009af4:	f000 fc98 	bl	800a428 <__mcmp>
 8009af8:	4602      	mov	r2, r0
 8009afa:	4629      	mov	r1, r5
 8009afc:	4620      	mov	r0, r4
 8009afe:	9209      	str	r2, [sp, #36]	; 0x24
 8009b00:	f000 fa0c 	bl	8009f1c <_Bfree>
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b08:	9d04      	ldr	r5, [sp, #16]
 8009b0a:	ea43 0102 	orr.w	r1, r3, r2
 8009b0e:	9b06      	ldr	r3, [sp, #24]
 8009b10:	4319      	orrs	r1, r3
 8009b12:	d110      	bne.n	8009b36 <_dtoa_r+0xa7e>
 8009b14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b18:	d029      	beq.n	8009b6e <_dtoa_r+0xab6>
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dd02      	ble.n	8009b26 <_dtoa_r+0xa6e>
 8009b20:	9b02      	ldr	r3, [sp, #8]
 8009b22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	f883 9000 	strb.w	r9, [r3]
 8009b2c:	e774      	b.n	8009a18 <_dtoa_r+0x960>
 8009b2e:	4638      	mov	r0, r7
 8009b30:	e7ba      	b.n	8009aa8 <_dtoa_r+0x9f0>
 8009b32:	2201      	movs	r2, #1
 8009b34:	e7e1      	b.n	8009afa <_dtoa_r+0xa42>
 8009b36:	9b05      	ldr	r3, [sp, #20]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	db04      	blt.n	8009b46 <_dtoa_r+0xa8e>
 8009b3c:	9907      	ldr	r1, [sp, #28]
 8009b3e:	430b      	orrs	r3, r1
 8009b40:	9906      	ldr	r1, [sp, #24]
 8009b42:	430b      	orrs	r3, r1
 8009b44:	d120      	bne.n	8009b88 <_dtoa_r+0xad0>
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	dded      	ble.n	8009b26 <_dtoa_r+0xa6e>
 8009b4a:	4651      	mov	r1, sl
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 fbfe 	bl	800a350 <__lshift>
 8009b54:	4631      	mov	r1, r6
 8009b56:	4682      	mov	sl, r0
 8009b58:	f000 fc66 	bl	800a428 <__mcmp>
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	dc03      	bgt.n	8009b68 <_dtoa_r+0xab0>
 8009b60:	d1e1      	bne.n	8009b26 <_dtoa_r+0xa6e>
 8009b62:	f019 0f01 	tst.w	r9, #1
 8009b66:	d0de      	beq.n	8009b26 <_dtoa_r+0xa6e>
 8009b68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b6c:	d1d8      	bne.n	8009b20 <_dtoa_r+0xa68>
 8009b6e:	9a01      	ldr	r2, [sp, #4]
 8009b70:	2339      	movs	r3, #57	; 0x39
 8009b72:	7013      	strb	r3, [r2, #0]
 8009b74:	462b      	mov	r3, r5
 8009b76:	461d      	mov	r5, r3
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b7e:	2a39      	cmp	r2, #57	; 0x39
 8009b80:	d06c      	beq.n	8009c5c <_dtoa_r+0xba4>
 8009b82:	3201      	adds	r2, #1
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	e747      	b.n	8009a18 <_dtoa_r+0x960>
 8009b88:	2a00      	cmp	r2, #0
 8009b8a:	dd07      	ble.n	8009b9c <_dtoa_r+0xae4>
 8009b8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b90:	d0ed      	beq.n	8009b6e <_dtoa_r+0xab6>
 8009b92:	9a01      	ldr	r2, [sp, #4]
 8009b94:	f109 0301 	add.w	r3, r9, #1
 8009b98:	7013      	strb	r3, [r2, #0]
 8009b9a:	e73d      	b.n	8009a18 <_dtoa_r+0x960>
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	9a08      	ldr	r2, [sp, #32]
 8009ba0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d043      	beq.n	8009c30 <_dtoa_r+0xb78>
 8009ba8:	4651      	mov	r1, sl
 8009baa:	2300      	movs	r3, #0
 8009bac:	220a      	movs	r2, #10
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 f9d6 	bl	8009f60 <__multadd>
 8009bb4:	45b8      	cmp	r8, r7
 8009bb6:	4682      	mov	sl, r0
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	f04f 020a 	mov.w	r2, #10
 8009bc0:	4641      	mov	r1, r8
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	d107      	bne.n	8009bd6 <_dtoa_r+0xb1e>
 8009bc6:	f000 f9cb 	bl	8009f60 <__multadd>
 8009bca:	4680      	mov	r8, r0
 8009bcc:	4607      	mov	r7, r0
 8009bce:	9b04      	ldr	r3, [sp, #16]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	e775      	b.n	8009ac2 <_dtoa_r+0xa0a>
 8009bd6:	f000 f9c3 	bl	8009f60 <__multadd>
 8009bda:	4639      	mov	r1, r7
 8009bdc:	4680      	mov	r8, r0
 8009bde:	2300      	movs	r3, #0
 8009be0:	220a      	movs	r2, #10
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 f9bc 	bl	8009f60 <__multadd>
 8009be8:	4607      	mov	r7, r0
 8009bea:	e7f0      	b.n	8009bce <_dtoa_r+0xb16>
 8009bec:	9b04      	ldr	r3, [sp, #16]
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	9d00      	ldr	r5, [sp, #0]
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4650      	mov	r0, sl
 8009bf6:	f7ff f9d5 	bl	8008fa4 <quorem>
 8009bfa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009bfe:	9b00      	ldr	r3, [sp, #0]
 8009c00:	f805 9b01 	strb.w	r9, [r5], #1
 8009c04:	1aea      	subs	r2, r5, r3
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	dd07      	ble.n	8009c1c <_dtoa_r+0xb64>
 8009c0c:	4651      	mov	r1, sl
 8009c0e:	2300      	movs	r3, #0
 8009c10:	220a      	movs	r2, #10
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 f9a4 	bl	8009f60 <__multadd>
 8009c18:	4682      	mov	sl, r0
 8009c1a:	e7ea      	b.n	8009bf2 <_dtoa_r+0xb3a>
 8009c1c:	9b01      	ldr	r3, [sp, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bfc8      	it	gt
 8009c22:	461d      	movgt	r5, r3
 8009c24:	9b00      	ldr	r3, [sp, #0]
 8009c26:	bfd8      	it	le
 8009c28:	2501      	movle	r5, #1
 8009c2a:	441d      	add	r5, r3
 8009c2c:	f04f 0800 	mov.w	r8, #0
 8009c30:	4651      	mov	r1, sl
 8009c32:	2201      	movs	r2, #1
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 fb8b 	bl	800a350 <__lshift>
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	f000 fbf3 	bl	800a428 <__mcmp>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	dc96      	bgt.n	8009b74 <_dtoa_r+0xabc>
 8009c46:	d102      	bne.n	8009c4e <_dtoa_r+0xb96>
 8009c48:	f019 0f01 	tst.w	r9, #1
 8009c4c:	d192      	bne.n	8009b74 <_dtoa_r+0xabc>
 8009c4e:	462b      	mov	r3, r5
 8009c50:	461d      	mov	r5, r3
 8009c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c56:	2a30      	cmp	r2, #48	; 0x30
 8009c58:	d0fa      	beq.n	8009c50 <_dtoa_r+0xb98>
 8009c5a:	e6dd      	b.n	8009a18 <_dtoa_r+0x960>
 8009c5c:	9a00      	ldr	r2, [sp, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d189      	bne.n	8009b76 <_dtoa_r+0xabe>
 8009c62:	f10b 0b01 	add.w	fp, fp, #1
 8009c66:	2331      	movs	r3, #49	; 0x31
 8009c68:	e796      	b.n	8009b98 <_dtoa_r+0xae0>
 8009c6a:	4b0a      	ldr	r3, [pc, #40]	; (8009c94 <_dtoa_r+0xbdc>)
 8009c6c:	f7ff ba99 	b.w	80091a2 <_dtoa_r+0xea>
 8009c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f47f aa6d 	bne.w	8009152 <_dtoa_r+0x9a>
 8009c78:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <_dtoa_r+0xbe0>)
 8009c7a:	f7ff ba92 	b.w	80091a2 <_dtoa_r+0xea>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	dcb5      	bgt.n	8009bf0 <_dtoa_r+0xb38>
 8009c84:	9b07      	ldr	r3, [sp, #28]
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	f73f aeb1 	bgt.w	80099ee <_dtoa_r+0x936>
 8009c8c:	e7b0      	b.n	8009bf0 <_dtoa_r+0xb38>
 8009c8e:	bf00      	nop
 8009c90:	0800c885 	.word	0x0800c885
 8009c94:	0800c7e0 	.word	0x0800c7e0
 8009c98:	0800c809 	.word	0x0800c809

08009c9c <_free_r>:
 8009c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	d044      	beq.n	8009d2c <_free_r+0x90>
 8009ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ca6:	9001      	str	r0, [sp, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f1a1 0404 	sub.w	r4, r1, #4
 8009cae:	bfb8      	it	lt
 8009cb0:	18e4      	addlt	r4, r4, r3
 8009cb2:	f000 f8e7 	bl	8009e84 <__malloc_lock>
 8009cb6:	4a1e      	ldr	r2, [pc, #120]	; (8009d30 <_free_r+0x94>)
 8009cb8:	9801      	ldr	r0, [sp, #4]
 8009cba:	6813      	ldr	r3, [r2, #0]
 8009cbc:	b933      	cbnz	r3, 8009ccc <_free_r+0x30>
 8009cbe:	6063      	str	r3, [r4, #4]
 8009cc0:	6014      	str	r4, [r2, #0]
 8009cc2:	b003      	add	sp, #12
 8009cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cc8:	f000 b8e2 	b.w	8009e90 <__malloc_unlock>
 8009ccc:	42a3      	cmp	r3, r4
 8009cce:	d908      	bls.n	8009ce2 <_free_r+0x46>
 8009cd0:	6825      	ldr	r5, [r4, #0]
 8009cd2:	1961      	adds	r1, r4, r5
 8009cd4:	428b      	cmp	r3, r1
 8009cd6:	bf01      	itttt	eq
 8009cd8:	6819      	ldreq	r1, [r3, #0]
 8009cda:	685b      	ldreq	r3, [r3, #4]
 8009cdc:	1949      	addeq	r1, r1, r5
 8009cde:	6021      	streq	r1, [r4, #0]
 8009ce0:	e7ed      	b.n	8009cbe <_free_r+0x22>
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	b10b      	cbz	r3, 8009cec <_free_r+0x50>
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	d9fa      	bls.n	8009ce2 <_free_r+0x46>
 8009cec:	6811      	ldr	r1, [r2, #0]
 8009cee:	1855      	adds	r5, r2, r1
 8009cf0:	42a5      	cmp	r5, r4
 8009cf2:	d10b      	bne.n	8009d0c <_free_r+0x70>
 8009cf4:	6824      	ldr	r4, [r4, #0]
 8009cf6:	4421      	add	r1, r4
 8009cf8:	1854      	adds	r4, r2, r1
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	6011      	str	r1, [r2, #0]
 8009cfe:	d1e0      	bne.n	8009cc2 <_free_r+0x26>
 8009d00:	681c      	ldr	r4, [r3, #0]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	6053      	str	r3, [r2, #4]
 8009d06:	440c      	add	r4, r1
 8009d08:	6014      	str	r4, [r2, #0]
 8009d0a:	e7da      	b.n	8009cc2 <_free_r+0x26>
 8009d0c:	d902      	bls.n	8009d14 <_free_r+0x78>
 8009d0e:	230c      	movs	r3, #12
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	e7d6      	b.n	8009cc2 <_free_r+0x26>
 8009d14:	6825      	ldr	r5, [r4, #0]
 8009d16:	1961      	adds	r1, r4, r5
 8009d18:	428b      	cmp	r3, r1
 8009d1a:	bf04      	itt	eq
 8009d1c:	6819      	ldreq	r1, [r3, #0]
 8009d1e:	685b      	ldreq	r3, [r3, #4]
 8009d20:	6063      	str	r3, [r4, #4]
 8009d22:	bf04      	itt	eq
 8009d24:	1949      	addeq	r1, r1, r5
 8009d26:	6021      	streq	r1, [r4, #0]
 8009d28:	6054      	str	r4, [r2, #4]
 8009d2a:	e7ca      	b.n	8009cc2 <_free_r+0x26>
 8009d2c:	b003      	add	sp, #12
 8009d2e:	bd30      	pop	{r4, r5, pc}
 8009d30:	2000183c 	.word	0x2000183c

08009d34 <malloc>:
 8009d34:	4b02      	ldr	r3, [pc, #8]	; (8009d40 <malloc+0xc>)
 8009d36:	4601      	mov	r1, r0
 8009d38:	6818      	ldr	r0, [r3, #0]
 8009d3a:	f000 b823 	b.w	8009d84 <_malloc_r>
 8009d3e:	bf00      	nop
 8009d40:	20000154 	.word	0x20000154

08009d44 <sbrk_aligned>:
 8009d44:	b570      	push	{r4, r5, r6, lr}
 8009d46:	4e0e      	ldr	r6, [pc, #56]	; (8009d80 <sbrk_aligned+0x3c>)
 8009d48:	460c      	mov	r4, r1
 8009d4a:	6831      	ldr	r1, [r6, #0]
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	b911      	cbnz	r1, 8009d56 <sbrk_aligned+0x12>
 8009d50:	f001 fe1a 	bl	800b988 <_sbrk_r>
 8009d54:	6030      	str	r0, [r6, #0]
 8009d56:	4621      	mov	r1, r4
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f001 fe15 	bl	800b988 <_sbrk_r>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	d00a      	beq.n	8009d78 <sbrk_aligned+0x34>
 8009d62:	1cc4      	adds	r4, r0, #3
 8009d64:	f024 0403 	bic.w	r4, r4, #3
 8009d68:	42a0      	cmp	r0, r4
 8009d6a:	d007      	beq.n	8009d7c <sbrk_aligned+0x38>
 8009d6c:	1a21      	subs	r1, r4, r0
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f001 fe0a 	bl	800b988 <_sbrk_r>
 8009d74:	3001      	adds	r0, #1
 8009d76:	d101      	bne.n	8009d7c <sbrk_aligned+0x38>
 8009d78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
 8009d80:	20001840 	.word	0x20001840

08009d84 <_malloc_r>:
 8009d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d88:	1ccd      	adds	r5, r1, #3
 8009d8a:	f025 0503 	bic.w	r5, r5, #3
 8009d8e:	3508      	adds	r5, #8
 8009d90:	2d0c      	cmp	r5, #12
 8009d92:	bf38      	it	cc
 8009d94:	250c      	movcc	r5, #12
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	4607      	mov	r7, r0
 8009d9a:	db01      	blt.n	8009da0 <_malloc_r+0x1c>
 8009d9c:	42a9      	cmp	r1, r5
 8009d9e:	d905      	bls.n	8009dac <_malloc_r+0x28>
 8009da0:	230c      	movs	r3, #12
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	2600      	movs	r6, #0
 8009da6:	4630      	mov	r0, r6
 8009da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009e80 <_malloc_r+0xfc>
 8009db0:	f000 f868 	bl	8009e84 <__malloc_lock>
 8009db4:	f8d8 3000 	ldr.w	r3, [r8]
 8009db8:	461c      	mov	r4, r3
 8009dba:	bb5c      	cbnz	r4, 8009e14 <_malloc_r+0x90>
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	f7ff ffc0 	bl	8009d44 <sbrk_aligned>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	d155      	bne.n	8009e76 <_malloc_r+0xf2>
 8009dca:	f8d8 4000 	ldr.w	r4, [r8]
 8009dce:	4626      	mov	r6, r4
 8009dd0:	2e00      	cmp	r6, #0
 8009dd2:	d145      	bne.n	8009e60 <_malloc_r+0xdc>
 8009dd4:	2c00      	cmp	r4, #0
 8009dd6:	d048      	beq.n	8009e6a <_malloc_r+0xe6>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4638      	mov	r0, r7
 8009dde:	eb04 0903 	add.w	r9, r4, r3
 8009de2:	f001 fdd1 	bl	800b988 <_sbrk_r>
 8009de6:	4581      	cmp	r9, r0
 8009de8:	d13f      	bne.n	8009e6a <_malloc_r+0xe6>
 8009dea:	6821      	ldr	r1, [r4, #0]
 8009dec:	1a6d      	subs	r5, r5, r1
 8009dee:	4629      	mov	r1, r5
 8009df0:	4638      	mov	r0, r7
 8009df2:	f7ff ffa7 	bl	8009d44 <sbrk_aligned>
 8009df6:	3001      	adds	r0, #1
 8009df8:	d037      	beq.n	8009e6a <_malloc_r+0xe6>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	442b      	add	r3, r5
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	f8d8 3000 	ldr.w	r3, [r8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d038      	beq.n	8009e7a <_malloc_r+0xf6>
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	42a2      	cmp	r2, r4
 8009e0c:	d12b      	bne.n	8009e66 <_malloc_r+0xe2>
 8009e0e:	2200      	movs	r2, #0
 8009e10:	605a      	str	r2, [r3, #4]
 8009e12:	e00f      	b.n	8009e34 <_malloc_r+0xb0>
 8009e14:	6822      	ldr	r2, [r4, #0]
 8009e16:	1b52      	subs	r2, r2, r5
 8009e18:	d41f      	bmi.n	8009e5a <_malloc_r+0xd6>
 8009e1a:	2a0b      	cmp	r2, #11
 8009e1c:	d917      	bls.n	8009e4e <_malloc_r+0xca>
 8009e1e:	1961      	adds	r1, r4, r5
 8009e20:	42a3      	cmp	r3, r4
 8009e22:	6025      	str	r5, [r4, #0]
 8009e24:	bf18      	it	ne
 8009e26:	6059      	strne	r1, [r3, #4]
 8009e28:	6863      	ldr	r3, [r4, #4]
 8009e2a:	bf08      	it	eq
 8009e2c:	f8c8 1000 	streq.w	r1, [r8]
 8009e30:	5162      	str	r2, [r4, r5]
 8009e32:	604b      	str	r3, [r1, #4]
 8009e34:	4638      	mov	r0, r7
 8009e36:	f104 060b 	add.w	r6, r4, #11
 8009e3a:	f000 f829 	bl	8009e90 <__malloc_unlock>
 8009e3e:	f026 0607 	bic.w	r6, r6, #7
 8009e42:	1d23      	adds	r3, r4, #4
 8009e44:	1af2      	subs	r2, r6, r3
 8009e46:	d0ae      	beq.n	8009da6 <_malloc_r+0x22>
 8009e48:	1b9b      	subs	r3, r3, r6
 8009e4a:	50a3      	str	r3, [r4, r2]
 8009e4c:	e7ab      	b.n	8009da6 <_malloc_r+0x22>
 8009e4e:	42a3      	cmp	r3, r4
 8009e50:	6862      	ldr	r2, [r4, #4]
 8009e52:	d1dd      	bne.n	8009e10 <_malloc_r+0x8c>
 8009e54:	f8c8 2000 	str.w	r2, [r8]
 8009e58:	e7ec      	b.n	8009e34 <_malloc_r+0xb0>
 8009e5a:	4623      	mov	r3, r4
 8009e5c:	6864      	ldr	r4, [r4, #4]
 8009e5e:	e7ac      	b.n	8009dba <_malloc_r+0x36>
 8009e60:	4634      	mov	r4, r6
 8009e62:	6876      	ldr	r6, [r6, #4]
 8009e64:	e7b4      	b.n	8009dd0 <_malloc_r+0x4c>
 8009e66:	4613      	mov	r3, r2
 8009e68:	e7cc      	b.n	8009e04 <_malloc_r+0x80>
 8009e6a:	230c      	movs	r3, #12
 8009e6c:	603b      	str	r3, [r7, #0]
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f000 f80e 	bl	8009e90 <__malloc_unlock>
 8009e74:	e797      	b.n	8009da6 <_malloc_r+0x22>
 8009e76:	6025      	str	r5, [r4, #0]
 8009e78:	e7dc      	b.n	8009e34 <_malloc_r+0xb0>
 8009e7a:	605b      	str	r3, [r3, #4]
 8009e7c:	deff      	udf	#255	; 0xff
 8009e7e:	bf00      	nop
 8009e80:	2000183c 	.word	0x2000183c

08009e84 <__malloc_lock>:
 8009e84:	4801      	ldr	r0, [pc, #4]	; (8009e8c <__malloc_lock+0x8>)
 8009e86:	f7ff b884 	b.w	8008f92 <__retarget_lock_acquire_recursive>
 8009e8a:	bf00      	nop
 8009e8c:	20001838 	.word	0x20001838

08009e90 <__malloc_unlock>:
 8009e90:	4801      	ldr	r0, [pc, #4]	; (8009e98 <__malloc_unlock+0x8>)
 8009e92:	f7ff b87f 	b.w	8008f94 <__retarget_lock_release_recursive>
 8009e96:	bf00      	nop
 8009e98:	20001838 	.word	0x20001838

08009e9c <_Balloc>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	69c6      	ldr	r6, [r0, #28]
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	b976      	cbnz	r6, 8009ec4 <_Balloc+0x28>
 8009ea6:	2010      	movs	r0, #16
 8009ea8:	f7ff ff44 	bl	8009d34 <malloc>
 8009eac:	4602      	mov	r2, r0
 8009eae:	61e0      	str	r0, [r4, #28]
 8009eb0:	b920      	cbnz	r0, 8009ebc <_Balloc+0x20>
 8009eb2:	4b18      	ldr	r3, [pc, #96]	; (8009f14 <_Balloc+0x78>)
 8009eb4:	4818      	ldr	r0, [pc, #96]	; (8009f18 <_Balloc+0x7c>)
 8009eb6:	216b      	movs	r1, #107	; 0x6b
 8009eb8:	f001 fd8e 	bl	800b9d8 <__assert_func>
 8009ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ec0:	6006      	str	r6, [r0, #0]
 8009ec2:	60c6      	str	r6, [r0, #12]
 8009ec4:	69e6      	ldr	r6, [r4, #28]
 8009ec6:	68f3      	ldr	r3, [r6, #12]
 8009ec8:	b183      	cbz	r3, 8009eec <_Balloc+0x50>
 8009eca:	69e3      	ldr	r3, [r4, #28]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ed2:	b9b8      	cbnz	r0, 8009f04 <_Balloc+0x68>
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	fa01 f605 	lsl.w	r6, r1, r5
 8009eda:	1d72      	adds	r2, r6, #5
 8009edc:	0092      	lsls	r2, r2, #2
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f001 fd98 	bl	800ba14 <_calloc_r>
 8009ee4:	b160      	cbz	r0, 8009f00 <_Balloc+0x64>
 8009ee6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eea:	e00e      	b.n	8009f0a <_Balloc+0x6e>
 8009eec:	2221      	movs	r2, #33	; 0x21
 8009eee:	2104      	movs	r1, #4
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f001 fd8f 	bl	800ba14 <_calloc_r>
 8009ef6:	69e3      	ldr	r3, [r4, #28]
 8009ef8:	60f0      	str	r0, [r6, #12]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e4      	bne.n	8009eca <_Balloc+0x2e>
 8009f00:	2000      	movs	r0, #0
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	6802      	ldr	r2, [r0, #0]
 8009f06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f10:	e7f7      	b.n	8009f02 <_Balloc+0x66>
 8009f12:	bf00      	nop
 8009f14:	0800c816 	.word	0x0800c816
 8009f18:	0800c896 	.word	0x0800c896

08009f1c <_Bfree>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	69c6      	ldr	r6, [r0, #28]
 8009f20:	4605      	mov	r5, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	b976      	cbnz	r6, 8009f44 <_Bfree+0x28>
 8009f26:	2010      	movs	r0, #16
 8009f28:	f7ff ff04 	bl	8009d34 <malloc>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	61e8      	str	r0, [r5, #28]
 8009f30:	b920      	cbnz	r0, 8009f3c <_Bfree+0x20>
 8009f32:	4b09      	ldr	r3, [pc, #36]	; (8009f58 <_Bfree+0x3c>)
 8009f34:	4809      	ldr	r0, [pc, #36]	; (8009f5c <_Bfree+0x40>)
 8009f36:	218f      	movs	r1, #143	; 0x8f
 8009f38:	f001 fd4e 	bl	800b9d8 <__assert_func>
 8009f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f40:	6006      	str	r6, [r0, #0]
 8009f42:	60c6      	str	r6, [r0, #12]
 8009f44:	b13c      	cbz	r4, 8009f56 <_Bfree+0x3a>
 8009f46:	69eb      	ldr	r3, [r5, #28]
 8009f48:	6862      	ldr	r2, [r4, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f50:	6021      	str	r1, [r4, #0]
 8009f52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
 8009f58:	0800c816 	.word	0x0800c816
 8009f5c:	0800c896 	.word	0x0800c896

08009f60 <__multadd>:
 8009f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f64:	690d      	ldr	r5, [r1, #16]
 8009f66:	4607      	mov	r7, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	461e      	mov	r6, r3
 8009f6c:	f101 0c14 	add.w	ip, r1, #20
 8009f70:	2000      	movs	r0, #0
 8009f72:	f8dc 3000 	ldr.w	r3, [ip]
 8009f76:	b299      	uxth	r1, r3
 8009f78:	fb02 6101 	mla	r1, r2, r1, r6
 8009f7c:	0c1e      	lsrs	r6, r3, #16
 8009f7e:	0c0b      	lsrs	r3, r1, #16
 8009f80:	fb02 3306 	mla	r3, r2, r6, r3
 8009f84:	b289      	uxth	r1, r1
 8009f86:	3001      	adds	r0, #1
 8009f88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f8c:	4285      	cmp	r5, r0
 8009f8e:	f84c 1b04 	str.w	r1, [ip], #4
 8009f92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f96:	dcec      	bgt.n	8009f72 <__multadd+0x12>
 8009f98:	b30e      	cbz	r6, 8009fde <__multadd+0x7e>
 8009f9a:	68a3      	ldr	r3, [r4, #8]
 8009f9c:	42ab      	cmp	r3, r5
 8009f9e:	dc19      	bgt.n	8009fd4 <__multadd+0x74>
 8009fa0:	6861      	ldr	r1, [r4, #4]
 8009fa2:	4638      	mov	r0, r7
 8009fa4:	3101      	adds	r1, #1
 8009fa6:	f7ff ff79 	bl	8009e9c <_Balloc>
 8009faa:	4680      	mov	r8, r0
 8009fac:	b928      	cbnz	r0, 8009fba <__multadd+0x5a>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	4b0c      	ldr	r3, [pc, #48]	; (8009fe4 <__multadd+0x84>)
 8009fb2:	480d      	ldr	r0, [pc, #52]	; (8009fe8 <__multadd+0x88>)
 8009fb4:	21ba      	movs	r1, #186	; 0xba
 8009fb6:	f001 fd0f 	bl	800b9d8 <__assert_func>
 8009fba:	6922      	ldr	r2, [r4, #16]
 8009fbc:	3202      	adds	r2, #2
 8009fbe:	f104 010c 	add.w	r1, r4, #12
 8009fc2:	0092      	lsls	r2, r2, #2
 8009fc4:	300c      	adds	r0, #12
 8009fc6:	f001 fcef 	bl	800b9a8 <memcpy>
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7ff ffa5 	bl	8009f1c <_Bfree>
 8009fd2:	4644      	mov	r4, r8
 8009fd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fd8:	3501      	adds	r5, #1
 8009fda:	615e      	str	r6, [r3, #20]
 8009fdc:	6125      	str	r5, [r4, #16]
 8009fde:	4620      	mov	r0, r4
 8009fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe4:	0800c885 	.word	0x0800c885
 8009fe8:	0800c896 	.word	0x0800c896

08009fec <__s2b>:
 8009fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	4615      	mov	r5, r2
 8009ff4:	461f      	mov	r7, r3
 8009ff6:	2209      	movs	r2, #9
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a000:	2100      	movs	r1, #0
 800a002:	2201      	movs	r2, #1
 800a004:	429a      	cmp	r2, r3
 800a006:	db09      	blt.n	800a01c <__s2b+0x30>
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff ff47 	bl	8009e9c <_Balloc>
 800a00e:	b940      	cbnz	r0, 800a022 <__s2b+0x36>
 800a010:	4602      	mov	r2, r0
 800a012:	4b19      	ldr	r3, [pc, #100]	; (800a078 <__s2b+0x8c>)
 800a014:	4819      	ldr	r0, [pc, #100]	; (800a07c <__s2b+0x90>)
 800a016:	21d3      	movs	r1, #211	; 0xd3
 800a018:	f001 fcde 	bl	800b9d8 <__assert_func>
 800a01c:	0052      	lsls	r2, r2, #1
 800a01e:	3101      	adds	r1, #1
 800a020:	e7f0      	b.n	800a004 <__s2b+0x18>
 800a022:	9b08      	ldr	r3, [sp, #32]
 800a024:	6143      	str	r3, [r0, #20]
 800a026:	2d09      	cmp	r5, #9
 800a028:	f04f 0301 	mov.w	r3, #1
 800a02c:	6103      	str	r3, [r0, #16]
 800a02e:	dd16      	ble.n	800a05e <__s2b+0x72>
 800a030:	f104 0909 	add.w	r9, r4, #9
 800a034:	46c8      	mov	r8, r9
 800a036:	442c      	add	r4, r5
 800a038:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a03c:	4601      	mov	r1, r0
 800a03e:	3b30      	subs	r3, #48	; 0x30
 800a040:	220a      	movs	r2, #10
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff8c 	bl	8009f60 <__multadd>
 800a048:	45a0      	cmp	r8, r4
 800a04a:	d1f5      	bne.n	800a038 <__s2b+0x4c>
 800a04c:	f1a5 0408 	sub.w	r4, r5, #8
 800a050:	444c      	add	r4, r9
 800a052:	1b2d      	subs	r5, r5, r4
 800a054:	1963      	adds	r3, r4, r5
 800a056:	42bb      	cmp	r3, r7
 800a058:	db04      	blt.n	800a064 <__s2b+0x78>
 800a05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a05e:	340a      	adds	r4, #10
 800a060:	2509      	movs	r5, #9
 800a062:	e7f6      	b.n	800a052 <__s2b+0x66>
 800a064:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a068:	4601      	mov	r1, r0
 800a06a:	3b30      	subs	r3, #48	; 0x30
 800a06c:	220a      	movs	r2, #10
 800a06e:	4630      	mov	r0, r6
 800a070:	f7ff ff76 	bl	8009f60 <__multadd>
 800a074:	e7ee      	b.n	800a054 <__s2b+0x68>
 800a076:	bf00      	nop
 800a078:	0800c885 	.word	0x0800c885
 800a07c:	0800c896 	.word	0x0800c896

0800a080 <__hi0bits>:
 800a080:	0c03      	lsrs	r3, r0, #16
 800a082:	041b      	lsls	r3, r3, #16
 800a084:	b9d3      	cbnz	r3, 800a0bc <__hi0bits+0x3c>
 800a086:	0400      	lsls	r0, r0, #16
 800a088:	2310      	movs	r3, #16
 800a08a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a08e:	bf04      	itt	eq
 800a090:	0200      	lsleq	r0, r0, #8
 800a092:	3308      	addeq	r3, #8
 800a094:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a098:	bf04      	itt	eq
 800a09a:	0100      	lsleq	r0, r0, #4
 800a09c:	3304      	addeq	r3, #4
 800a09e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a0a2:	bf04      	itt	eq
 800a0a4:	0080      	lsleq	r0, r0, #2
 800a0a6:	3302      	addeq	r3, #2
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	db05      	blt.n	800a0b8 <__hi0bits+0x38>
 800a0ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a0b0:	f103 0301 	add.w	r3, r3, #1
 800a0b4:	bf08      	it	eq
 800a0b6:	2320      	moveq	r3, #32
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	4770      	bx	lr
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e7e4      	b.n	800a08a <__hi0bits+0xa>

0800a0c0 <__lo0bits>:
 800a0c0:	6803      	ldr	r3, [r0, #0]
 800a0c2:	f013 0207 	ands.w	r2, r3, #7
 800a0c6:	d00c      	beq.n	800a0e2 <__lo0bits+0x22>
 800a0c8:	07d9      	lsls	r1, r3, #31
 800a0ca:	d422      	bmi.n	800a112 <__lo0bits+0x52>
 800a0cc:	079a      	lsls	r2, r3, #30
 800a0ce:	bf49      	itett	mi
 800a0d0:	085b      	lsrmi	r3, r3, #1
 800a0d2:	089b      	lsrpl	r3, r3, #2
 800a0d4:	6003      	strmi	r3, [r0, #0]
 800a0d6:	2201      	movmi	r2, #1
 800a0d8:	bf5c      	itt	pl
 800a0da:	6003      	strpl	r3, [r0, #0]
 800a0dc:	2202      	movpl	r2, #2
 800a0de:	4610      	mov	r0, r2
 800a0e0:	4770      	bx	lr
 800a0e2:	b299      	uxth	r1, r3
 800a0e4:	b909      	cbnz	r1, 800a0ea <__lo0bits+0x2a>
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	2210      	movs	r2, #16
 800a0ea:	b2d9      	uxtb	r1, r3
 800a0ec:	b909      	cbnz	r1, 800a0f2 <__lo0bits+0x32>
 800a0ee:	3208      	adds	r2, #8
 800a0f0:	0a1b      	lsrs	r3, r3, #8
 800a0f2:	0719      	lsls	r1, r3, #28
 800a0f4:	bf04      	itt	eq
 800a0f6:	091b      	lsreq	r3, r3, #4
 800a0f8:	3204      	addeq	r2, #4
 800a0fa:	0799      	lsls	r1, r3, #30
 800a0fc:	bf04      	itt	eq
 800a0fe:	089b      	lsreq	r3, r3, #2
 800a100:	3202      	addeq	r2, #2
 800a102:	07d9      	lsls	r1, r3, #31
 800a104:	d403      	bmi.n	800a10e <__lo0bits+0x4e>
 800a106:	085b      	lsrs	r3, r3, #1
 800a108:	f102 0201 	add.w	r2, r2, #1
 800a10c:	d003      	beq.n	800a116 <__lo0bits+0x56>
 800a10e:	6003      	str	r3, [r0, #0]
 800a110:	e7e5      	b.n	800a0de <__lo0bits+0x1e>
 800a112:	2200      	movs	r2, #0
 800a114:	e7e3      	b.n	800a0de <__lo0bits+0x1e>
 800a116:	2220      	movs	r2, #32
 800a118:	e7e1      	b.n	800a0de <__lo0bits+0x1e>
	...

0800a11c <__i2b>:
 800a11c:	b510      	push	{r4, lr}
 800a11e:	460c      	mov	r4, r1
 800a120:	2101      	movs	r1, #1
 800a122:	f7ff febb 	bl	8009e9c <_Balloc>
 800a126:	4602      	mov	r2, r0
 800a128:	b928      	cbnz	r0, 800a136 <__i2b+0x1a>
 800a12a:	4b05      	ldr	r3, [pc, #20]	; (800a140 <__i2b+0x24>)
 800a12c:	4805      	ldr	r0, [pc, #20]	; (800a144 <__i2b+0x28>)
 800a12e:	f240 1145 	movw	r1, #325	; 0x145
 800a132:	f001 fc51 	bl	800b9d8 <__assert_func>
 800a136:	2301      	movs	r3, #1
 800a138:	6144      	str	r4, [r0, #20]
 800a13a:	6103      	str	r3, [r0, #16]
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	bf00      	nop
 800a140:	0800c885 	.word	0x0800c885
 800a144:	0800c896 	.word	0x0800c896

0800a148 <__multiply>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	4691      	mov	r9, r2
 800a14e:	690a      	ldr	r2, [r1, #16]
 800a150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a154:	429a      	cmp	r2, r3
 800a156:	bfb8      	it	lt
 800a158:	460b      	movlt	r3, r1
 800a15a:	460c      	mov	r4, r1
 800a15c:	bfbc      	itt	lt
 800a15e:	464c      	movlt	r4, r9
 800a160:	4699      	movlt	r9, r3
 800a162:	6927      	ldr	r7, [r4, #16]
 800a164:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a168:	68a3      	ldr	r3, [r4, #8]
 800a16a:	6861      	ldr	r1, [r4, #4]
 800a16c:	eb07 060a 	add.w	r6, r7, sl
 800a170:	42b3      	cmp	r3, r6
 800a172:	b085      	sub	sp, #20
 800a174:	bfb8      	it	lt
 800a176:	3101      	addlt	r1, #1
 800a178:	f7ff fe90 	bl	8009e9c <_Balloc>
 800a17c:	b930      	cbnz	r0, 800a18c <__multiply+0x44>
 800a17e:	4602      	mov	r2, r0
 800a180:	4b44      	ldr	r3, [pc, #272]	; (800a294 <__multiply+0x14c>)
 800a182:	4845      	ldr	r0, [pc, #276]	; (800a298 <__multiply+0x150>)
 800a184:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a188:	f001 fc26 	bl	800b9d8 <__assert_func>
 800a18c:	f100 0514 	add.w	r5, r0, #20
 800a190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a194:	462b      	mov	r3, r5
 800a196:	2200      	movs	r2, #0
 800a198:	4543      	cmp	r3, r8
 800a19a:	d321      	bcc.n	800a1e0 <__multiply+0x98>
 800a19c:	f104 0314 	add.w	r3, r4, #20
 800a1a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a1a4:	f109 0314 	add.w	r3, r9, #20
 800a1a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a1ac:	9202      	str	r2, [sp, #8]
 800a1ae:	1b3a      	subs	r2, r7, r4
 800a1b0:	3a15      	subs	r2, #21
 800a1b2:	f022 0203 	bic.w	r2, r2, #3
 800a1b6:	3204      	adds	r2, #4
 800a1b8:	f104 0115 	add.w	r1, r4, #21
 800a1bc:	428f      	cmp	r7, r1
 800a1be:	bf38      	it	cc
 800a1c0:	2204      	movcc	r2, #4
 800a1c2:	9201      	str	r2, [sp, #4]
 800a1c4:	9a02      	ldr	r2, [sp, #8]
 800a1c6:	9303      	str	r3, [sp, #12]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d80c      	bhi.n	800a1e6 <__multiply+0x9e>
 800a1cc:	2e00      	cmp	r6, #0
 800a1ce:	dd03      	ble.n	800a1d8 <__multiply+0x90>
 800a1d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d05b      	beq.n	800a290 <__multiply+0x148>
 800a1d8:	6106      	str	r6, [r0, #16]
 800a1da:	b005      	add	sp, #20
 800a1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e0:	f843 2b04 	str.w	r2, [r3], #4
 800a1e4:	e7d8      	b.n	800a198 <__multiply+0x50>
 800a1e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1ea:	f1ba 0f00 	cmp.w	sl, #0
 800a1ee:	d024      	beq.n	800a23a <__multiply+0xf2>
 800a1f0:	f104 0e14 	add.w	lr, r4, #20
 800a1f4:	46a9      	mov	r9, r5
 800a1f6:	f04f 0c00 	mov.w	ip, #0
 800a1fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1fe:	f8d9 1000 	ldr.w	r1, [r9]
 800a202:	fa1f fb82 	uxth.w	fp, r2
 800a206:	b289      	uxth	r1, r1
 800a208:	fb0a 110b 	mla	r1, sl, fp, r1
 800a20c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a210:	f8d9 2000 	ldr.w	r2, [r9]
 800a214:	4461      	add	r1, ip
 800a216:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a21a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a21e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a222:	b289      	uxth	r1, r1
 800a224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a228:	4577      	cmp	r7, lr
 800a22a:	f849 1b04 	str.w	r1, [r9], #4
 800a22e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a232:	d8e2      	bhi.n	800a1fa <__multiply+0xb2>
 800a234:	9a01      	ldr	r2, [sp, #4]
 800a236:	f845 c002 	str.w	ip, [r5, r2]
 800a23a:	9a03      	ldr	r2, [sp, #12]
 800a23c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a240:	3304      	adds	r3, #4
 800a242:	f1b9 0f00 	cmp.w	r9, #0
 800a246:	d021      	beq.n	800a28c <__multiply+0x144>
 800a248:	6829      	ldr	r1, [r5, #0]
 800a24a:	f104 0c14 	add.w	ip, r4, #20
 800a24e:	46ae      	mov	lr, r5
 800a250:	f04f 0a00 	mov.w	sl, #0
 800a254:	f8bc b000 	ldrh.w	fp, [ip]
 800a258:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a25c:	fb09 220b 	mla	r2, r9, fp, r2
 800a260:	4452      	add	r2, sl
 800a262:	b289      	uxth	r1, r1
 800a264:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a268:	f84e 1b04 	str.w	r1, [lr], #4
 800a26c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a270:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a274:	f8be 1000 	ldrh.w	r1, [lr]
 800a278:	fb09 110a 	mla	r1, r9, sl, r1
 800a27c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a280:	4567      	cmp	r7, ip
 800a282:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a286:	d8e5      	bhi.n	800a254 <__multiply+0x10c>
 800a288:	9a01      	ldr	r2, [sp, #4]
 800a28a:	50a9      	str	r1, [r5, r2]
 800a28c:	3504      	adds	r5, #4
 800a28e:	e799      	b.n	800a1c4 <__multiply+0x7c>
 800a290:	3e01      	subs	r6, #1
 800a292:	e79b      	b.n	800a1cc <__multiply+0x84>
 800a294:	0800c885 	.word	0x0800c885
 800a298:	0800c896 	.word	0x0800c896

0800a29c <__pow5mult>:
 800a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a0:	4615      	mov	r5, r2
 800a2a2:	f012 0203 	ands.w	r2, r2, #3
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	460f      	mov	r7, r1
 800a2aa:	d007      	beq.n	800a2bc <__pow5mult+0x20>
 800a2ac:	4c25      	ldr	r4, [pc, #148]	; (800a344 <__pow5mult+0xa8>)
 800a2ae:	3a01      	subs	r2, #1
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2b6:	f7ff fe53 	bl	8009f60 <__multadd>
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	10ad      	asrs	r5, r5, #2
 800a2be:	d03d      	beq.n	800a33c <__pow5mult+0xa0>
 800a2c0:	69f4      	ldr	r4, [r6, #28]
 800a2c2:	b97c      	cbnz	r4, 800a2e4 <__pow5mult+0x48>
 800a2c4:	2010      	movs	r0, #16
 800a2c6:	f7ff fd35 	bl	8009d34 <malloc>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	61f0      	str	r0, [r6, #28]
 800a2ce:	b928      	cbnz	r0, 800a2dc <__pow5mult+0x40>
 800a2d0:	4b1d      	ldr	r3, [pc, #116]	; (800a348 <__pow5mult+0xac>)
 800a2d2:	481e      	ldr	r0, [pc, #120]	; (800a34c <__pow5mult+0xb0>)
 800a2d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a2d8:	f001 fb7e 	bl	800b9d8 <__assert_func>
 800a2dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2e0:	6004      	str	r4, [r0, #0]
 800a2e2:	60c4      	str	r4, [r0, #12]
 800a2e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a2e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2ec:	b94c      	cbnz	r4, 800a302 <__pow5mult+0x66>
 800a2ee:	f240 2171 	movw	r1, #625	; 0x271
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff ff12 	bl	800a11c <__i2b>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2fe:	4604      	mov	r4, r0
 800a300:	6003      	str	r3, [r0, #0]
 800a302:	f04f 0900 	mov.w	r9, #0
 800a306:	07eb      	lsls	r3, r5, #31
 800a308:	d50a      	bpl.n	800a320 <__pow5mult+0x84>
 800a30a:	4639      	mov	r1, r7
 800a30c:	4622      	mov	r2, r4
 800a30e:	4630      	mov	r0, r6
 800a310:	f7ff ff1a 	bl	800a148 <__multiply>
 800a314:	4639      	mov	r1, r7
 800a316:	4680      	mov	r8, r0
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff fdff 	bl	8009f1c <_Bfree>
 800a31e:	4647      	mov	r7, r8
 800a320:	106d      	asrs	r5, r5, #1
 800a322:	d00b      	beq.n	800a33c <__pow5mult+0xa0>
 800a324:	6820      	ldr	r0, [r4, #0]
 800a326:	b938      	cbnz	r0, 800a338 <__pow5mult+0x9c>
 800a328:	4622      	mov	r2, r4
 800a32a:	4621      	mov	r1, r4
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff ff0b 	bl	800a148 <__multiply>
 800a332:	6020      	str	r0, [r4, #0]
 800a334:	f8c0 9000 	str.w	r9, [r0]
 800a338:	4604      	mov	r4, r0
 800a33a:	e7e4      	b.n	800a306 <__pow5mult+0x6a>
 800a33c:	4638      	mov	r0, r7
 800a33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a342:	bf00      	nop
 800a344:	0800c9e0 	.word	0x0800c9e0
 800a348:	0800c816 	.word	0x0800c816
 800a34c:	0800c896 	.word	0x0800c896

0800a350 <__lshift>:
 800a350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a354:	460c      	mov	r4, r1
 800a356:	6849      	ldr	r1, [r1, #4]
 800a358:	6923      	ldr	r3, [r4, #16]
 800a35a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a35e:	68a3      	ldr	r3, [r4, #8]
 800a360:	4607      	mov	r7, r0
 800a362:	4691      	mov	r9, r2
 800a364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a368:	f108 0601 	add.w	r6, r8, #1
 800a36c:	42b3      	cmp	r3, r6
 800a36e:	db0b      	blt.n	800a388 <__lshift+0x38>
 800a370:	4638      	mov	r0, r7
 800a372:	f7ff fd93 	bl	8009e9c <_Balloc>
 800a376:	4605      	mov	r5, r0
 800a378:	b948      	cbnz	r0, 800a38e <__lshift+0x3e>
 800a37a:	4602      	mov	r2, r0
 800a37c:	4b28      	ldr	r3, [pc, #160]	; (800a420 <__lshift+0xd0>)
 800a37e:	4829      	ldr	r0, [pc, #164]	; (800a424 <__lshift+0xd4>)
 800a380:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a384:	f001 fb28 	bl	800b9d8 <__assert_func>
 800a388:	3101      	adds	r1, #1
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	e7ee      	b.n	800a36c <__lshift+0x1c>
 800a38e:	2300      	movs	r3, #0
 800a390:	f100 0114 	add.w	r1, r0, #20
 800a394:	f100 0210 	add.w	r2, r0, #16
 800a398:	4618      	mov	r0, r3
 800a39a:	4553      	cmp	r3, sl
 800a39c:	db33      	blt.n	800a406 <__lshift+0xb6>
 800a39e:	6920      	ldr	r0, [r4, #16]
 800a3a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3a4:	f104 0314 	add.w	r3, r4, #20
 800a3a8:	f019 091f 	ands.w	r9, r9, #31
 800a3ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3b4:	d02b      	beq.n	800a40e <__lshift+0xbe>
 800a3b6:	f1c9 0e20 	rsb	lr, r9, #32
 800a3ba:	468a      	mov	sl, r1
 800a3bc:	2200      	movs	r2, #0
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	fa00 f009 	lsl.w	r0, r0, r9
 800a3c4:	4310      	orrs	r0, r2
 800a3c6:	f84a 0b04 	str.w	r0, [sl], #4
 800a3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ce:	459c      	cmp	ip, r3
 800a3d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3d4:	d8f3      	bhi.n	800a3be <__lshift+0x6e>
 800a3d6:	ebac 0304 	sub.w	r3, ip, r4
 800a3da:	3b15      	subs	r3, #21
 800a3dc:	f023 0303 	bic.w	r3, r3, #3
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	f104 0015 	add.w	r0, r4, #21
 800a3e6:	4584      	cmp	ip, r0
 800a3e8:	bf38      	it	cc
 800a3ea:	2304      	movcc	r3, #4
 800a3ec:	50ca      	str	r2, [r1, r3]
 800a3ee:	b10a      	cbz	r2, 800a3f4 <__lshift+0xa4>
 800a3f0:	f108 0602 	add.w	r6, r8, #2
 800a3f4:	3e01      	subs	r6, #1
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	612e      	str	r6, [r5, #16]
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	f7ff fd8e 	bl	8009f1c <_Bfree>
 800a400:	4628      	mov	r0, r5
 800a402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a406:	f842 0f04 	str.w	r0, [r2, #4]!
 800a40a:	3301      	adds	r3, #1
 800a40c:	e7c5      	b.n	800a39a <__lshift+0x4a>
 800a40e:	3904      	subs	r1, #4
 800a410:	f853 2b04 	ldr.w	r2, [r3], #4
 800a414:	f841 2f04 	str.w	r2, [r1, #4]!
 800a418:	459c      	cmp	ip, r3
 800a41a:	d8f9      	bhi.n	800a410 <__lshift+0xc0>
 800a41c:	e7ea      	b.n	800a3f4 <__lshift+0xa4>
 800a41e:	bf00      	nop
 800a420:	0800c885 	.word	0x0800c885
 800a424:	0800c896 	.word	0x0800c896

0800a428 <__mcmp>:
 800a428:	b530      	push	{r4, r5, lr}
 800a42a:	6902      	ldr	r2, [r0, #16]
 800a42c:	690c      	ldr	r4, [r1, #16]
 800a42e:	1b12      	subs	r2, r2, r4
 800a430:	d10e      	bne.n	800a450 <__mcmp+0x28>
 800a432:	f100 0314 	add.w	r3, r0, #20
 800a436:	3114      	adds	r1, #20
 800a438:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a43c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a440:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a444:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a448:	42a5      	cmp	r5, r4
 800a44a:	d003      	beq.n	800a454 <__mcmp+0x2c>
 800a44c:	d305      	bcc.n	800a45a <__mcmp+0x32>
 800a44e:	2201      	movs	r2, #1
 800a450:	4610      	mov	r0, r2
 800a452:	bd30      	pop	{r4, r5, pc}
 800a454:	4283      	cmp	r3, r0
 800a456:	d3f3      	bcc.n	800a440 <__mcmp+0x18>
 800a458:	e7fa      	b.n	800a450 <__mcmp+0x28>
 800a45a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a45e:	e7f7      	b.n	800a450 <__mcmp+0x28>

0800a460 <__mdiff>:
 800a460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	460c      	mov	r4, r1
 800a466:	4606      	mov	r6, r0
 800a468:	4611      	mov	r1, r2
 800a46a:	4620      	mov	r0, r4
 800a46c:	4690      	mov	r8, r2
 800a46e:	f7ff ffdb 	bl	800a428 <__mcmp>
 800a472:	1e05      	subs	r5, r0, #0
 800a474:	d110      	bne.n	800a498 <__mdiff+0x38>
 800a476:	4629      	mov	r1, r5
 800a478:	4630      	mov	r0, r6
 800a47a:	f7ff fd0f 	bl	8009e9c <_Balloc>
 800a47e:	b930      	cbnz	r0, 800a48e <__mdiff+0x2e>
 800a480:	4b3a      	ldr	r3, [pc, #232]	; (800a56c <__mdiff+0x10c>)
 800a482:	4602      	mov	r2, r0
 800a484:	f240 2137 	movw	r1, #567	; 0x237
 800a488:	4839      	ldr	r0, [pc, #228]	; (800a570 <__mdiff+0x110>)
 800a48a:	f001 faa5 	bl	800b9d8 <__assert_func>
 800a48e:	2301      	movs	r3, #1
 800a490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a498:	bfa4      	itt	ge
 800a49a:	4643      	movge	r3, r8
 800a49c:	46a0      	movge	r8, r4
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4a4:	bfa6      	itte	ge
 800a4a6:	461c      	movge	r4, r3
 800a4a8:	2500      	movge	r5, #0
 800a4aa:	2501      	movlt	r5, #1
 800a4ac:	f7ff fcf6 	bl	8009e9c <_Balloc>
 800a4b0:	b920      	cbnz	r0, 800a4bc <__mdiff+0x5c>
 800a4b2:	4b2e      	ldr	r3, [pc, #184]	; (800a56c <__mdiff+0x10c>)
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	f240 2145 	movw	r1, #581	; 0x245
 800a4ba:	e7e5      	b.n	800a488 <__mdiff+0x28>
 800a4bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4c0:	6926      	ldr	r6, [r4, #16]
 800a4c2:	60c5      	str	r5, [r0, #12]
 800a4c4:	f104 0914 	add.w	r9, r4, #20
 800a4c8:	f108 0514 	add.w	r5, r8, #20
 800a4cc:	f100 0e14 	add.w	lr, r0, #20
 800a4d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4d8:	f108 0210 	add.w	r2, r8, #16
 800a4dc:	46f2      	mov	sl, lr
 800a4de:	2100      	movs	r1, #0
 800a4e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4e8:	fa11 f88b 	uxtah	r8, r1, fp
 800a4ec:	b299      	uxth	r1, r3
 800a4ee:	0c1b      	lsrs	r3, r3, #16
 800a4f0:	eba8 0801 	sub.w	r8, r8, r1
 800a4f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4f8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4fc:	fa1f f888 	uxth.w	r8, r8
 800a500:	1419      	asrs	r1, r3, #16
 800a502:	454e      	cmp	r6, r9
 800a504:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a508:	f84a 3b04 	str.w	r3, [sl], #4
 800a50c:	d8e8      	bhi.n	800a4e0 <__mdiff+0x80>
 800a50e:	1b33      	subs	r3, r6, r4
 800a510:	3b15      	subs	r3, #21
 800a512:	f023 0303 	bic.w	r3, r3, #3
 800a516:	3304      	adds	r3, #4
 800a518:	3415      	adds	r4, #21
 800a51a:	42a6      	cmp	r6, r4
 800a51c:	bf38      	it	cc
 800a51e:	2304      	movcc	r3, #4
 800a520:	441d      	add	r5, r3
 800a522:	4473      	add	r3, lr
 800a524:	469e      	mov	lr, r3
 800a526:	462e      	mov	r6, r5
 800a528:	4566      	cmp	r6, ip
 800a52a:	d30e      	bcc.n	800a54a <__mdiff+0xea>
 800a52c:	f10c 0203 	add.w	r2, ip, #3
 800a530:	1b52      	subs	r2, r2, r5
 800a532:	f022 0203 	bic.w	r2, r2, #3
 800a536:	3d03      	subs	r5, #3
 800a538:	45ac      	cmp	ip, r5
 800a53a:	bf38      	it	cc
 800a53c:	2200      	movcc	r2, #0
 800a53e:	4413      	add	r3, r2
 800a540:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a544:	b17a      	cbz	r2, 800a566 <__mdiff+0x106>
 800a546:	6107      	str	r7, [r0, #16]
 800a548:	e7a4      	b.n	800a494 <__mdiff+0x34>
 800a54a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a54e:	fa11 f288 	uxtah	r2, r1, r8
 800a552:	1414      	asrs	r4, r2, #16
 800a554:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a558:	b292      	uxth	r2, r2
 800a55a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a55e:	f84e 2b04 	str.w	r2, [lr], #4
 800a562:	1421      	asrs	r1, r4, #16
 800a564:	e7e0      	b.n	800a528 <__mdiff+0xc8>
 800a566:	3f01      	subs	r7, #1
 800a568:	e7ea      	b.n	800a540 <__mdiff+0xe0>
 800a56a:	bf00      	nop
 800a56c:	0800c885 	.word	0x0800c885
 800a570:	0800c896 	.word	0x0800c896

0800a574 <__ulp>:
 800a574:	b082      	sub	sp, #8
 800a576:	ed8d 0b00 	vstr	d0, [sp]
 800a57a:	9a01      	ldr	r2, [sp, #4]
 800a57c:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <__ulp+0x48>)
 800a57e:	4013      	ands	r3, r2
 800a580:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a584:	2b00      	cmp	r3, #0
 800a586:	dc08      	bgt.n	800a59a <__ulp+0x26>
 800a588:	425b      	negs	r3, r3
 800a58a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a58e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a592:	da04      	bge.n	800a59e <__ulp+0x2a>
 800a594:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a598:	4113      	asrs	r3, r2
 800a59a:	2200      	movs	r2, #0
 800a59c:	e008      	b.n	800a5b0 <__ulp+0x3c>
 800a59e:	f1a2 0314 	sub.w	r3, r2, #20
 800a5a2:	2b1e      	cmp	r3, #30
 800a5a4:	bfda      	itte	le
 800a5a6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a5aa:	40da      	lsrle	r2, r3
 800a5ac:	2201      	movgt	r2, #1
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	ec41 0b10 	vmov	d0, r0, r1
 800a5b8:	b002      	add	sp, #8
 800a5ba:	4770      	bx	lr
 800a5bc:	7ff00000 	.word	0x7ff00000

0800a5c0 <__b2d>:
 800a5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c4:	6906      	ldr	r6, [r0, #16]
 800a5c6:	f100 0814 	add.w	r8, r0, #20
 800a5ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a5ce:	1f37      	subs	r7, r6, #4
 800a5d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	f7ff fd53 	bl	800a080 <__hi0bits>
 800a5da:	f1c0 0320 	rsb	r3, r0, #32
 800a5de:	280a      	cmp	r0, #10
 800a5e0:	600b      	str	r3, [r1, #0]
 800a5e2:	491b      	ldr	r1, [pc, #108]	; (800a650 <__b2d+0x90>)
 800a5e4:	dc15      	bgt.n	800a612 <__b2d+0x52>
 800a5e6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5ea:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5ee:	45b8      	cmp	r8, r7
 800a5f0:	ea43 0501 	orr.w	r5, r3, r1
 800a5f4:	bf34      	ite	cc
 800a5f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5fa:	2300      	movcs	r3, #0
 800a5fc:	3015      	adds	r0, #21
 800a5fe:	fa02 f000 	lsl.w	r0, r2, r0
 800a602:	fa23 f30c 	lsr.w	r3, r3, ip
 800a606:	4303      	orrs	r3, r0
 800a608:	461c      	mov	r4, r3
 800a60a:	ec45 4b10 	vmov	d0, r4, r5
 800a60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a612:	45b8      	cmp	r8, r7
 800a614:	bf3a      	itte	cc
 800a616:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a61a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a61e:	2300      	movcs	r3, #0
 800a620:	380b      	subs	r0, #11
 800a622:	d012      	beq.n	800a64a <__b2d+0x8a>
 800a624:	f1c0 0120 	rsb	r1, r0, #32
 800a628:	fa23 f401 	lsr.w	r4, r3, r1
 800a62c:	4082      	lsls	r2, r0
 800a62e:	4322      	orrs	r2, r4
 800a630:	4547      	cmp	r7, r8
 800a632:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a636:	bf8c      	ite	hi
 800a638:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a63c:	2200      	movls	r2, #0
 800a63e:	4083      	lsls	r3, r0
 800a640:	40ca      	lsrs	r2, r1
 800a642:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a646:	4313      	orrs	r3, r2
 800a648:	e7de      	b.n	800a608 <__b2d+0x48>
 800a64a:	ea42 0501 	orr.w	r5, r2, r1
 800a64e:	e7db      	b.n	800a608 <__b2d+0x48>
 800a650:	3ff00000 	.word	0x3ff00000

0800a654 <__d2b>:
 800a654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a658:	460f      	mov	r7, r1
 800a65a:	2101      	movs	r1, #1
 800a65c:	ec59 8b10 	vmov	r8, r9, d0
 800a660:	4616      	mov	r6, r2
 800a662:	f7ff fc1b 	bl	8009e9c <_Balloc>
 800a666:	4604      	mov	r4, r0
 800a668:	b930      	cbnz	r0, 800a678 <__d2b+0x24>
 800a66a:	4602      	mov	r2, r0
 800a66c:	4b24      	ldr	r3, [pc, #144]	; (800a700 <__d2b+0xac>)
 800a66e:	4825      	ldr	r0, [pc, #148]	; (800a704 <__d2b+0xb0>)
 800a670:	f240 310f 	movw	r1, #783	; 0x30f
 800a674:	f001 f9b0 	bl	800b9d8 <__assert_func>
 800a678:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a67c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a680:	bb2d      	cbnz	r5, 800a6ce <__d2b+0x7a>
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	f1b8 0300 	subs.w	r3, r8, #0
 800a688:	d026      	beq.n	800a6d8 <__d2b+0x84>
 800a68a:	4668      	mov	r0, sp
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	f7ff fd17 	bl	800a0c0 <__lo0bits>
 800a692:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a696:	b1e8      	cbz	r0, 800a6d4 <__d2b+0x80>
 800a698:	f1c0 0320 	rsb	r3, r0, #32
 800a69c:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a0:	430b      	orrs	r3, r1
 800a6a2:	40c2      	lsrs	r2, r0
 800a6a4:	6163      	str	r3, [r4, #20]
 800a6a6:	9201      	str	r2, [sp, #4]
 800a6a8:	9b01      	ldr	r3, [sp, #4]
 800a6aa:	61a3      	str	r3, [r4, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	bf14      	ite	ne
 800a6b0:	2202      	movne	r2, #2
 800a6b2:	2201      	moveq	r2, #1
 800a6b4:	6122      	str	r2, [r4, #16]
 800a6b6:	b1bd      	cbz	r5, 800a6e8 <__d2b+0x94>
 800a6b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6bc:	4405      	add	r5, r0
 800a6be:	603d      	str	r5, [r7, #0]
 800a6c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6c4:	6030      	str	r0, [r6, #0]
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	b003      	add	sp, #12
 800a6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6d2:	e7d6      	b.n	800a682 <__d2b+0x2e>
 800a6d4:	6161      	str	r1, [r4, #20]
 800a6d6:	e7e7      	b.n	800a6a8 <__d2b+0x54>
 800a6d8:	a801      	add	r0, sp, #4
 800a6da:	f7ff fcf1 	bl	800a0c0 <__lo0bits>
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	6163      	str	r3, [r4, #20]
 800a6e2:	3020      	adds	r0, #32
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	e7e5      	b.n	800a6b4 <__d2b+0x60>
 800a6e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6f0:	6038      	str	r0, [r7, #0]
 800a6f2:	6918      	ldr	r0, [r3, #16]
 800a6f4:	f7ff fcc4 	bl	800a080 <__hi0bits>
 800a6f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6fc:	e7e2      	b.n	800a6c4 <__d2b+0x70>
 800a6fe:	bf00      	nop
 800a700:	0800c885 	.word	0x0800c885
 800a704:	0800c896 	.word	0x0800c896

0800a708 <__ratio>:
 800a708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	4688      	mov	r8, r1
 800a70e:	4669      	mov	r1, sp
 800a710:	4681      	mov	r9, r0
 800a712:	f7ff ff55 	bl	800a5c0 <__b2d>
 800a716:	a901      	add	r1, sp, #4
 800a718:	4640      	mov	r0, r8
 800a71a:	ec55 4b10 	vmov	r4, r5, d0
 800a71e:	f7ff ff4f 	bl	800a5c0 <__b2d>
 800a722:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a726:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a72a:	eba3 0c02 	sub.w	ip, r3, r2
 800a72e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a732:	1a9b      	subs	r3, r3, r2
 800a734:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a738:	ec51 0b10 	vmov	r0, r1, d0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	bfd6      	itet	le
 800a740:	460a      	movle	r2, r1
 800a742:	462a      	movgt	r2, r5
 800a744:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a748:	468b      	mov	fp, r1
 800a74a:	462f      	mov	r7, r5
 800a74c:	bfd4      	ite	le
 800a74e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a752:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a756:	4620      	mov	r0, r4
 800a758:	ee10 2a10 	vmov	r2, s0
 800a75c:	465b      	mov	r3, fp
 800a75e:	4639      	mov	r1, r7
 800a760:	f7f6 f87c 	bl	800085c <__aeabi_ddiv>
 800a764:	ec41 0b10 	vmov	d0, r0, r1
 800a768:	b003      	add	sp, #12
 800a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a76e <__copybits>:
 800a76e:	3901      	subs	r1, #1
 800a770:	b570      	push	{r4, r5, r6, lr}
 800a772:	1149      	asrs	r1, r1, #5
 800a774:	6914      	ldr	r4, [r2, #16]
 800a776:	3101      	adds	r1, #1
 800a778:	f102 0314 	add.w	r3, r2, #20
 800a77c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a780:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a784:	1f05      	subs	r5, r0, #4
 800a786:	42a3      	cmp	r3, r4
 800a788:	d30c      	bcc.n	800a7a4 <__copybits+0x36>
 800a78a:	1aa3      	subs	r3, r4, r2
 800a78c:	3b11      	subs	r3, #17
 800a78e:	f023 0303 	bic.w	r3, r3, #3
 800a792:	3211      	adds	r2, #17
 800a794:	42a2      	cmp	r2, r4
 800a796:	bf88      	it	hi
 800a798:	2300      	movhi	r3, #0
 800a79a:	4418      	add	r0, r3
 800a79c:	2300      	movs	r3, #0
 800a79e:	4288      	cmp	r0, r1
 800a7a0:	d305      	bcc.n	800a7ae <__copybits+0x40>
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a7a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a7ac:	e7eb      	b.n	800a786 <__copybits+0x18>
 800a7ae:	f840 3b04 	str.w	r3, [r0], #4
 800a7b2:	e7f4      	b.n	800a79e <__copybits+0x30>

0800a7b4 <__any_on>:
 800a7b4:	f100 0214 	add.w	r2, r0, #20
 800a7b8:	6900      	ldr	r0, [r0, #16]
 800a7ba:	114b      	asrs	r3, r1, #5
 800a7bc:	4298      	cmp	r0, r3
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	db11      	blt.n	800a7e6 <__any_on+0x32>
 800a7c2:	dd0a      	ble.n	800a7da <__any_on+0x26>
 800a7c4:	f011 011f 	ands.w	r1, r1, #31
 800a7c8:	d007      	beq.n	800a7da <__any_on+0x26>
 800a7ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7ce:	fa24 f001 	lsr.w	r0, r4, r1
 800a7d2:	fa00 f101 	lsl.w	r1, r0, r1
 800a7d6:	428c      	cmp	r4, r1
 800a7d8:	d10b      	bne.n	800a7f2 <__any_on+0x3e>
 800a7da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d803      	bhi.n	800a7ea <__any_on+0x36>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	bd10      	pop	{r4, pc}
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	e7f7      	b.n	800a7da <__any_on+0x26>
 800a7ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7ee:	2900      	cmp	r1, #0
 800a7f0:	d0f5      	beq.n	800a7de <__any_on+0x2a>
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	e7f6      	b.n	800a7e4 <__any_on+0x30>

0800a7f6 <sulp>:
 800a7f6:	b570      	push	{r4, r5, r6, lr}
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	460d      	mov	r5, r1
 800a7fc:	ec45 4b10 	vmov	d0, r4, r5
 800a800:	4616      	mov	r6, r2
 800a802:	f7ff feb7 	bl	800a574 <__ulp>
 800a806:	ec51 0b10 	vmov	r0, r1, d0
 800a80a:	b17e      	cbz	r6, 800a82c <sulp+0x36>
 800a80c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a810:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a814:	2b00      	cmp	r3, #0
 800a816:	dd09      	ble.n	800a82c <sulp+0x36>
 800a818:	051b      	lsls	r3, r3, #20
 800a81a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a81e:	2400      	movs	r4, #0
 800a820:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a824:	4622      	mov	r2, r4
 800a826:	462b      	mov	r3, r5
 800a828:	f7f5 feee 	bl	8000608 <__aeabi_dmul>
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a830 <_strtod_l>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	ed2d 8b02 	vpush	{d8}
 800a838:	b09b      	sub	sp, #108	; 0x6c
 800a83a:	4604      	mov	r4, r0
 800a83c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a83e:	2200      	movs	r2, #0
 800a840:	9216      	str	r2, [sp, #88]	; 0x58
 800a842:	460d      	mov	r5, r1
 800a844:	f04f 0800 	mov.w	r8, #0
 800a848:	f04f 0900 	mov.w	r9, #0
 800a84c:	460a      	mov	r2, r1
 800a84e:	9215      	str	r2, [sp, #84]	; 0x54
 800a850:	7811      	ldrb	r1, [r2, #0]
 800a852:	292b      	cmp	r1, #43	; 0x2b
 800a854:	d04c      	beq.n	800a8f0 <_strtod_l+0xc0>
 800a856:	d83a      	bhi.n	800a8ce <_strtod_l+0x9e>
 800a858:	290d      	cmp	r1, #13
 800a85a:	d834      	bhi.n	800a8c6 <_strtod_l+0x96>
 800a85c:	2908      	cmp	r1, #8
 800a85e:	d834      	bhi.n	800a8ca <_strtod_l+0x9a>
 800a860:	2900      	cmp	r1, #0
 800a862:	d03d      	beq.n	800a8e0 <_strtod_l+0xb0>
 800a864:	2200      	movs	r2, #0
 800a866:	920a      	str	r2, [sp, #40]	; 0x28
 800a868:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a86a:	7832      	ldrb	r2, [r6, #0]
 800a86c:	2a30      	cmp	r2, #48	; 0x30
 800a86e:	f040 80b4 	bne.w	800a9da <_strtod_l+0x1aa>
 800a872:	7872      	ldrb	r2, [r6, #1]
 800a874:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a878:	2a58      	cmp	r2, #88	; 0x58
 800a87a:	d170      	bne.n	800a95e <_strtod_l+0x12e>
 800a87c:	9302      	str	r3, [sp, #8]
 800a87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	ab16      	add	r3, sp, #88	; 0x58
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	4a8e      	ldr	r2, [pc, #568]	; (800aac0 <_strtod_l+0x290>)
 800a888:	ab17      	add	r3, sp, #92	; 0x5c
 800a88a:	a915      	add	r1, sp, #84	; 0x54
 800a88c:	4620      	mov	r0, r4
 800a88e:	f001 f93f 	bl	800bb10 <__gethex>
 800a892:	f010 070f 	ands.w	r7, r0, #15
 800a896:	4605      	mov	r5, r0
 800a898:	d005      	beq.n	800a8a6 <_strtod_l+0x76>
 800a89a:	2f06      	cmp	r7, #6
 800a89c:	d12a      	bne.n	800a8f4 <_strtod_l+0xc4>
 800a89e:	3601      	adds	r6, #1
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	9615      	str	r6, [sp, #84]	; 0x54
 800a8a4:	930a      	str	r3, [sp, #40]	; 0x28
 800a8a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f040 857f 	bne.w	800b3ac <_strtod_l+0xb7c>
 800a8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b0:	b1db      	cbz	r3, 800a8ea <_strtod_l+0xba>
 800a8b2:	4642      	mov	r2, r8
 800a8b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a8b8:	ec43 2b10 	vmov	d0, r2, r3
 800a8bc:	b01b      	add	sp, #108	; 0x6c
 800a8be:	ecbd 8b02 	vpop	{d8}
 800a8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c6:	2920      	cmp	r1, #32
 800a8c8:	d1cc      	bne.n	800a864 <_strtod_l+0x34>
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	e7bf      	b.n	800a84e <_strtod_l+0x1e>
 800a8ce:	292d      	cmp	r1, #45	; 0x2d
 800a8d0:	d1c8      	bne.n	800a864 <_strtod_l+0x34>
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	910a      	str	r1, [sp, #40]	; 0x28
 800a8d6:	1c51      	adds	r1, r2, #1
 800a8d8:	9115      	str	r1, [sp, #84]	; 0x54
 800a8da:	7852      	ldrb	r2, [r2, #1]
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	d1c3      	bne.n	800a868 <_strtod_l+0x38>
 800a8e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8e2:	9515      	str	r5, [sp, #84]	; 0x54
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f040 855f 	bne.w	800b3a8 <_strtod_l+0xb78>
 800a8ea:	4642      	mov	r2, r8
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	e7e3      	b.n	800a8b8 <_strtod_l+0x88>
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	e7ef      	b.n	800a8d4 <_strtod_l+0xa4>
 800a8f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8f6:	b13a      	cbz	r2, 800a908 <_strtod_l+0xd8>
 800a8f8:	2135      	movs	r1, #53	; 0x35
 800a8fa:	a818      	add	r0, sp, #96	; 0x60
 800a8fc:	f7ff ff37 	bl	800a76e <__copybits>
 800a900:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a902:	4620      	mov	r0, r4
 800a904:	f7ff fb0a 	bl	8009f1c <_Bfree>
 800a908:	3f01      	subs	r7, #1
 800a90a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a90c:	2f04      	cmp	r7, #4
 800a90e:	d806      	bhi.n	800a91e <_strtod_l+0xee>
 800a910:	e8df f007 	tbb	[pc, r7]
 800a914:	201d0314 	.word	0x201d0314
 800a918:	14          	.byte	0x14
 800a919:	00          	.byte	0x00
 800a91a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a91e:	05e9      	lsls	r1, r5, #23
 800a920:	bf48      	it	mi
 800a922:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a926:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a92a:	0d1b      	lsrs	r3, r3, #20
 800a92c:	051b      	lsls	r3, r3, #20
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1b9      	bne.n	800a8a6 <_strtod_l+0x76>
 800a932:	f7fe fb03 	bl	8008f3c <__errno>
 800a936:	2322      	movs	r3, #34	; 0x22
 800a938:	6003      	str	r3, [r0, #0]
 800a93a:	e7b4      	b.n	800a8a6 <_strtod_l+0x76>
 800a93c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a940:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a944:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a948:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a94c:	e7e7      	b.n	800a91e <_strtod_l+0xee>
 800a94e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800aac8 <_strtod_l+0x298>
 800a952:	e7e4      	b.n	800a91e <_strtod_l+0xee>
 800a954:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a958:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a95c:	e7df      	b.n	800a91e <_strtod_l+0xee>
 800a95e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	9215      	str	r2, [sp, #84]	; 0x54
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	2b30      	cmp	r3, #48	; 0x30
 800a968:	d0f9      	beq.n	800a95e <_strtod_l+0x12e>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d09b      	beq.n	800a8a6 <_strtod_l+0x76>
 800a96e:	2301      	movs	r3, #1
 800a970:	f04f 0a00 	mov.w	sl, #0
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a978:	930b      	str	r3, [sp, #44]	; 0x2c
 800a97a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a97e:	46d3      	mov	fp, sl
 800a980:	220a      	movs	r2, #10
 800a982:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a984:	7806      	ldrb	r6, [r0, #0]
 800a986:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a98a:	b2d9      	uxtb	r1, r3
 800a98c:	2909      	cmp	r1, #9
 800a98e:	d926      	bls.n	800a9de <_strtod_l+0x1ae>
 800a990:	494c      	ldr	r1, [pc, #304]	; (800aac4 <_strtod_l+0x294>)
 800a992:	2201      	movs	r2, #1
 800a994:	f000 ffe6 	bl	800b964 <strncmp>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d030      	beq.n	800a9fe <_strtod_l+0x1ce>
 800a99c:	2000      	movs	r0, #0
 800a99e:	4632      	mov	r2, r6
 800a9a0:	9005      	str	r0, [sp, #20]
 800a9a2:	465e      	mov	r6, fp
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2a65      	cmp	r2, #101	; 0x65
 800a9a8:	d001      	beq.n	800a9ae <_strtod_l+0x17e>
 800a9aa:	2a45      	cmp	r2, #69	; 0x45
 800a9ac:	d113      	bne.n	800a9d6 <_strtod_l+0x1a6>
 800a9ae:	b91e      	cbnz	r6, 800a9b8 <_strtod_l+0x188>
 800a9b0:	9a04      	ldr	r2, [sp, #16]
 800a9b2:	4302      	orrs	r2, r0
 800a9b4:	d094      	beq.n	800a8e0 <_strtod_l+0xb0>
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a9ba:	1c6a      	adds	r2, r5, #1
 800a9bc:	9215      	str	r2, [sp, #84]	; 0x54
 800a9be:	786a      	ldrb	r2, [r5, #1]
 800a9c0:	2a2b      	cmp	r2, #43	; 0x2b
 800a9c2:	d074      	beq.n	800aaae <_strtod_l+0x27e>
 800a9c4:	2a2d      	cmp	r2, #45	; 0x2d
 800a9c6:	d078      	beq.n	800aaba <_strtod_l+0x28a>
 800a9c8:	f04f 0c00 	mov.w	ip, #0
 800a9cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a9d0:	2909      	cmp	r1, #9
 800a9d2:	d97f      	bls.n	800aad4 <_strtod_l+0x2a4>
 800a9d4:	9515      	str	r5, [sp, #84]	; 0x54
 800a9d6:	2700      	movs	r7, #0
 800a9d8:	e09e      	b.n	800ab18 <_strtod_l+0x2e8>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	e7c8      	b.n	800a970 <_strtod_l+0x140>
 800a9de:	f1bb 0f08 	cmp.w	fp, #8
 800a9e2:	bfd8      	it	le
 800a9e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a9e6:	f100 0001 	add.w	r0, r0, #1
 800a9ea:	bfda      	itte	le
 800a9ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9f0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a9f2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a9f6:	f10b 0b01 	add.w	fp, fp, #1
 800a9fa:	9015      	str	r0, [sp, #84]	; 0x54
 800a9fc:	e7c1      	b.n	800a982 <_strtod_l+0x152>
 800a9fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	9215      	str	r2, [sp, #84]	; 0x54
 800aa04:	785a      	ldrb	r2, [r3, #1]
 800aa06:	f1bb 0f00 	cmp.w	fp, #0
 800aa0a:	d037      	beq.n	800aa7c <_strtod_l+0x24c>
 800aa0c:	9005      	str	r0, [sp, #20]
 800aa0e:	465e      	mov	r6, fp
 800aa10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	d912      	bls.n	800aa3e <_strtod_l+0x20e>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e7c4      	b.n	800a9a6 <_strtod_l+0x176>
 800aa1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa1e:	1c5a      	adds	r2, r3, #1
 800aa20:	9215      	str	r2, [sp, #84]	; 0x54
 800aa22:	785a      	ldrb	r2, [r3, #1]
 800aa24:	3001      	adds	r0, #1
 800aa26:	2a30      	cmp	r2, #48	; 0x30
 800aa28:	d0f8      	beq.n	800aa1c <_strtod_l+0x1ec>
 800aa2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aa2e:	2b08      	cmp	r3, #8
 800aa30:	f200 84c1 	bhi.w	800b3b6 <_strtod_l+0xb86>
 800aa34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa36:	9005      	str	r0, [sp, #20]
 800aa38:	2000      	movs	r0, #0
 800aa3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	3a30      	subs	r2, #48	; 0x30
 800aa40:	f100 0301 	add.w	r3, r0, #1
 800aa44:	d014      	beq.n	800aa70 <_strtod_l+0x240>
 800aa46:	9905      	ldr	r1, [sp, #20]
 800aa48:	4419      	add	r1, r3
 800aa4a:	9105      	str	r1, [sp, #20]
 800aa4c:	4633      	mov	r3, r6
 800aa4e:	eb00 0c06 	add.w	ip, r0, r6
 800aa52:	210a      	movs	r1, #10
 800aa54:	4563      	cmp	r3, ip
 800aa56:	d113      	bne.n	800aa80 <_strtod_l+0x250>
 800aa58:	1833      	adds	r3, r6, r0
 800aa5a:	2b08      	cmp	r3, #8
 800aa5c:	f106 0601 	add.w	r6, r6, #1
 800aa60:	4406      	add	r6, r0
 800aa62:	dc1a      	bgt.n	800aa9a <_strtod_l+0x26a>
 800aa64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa66:	230a      	movs	r3, #10
 800aa68:	fb03 2301 	mla	r3, r3, r1, r2
 800aa6c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa6e:	2300      	movs	r3, #0
 800aa70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa72:	1c51      	adds	r1, r2, #1
 800aa74:	9115      	str	r1, [sp, #84]	; 0x54
 800aa76:	7852      	ldrb	r2, [r2, #1]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	e7c9      	b.n	800aa10 <_strtod_l+0x1e0>
 800aa7c:	4658      	mov	r0, fp
 800aa7e:	e7d2      	b.n	800aa26 <_strtod_l+0x1f6>
 800aa80:	2b08      	cmp	r3, #8
 800aa82:	f103 0301 	add.w	r3, r3, #1
 800aa86:	dc03      	bgt.n	800aa90 <_strtod_l+0x260>
 800aa88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa8a:	434f      	muls	r7, r1
 800aa8c:	9709      	str	r7, [sp, #36]	; 0x24
 800aa8e:	e7e1      	b.n	800aa54 <_strtod_l+0x224>
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	bfd8      	it	le
 800aa94:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aa98:	e7dc      	b.n	800aa54 <_strtod_l+0x224>
 800aa9a:	2e10      	cmp	r6, #16
 800aa9c:	bfdc      	itt	le
 800aa9e:	230a      	movle	r3, #10
 800aaa0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aaa4:	e7e3      	b.n	800aa6e <_strtod_l+0x23e>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	9305      	str	r3, [sp, #20]
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e780      	b.n	800a9b0 <_strtod_l+0x180>
 800aaae:	f04f 0c00 	mov.w	ip, #0
 800aab2:	1caa      	adds	r2, r5, #2
 800aab4:	9215      	str	r2, [sp, #84]	; 0x54
 800aab6:	78aa      	ldrb	r2, [r5, #2]
 800aab8:	e788      	b.n	800a9cc <_strtod_l+0x19c>
 800aaba:	f04f 0c01 	mov.w	ip, #1
 800aabe:	e7f8      	b.n	800aab2 <_strtod_l+0x282>
 800aac0:	0800c9f0 	.word	0x0800c9f0
 800aac4:	0800c9ec 	.word	0x0800c9ec
 800aac8:	7ff00000 	.word	0x7ff00000
 800aacc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aace:	1c51      	adds	r1, r2, #1
 800aad0:	9115      	str	r1, [sp, #84]	; 0x54
 800aad2:	7852      	ldrb	r2, [r2, #1]
 800aad4:	2a30      	cmp	r2, #48	; 0x30
 800aad6:	d0f9      	beq.n	800aacc <_strtod_l+0x29c>
 800aad8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aadc:	2908      	cmp	r1, #8
 800aade:	f63f af7a 	bhi.w	800a9d6 <_strtod_l+0x1a6>
 800aae2:	3a30      	subs	r2, #48	; 0x30
 800aae4:	9208      	str	r2, [sp, #32]
 800aae6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aae8:	920c      	str	r2, [sp, #48]	; 0x30
 800aaea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aaec:	1c57      	adds	r7, r2, #1
 800aaee:	9715      	str	r7, [sp, #84]	; 0x54
 800aaf0:	7852      	ldrb	r2, [r2, #1]
 800aaf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aaf6:	f1be 0f09 	cmp.w	lr, #9
 800aafa:	d938      	bls.n	800ab6e <_strtod_l+0x33e>
 800aafc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aafe:	1a7f      	subs	r7, r7, r1
 800ab00:	2f08      	cmp	r7, #8
 800ab02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ab06:	dc03      	bgt.n	800ab10 <_strtod_l+0x2e0>
 800ab08:	9908      	ldr	r1, [sp, #32]
 800ab0a:	428f      	cmp	r7, r1
 800ab0c:	bfa8      	it	ge
 800ab0e:	460f      	movge	r7, r1
 800ab10:	f1bc 0f00 	cmp.w	ip, #0
 800ab14:	d000      	beq.n	800ab18 <_strtod_l+0x2e8>
 800ab16:	427f      	negs	r7, r7
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	d14f      	bne.n	800abbc <_strtod_l+0x38c>
 800ab1c:	9904      	ldr	r1, [sp, #16]
 800ab1e:	4301      	orrs	r1, r0
 800ab20:	f47f aec1 	bne.w	800a8a6 <_strtod_l+0x76>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f47f aedb 	bne.w	800a8e0 <_strtod_l+0xb0>
 800ab2a:	2a69      	cmp	r2, #105	; 0x69
 800ab2c:	d029      	beq.n	800ab82 <_strtod_l+0x352>
 800ab2e:	dc26      	bgt.n	800ab7e <_strtod_l+0x34e>
 800ab30:	2a49      	cmp	r2, #73	; 0x49
 800ab32:	d026      	beq.n	800ab82 <_strtod_l+0x352>
 800ab34:	2a4e      	cmp	r2, #78	; 0x4e
 800ab36:	f47f aed3 	bne.w	800a8e0 <_strtod_l+0xb0>
 800ab3a:	499b      	ldr	r1, [pc, #620]	; (800ada8 <_strtod_l+0x578>)
 800ab3c:	a815      	add	r0, sp, #84	; 0x54
 800ab3e:	f001 fa27 	bl	800bf90 <__match>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	f43f aecc 	beq.w	800a8e0 <_strtod_l+0xb0>
 800ab48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b28      	cmp	r3, #40	; 0x28
 800ab4e:	d12f      	bne.n	800abb0 <_strtod_l+0x380>
 800ab50:	4996      	ldr	r1, [pc, #600]	; (800adac <_strtod_l+0x57c>)
 800ab52:	aa18      	add	r2, sp, #96	; 0x60
 800ab54:	a815      	add	r0, sp, #84	; 0x54
 800ab56:	f001 fa2f 	bl	800bfb8 <__hexnan>
 800ab5a:	2805      	cmp	r0, #5
 800ab5c:	d128      	bne.n	800abb0 <_strtod_l+0x380>
 800ab5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ab64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ab68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ab6c:	e69b      	b.n	800a8a6 <_strtod_l+0x76>
 800ab6e:	9f08      	ldr	r7, [sp, #32]
 800ab70:	210a      	movs	r1, #10
 800ab72:	fb01 2107 	mla	r1, r1, r7, r2
 800ab76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ab7a:	9208      	str	r2, [sp, #32]
 800ab7c:	e7b5      	b.n	800aaea <_strtod_l+0x2ba>
 800ab7e:	2a6e      	cmp	r2, #110	; 0x6e
 800ab80:	e7d9      	b.n	800ab36 <_strtod_l+0x306>
 800ab82:	498b      	ldr	r1, [pc, #556]	; (800adb0 <_strtod_l+0x580>)
 800ab84:	a815      	add	r0, sp, #84	; 0x54
 800ab86:	f001 fa03 	bl	800bf90 <__match>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	f43f aea8 	beq.w	800a8e0 <_strtod_l+0xb0>
 800ab90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab92:	4988      	ldr	r1, [pc, #544]	; (800adb4 <_strtod_l+0x584>)
 800ab94:	3b01      	subs	r3, #1
 800ab96:	a815      	add	r0, sp, #84	; 0x54
 800ab98:	9315      	str	r3, [sp, #84]	; 0x54
 800ab9a:	f001 f9f9 	bl	800bf90 <__match>
 800ab9e:	b910      	cbnz	r0, 800aba6 <_strtod_l+0x376>
 800aba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aba2:	3301      	adds	r3, #1
 800aba4:	9315      	str	r3, [sp, #84]	; 0x54
 800aba6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800adc4 <_strtod_l+0x594>
 800abaa:	f04f 0800 	mov.w	r8, #0
 800abae:	e67a      	b.n	800a8a6 <_strtod_l+0x76>
 800abb0:	4881      	ldr	r0, [pc, #516]	; (800adb8 <_strtod_l+0x588>)
 800abb2:	f000 ff09 	bl	800b9c8 <nan>
 800abb6:	ec59 8b10 	vmov	r8, r9, d0
 800abba:	e674      	b.n	800a8a6 <_strtod_l+0x76>
 800abbc:	9b05      	ldr	r3, [sp, #20]
 800abbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abc0:	1afb      	subs	r3, r7, r3
 800abc2:	f1bb 0f00 	cmp.w	fp, #0
 800abc6:	bf08      	it	eq
 800abc8:	46b3      	moveq	fp, r6
 800abca:	2e10      	cmp	r6, #16
 800abcc:	9308      	str	r3, [sp, #32]
 800abce:	4635      	mov	r5, r6
 800abd0:	bfa8      	it	ge
 800abd2:	2510      	movge	r5, #16
 800abd4:	f7f5 fc9e 	bl	8000514 <__aeabi_ui2d>
 800abd8:	2e09      	cmp	r6, #9
 800abda:	4680      	mov	r8, r0
 800abdc:	4689      	mov	r9, r1
 800abde:	dd13      	ble.n	800ac08 <_strtod_l+0x3d8>
 800abe0:	4b76      	ldr	r3, [pc, #472]	; (800adbc <_strtod_l+0x58c>)
 800abe2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800abe6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800abea:	f7f5 fd0d 	bl	8000608 <__aeabi_dmul>
 800abee:	4680      	mov	r8, r0
 800abf0:	4650      	mov	r0, sl
 800abf2:	4689      	mov	r9, r1
 800abf4:	f7f5 fc8e 	bl	8000514 <__aeabi_ui2d>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	4640      	mov	r0, r8
 800abfe:	4649      	mov	r1, r9
 800ac00:	f7f5 fb4c 	bl	800029c <__adddf3>
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	2e0f      	cmp	r6, #15
 800ac0a:	dc38      	bgt.n	800ac7e <_strtod_l+0x44e>
 800ac0c:	9b08      	ldr	r3, [sp, #32]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f43f ae49 	beq.w	800a8a6 <_strtod_l+0x76>
 800ac14:	dd24      	ble.n	800ac60 <_strtod_l+0x430>
 800ac16:	2b16      	cmp	r3, #22
 800ac18:	dc0b      	bgt.n	800ac32 <_strtod_l+0x402>
 800ac1a:	4968      	ldr	r1, [pc, #416]	; (800adbc <_strtod_l+0x58c>)
 800ac1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac24:	4642      	mov	r2, r8
 800ac26:	464b      	mov	r3, r9
 800ac28:	f7f5 fcee 	bl	8000608 <__aeabi_dmul>
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	4689      	mov	r9, r1
 800ac30:	e639      	b.n	800a8a6 <_strtod_l+0x76>
 800ac32:	9a08      	ldr	r2, [sp, #32]
 800ac34:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	db20      	blt.n	800ac7e <_strtod_l+0x44e>
 800ac3c:	4c5f      	ldr	r4, [pc, #380]	; (800adbc <_strtod_l+0x58c>)
 800ac3e:	f1c6 060f 	rsb	r6, r6, #15
 800ac42:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ac46:	4642      	mov	r2, r8
 800ac48:	464b      	mov	r3, r9
 800ac4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac4e:	f7f5 fcdb 	bl	8000608 <__aeabi_dmul>
 800ac52:	9b08      	ldr	r3, [sp, #32]
 800ac54:	1b9e      	subs	r6, r3, r6
 800ac56:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ac5a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac5e:	e7e3      	b.n	800ac28 <_strtod_l+0x3f8>
 800ac60:	9b08      	ldr	r3, [sp, #32]
 800ac62:	3316      	adds	r3, #22
 800ac64:	db0b      	blt.n	800ac7e <_strtod_l+0x44e>
 800ac66:	9b05      	ldr	r3, [sp, #20]
 800ac68:	1bdf      	subs	r7, r3, r7
 800ac6a:	4b54      	ldr	r3, [pc, #336]	; (800adbc <_strtod_l+0x58c>)
 800ac6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ac70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f5 fdf0 	bl	800085c <__aeabi_ddiv>
 800ac7c:	e7d6      	b.n	800ac2c <_strtod_l+0x3fc>
 800ac7e:	9b08      	ldr	r3, [sp, #32]
 800ac80:	1b75      	subs	r5, r6, r5
 800ac82:	441d      	add	r5, r3
 800ac84:	2d00      	cmp	r5, #0
 800ac86:	dd70      	ble.n	800ad6a <_strtod_l+0x53a>
 800ac88:	f015 030f 	ands.w	r3, r5, #15
 800ac8c:	d00a      	beq.n	800aca4 <_strtod_l+0x474>
 800ac8e:	494b      	ldr	r1, [pc, #300]	; (800adbc <_strtod_l+0x58c>)
 800ac90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac94:	4642      	mov	r2, r8
 800ac96:	464b      	mov	r3, r9
 800ac98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac9c:	f7f5 fcb4 	bl	8000608 <__aeabi_dmul>
 800aca0:	4680      	mov	r8, r0
 800aca2:	4689      	mov	r9, r1
 800aca4:	f035 050f 	bics.w	r5, r5, #15
 800aca8:	d04d      	beq.n	800ad46 <_strtod_l+0x516>
 800acaa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800acae:	dd22      	ble.n	800acf6 <_strtod_l+0x4c6>
 800acb0:	2500      	movs	r5, #0
 800acb2:	46ab      	mov	fp, r5
 800acb4:	9509      	str	r5, [sp, #36]	; 0x24
 800acb6:	9505      	str	r5, [sp, #20]
 800acb8:	2322      	movs	r3, #34	; 0x22
 800acba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800adc4 <_strtod_l+0x594>
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	f04f 0800 	mov.w	r8, #0
 800acc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f43f aded 	beq.w	800a8a6 <_strtod_l+0x76>
 800accc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800acce:	4620      	mov	r0, r4
 800acd0:	f7ff f924 	bl	8009f1c <_Bfree>
 800acd4:	9905      	ldr	r1, [sp, #20]
 800acd6:	4620      	mov	r0, r4
 800acd8:	f7ff f920 	bl	8009f1c <_Bfree>
 800acdc:	4659      	mov	r1, fp
 800acde:	4620      	mov	r0, r4
 800ace0:	f7ff f91c 	bl	8009f1c <_Bfree>
 800ace4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ace6:	4620      	mov	r0, r4
 800ace8:	f7ff f918 	bl	8009f1c <_Bfree>
 800acec:	4629      	mov	r1, r5
 800acee:	4620      	mov	r0, r4
 800acf0:	f7ff f914 	bl	8009f1c <_Bfree>
 800acf4:	e5d7      	b.n	800a8a6 <_strtod_l+0x76>
 800acf6:	4b32      	ldr	r3, [pc, #200]	; (800adc0 <_strtod_l+0x590>)
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	2300      	movs	r3, #0
 800acfc:	112d      	asrs	r5, r5, #4
 800acfe:	4640      	mov	r0, r8
 800ad00:	4649      	mov	r1, r9
 800ad02:	469a      	mov	sl, r3
 800ad04:	2d01      	cmp	r5, #1
 800ad06:	dc21      	bgt.n	800ad4c <_strtod_l+0x51c>
 800ad08:	b10b      	cbz	r3, 800ad0e <_strtod_l+0x4de>
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	4689      	mov	r9, r1
 800ad0e:	492c      	ldr	r1, [pc, #176]	; (800adc0 <_strtod_l+0x590>)
 800ad10:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ad14:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ad18:	4642      	mov	r2, r8
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad20:	f7f5 fc72 	bl	8000608 <__aeabi_dmul>
 800ad24:	4b27      	ldr	r3, [pc, #156]	; (800adc4 <_strtod_l+0x594>)
 800ad26:	460a      	mov	r2, r1
 800ad28:	400b      	ands	r3, r1
 800ad2a:	4927      	ldr	r1, [pc, #156]	; (800adc8 <_strtod_l+0x598>)
 800ad2c:	428b      	cmp	r3, r1
 800ad2e:	4680      	mov	r8, r0
 800ad30:	d8be      	bhi.n	800acb0 <_strtod_l+0x480>
 800ad32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ad36:	428b      	cmp	r3, r1
 800ad38:	bf86      	itte	hi
 800ad3a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800adcc <_strtod_l+0x59c>
 800ad3e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800ad42:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ad46:	2300      	movs	r3, #0
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	e07b      	b.n	800ae44 <_strtod_l+0x614>
 800ad4c:	07ea      	lsls	r2, r5, #31
 800ad4e:	d505      	bpl.n	800ad5c <_strtod_l+0x52c>
 800ad50:	9b04      	ldr	r3, [sp, #16]
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	f7f5 fc57 	bl	8000608 <__aeabi_dmul>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	9a04      	ldr	r2, [sp, #16]
 800ad5e:	3208      	adds	r2, #8
 800ad60:	f10a 0a01 	add.w	sl, sl, #1
 800ad64:	106d      	asrs	r5, r5, #1
 800ad66:	9204      	str	r2, [sp, #16]
 800ad68:	e7cc      	b.n	800ad04 <_strtod_l+0x4d4>
 800ad6a:	d0ec      	beq.n	800ad46 <_strtod_l+0x516>
 800ad6c:	426d      	negs	r5, r5
 800ad6e:	f015 020f 	ands.w	r2, r5, #15
 800ad72:	d00a      	beq.n	800ad8a <_strtod_l+0x55a>
 800ad74:	4b11      	ldr	r3, [pc, #68]	; (800adbc <_strtod_l+0x58c>)
 800ad76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4649      	mov	r1, r9
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	f7f5 fd6b 	bl	800085c <__aeabi_ddiv>
 800ad86:	4680      	mov	r8, r0
 800ad88:	4689      	mov	r9, r1
 800ad8a:	112d      	asrs	r5, r5, #4
 800ad8c:	d0db      	beq.n	800ad46 <_strtod_l+0x516>
 800ad8e:	2d1f      	cmp	r5, #31
 800ad90:	dd1e      	ble.n	800add0 <_strtod_l+0x5a0>
 800ad92:	2500      	movs	r5, #0
 800ad94:	46ab      	mov	fp, r5
 800ad96:	9509      	str	r5, [sp, #36]	; 0x24
 800ad98:	9505      	str	r5, [sp, #20]
 800ad9a:	2322      	movs	r3, #34	; 0x22
 800ad9c:	f04f 0800 	mov.w	r8, #0
 800ada0:	f04f 0900 	mov.w	r9, #0
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	e78d      	b.n	800acc4 <_strtod_l+0x494>
 800ada8:	0800c7dd 	.word	0x0800c7dd
 800adac:	0800ca04 	.word	0x0800ca04
 800adb0:	0800c7d5 	.word	0x0800c7d5
 800adb4:	0800c80c 	.word	0x0800c80c
 800adb8:	0800cb95 	.word	0x0800cb95
 800adbc:	0800c918 	.word	0x0800c918
 800adc0:	0800c8f0 	.word	0x0800c8f0
 800adc4:	7ff00000 	.word	0x7ff00000
 800adc8:	7ca00000 	.word	0x7ca00000
 800adcc:	7fefffff 	.word	0x7fefffff
 800add0:	f015 0310 	ands.w	r3, r5, #16
 800add4:	bf18      	it	ne
 800add6:	236a      	movne	r3, #106	; 0x6a
 800add8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b17c <_strtod_l+0x94c>
 800addc:	9304      	str	r3, [sp, #16]
 800adde:	4640      	mov	r0, r8
 800ade0:	4649      	mov	r1, r9
 800ade2:	2300      	movs	r3, #0
 800ade4:	07ea      	lsls	r2, r5, #31
 800ade6:	d504      	bpl.n	800adf2 <_strtod_l+0x5c2>
 800ade8:	e9da 2300 	ldrd	r2, r3, [sl]
 800adec:	f7f5 fc0c 	bl	8000608 <__aeabi_dmul>
 800adf0:	2301      	movs	r3, #1
 800adf2:	106d      	asrs	r5, r5, #1
 800adf4:	f10a 0a08 	add.w	sl, sl, #8
 800adf8:	d1f4      	bne.n	800ade4 <_strtod_l+0x5b4>
 800adfa:	b10b      	cbz	r3, 800ae00 <_strtod_l+0x5d0>
 800adfc:	4680      	mov	r8, r0
 800adfe:	4689      	mov	r9, r1
 800ae00:	9b04      	ldr	r3, [sp, #16]
 800ae02:	b1bb      	cbz	r3, 800ae34 <_strtod_l+0x604>
 800ae04:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ae08:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	4649      	mov	r1, r9
 800ae10:	dd10      	ble.n	800ae34 <_strtod_l+0x604>
 800ae12:	2b1f      	cmp	r3, #31
 800ae14:	f340 811e 	ble.w	800b054 <_strtod_l+0x824>
 800ae18:	2b34      	cmp	r3, #52	; 0x34
 800ae1a:	bfde      	ittt	le
 800ae1c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800ae20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ae24:	4093      	lslle	r3, r2
 800ae26:	f04f 0800 	mov.w	r8, #0
 800ae2a:	bfcc      	ite	gt
 800ae2c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ae30:	ea03 0901 	andle.w	r9, r3, r1
 800ae34:	2200      	movs	r2, #0
 800ae36:	2300      	movs	r3, #0
 800ae38:	4640      	mov	r0, r8
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	f7f5 fe4c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d1a6      	bne.n	800ad92 <_strtod_l+0x562>
 800ae44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae4a:	4633      	mov	r3, r6
 800ae4c:	465a      	mov	r2, fp
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f7ff f8cc 	bl	8009fec <__s2b>
 800ae54:	9009      	str	r0, [sp, #36]	; 0x24
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f43f af2a 	beq.w	800acb0 <_strtod_l+0x480>
 800ae5c:	9a08      	ldr	r2, [sp, #32]
 800ae5e:	9b05      	ldr	r3, [sp, #20]
 800ae60:	2a00      	cmp	r2, #0
 800ae62:	eba3 0307 	sub.w	r3, r3, r7
 800ae66:	bfa8      	it	ge
 800ae68:	2300      	movge	r3, #0
 800ae6a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae6c:	2500      	movs	r5, #0
 800ae6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae72:	9312      	str	r3, [sp, #72]	; 0x48
 800ae74:	46ab      	mov	fp, r5
 800ae76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae78:	4620      	mov	r0, r4
 800ae7a:	6859      	ldr	r1, [r3, #4]
 800ae7c:	f7ff f80e 	bl	8009e9c <_Balloc>
 800ae80:	9005      	str	r0, [sp, #20]
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f43f af18 	beq.w	800acb8 <_strtod_l+0x488>
 800ae88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8a:	691a      	ldr	r2, [r3, #16]
 800ae8c:	3202      	adds	r2, #2
 800ae8e:	f103 010c 	add.w	r1, r3, #12
 800ae92:	0092      	lsls	r2, r2, #2
 800ae94:	300c      	adds	r0, #12
 800ae96:	f000 fd87 	bl	800b9a8 <memcpy>
 800ae9a:	ec49 8b10 	vmov	d0, r8, r9
 800ae9e:	aa18      	add	r2, sp, #96	; 0x60
 800aea0:	a917      	add	r1, sp, #92	; 0x5c
 800aea2:	4620      	mov	r0, r4
 800aea4:	f7ff fbd6 	bl	800a654 <__d2b>
 800aea8:	ec49 8b18 	vmov	d8, r8, r9
 800aeac:	9016      	str	r0, [sp, #88]	; 0x58
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f43f af02 	beq.w	800acb8 <_strtod_l+0x488>
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f7ff f930 	bl	800a11c <__i2b>
 800aebc:	4683      	mov	fp, r0
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f43f aefa 	beq.w	800acb8 <_strtod_l+0x488>
 800aec4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800aec6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aec8:	2e00      	cmp	r6, #0
 800aeca:	bfab      	itete	ge
 800aecc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800aece:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aed0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aed2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aed6:	bfac      	ite	ge
 800aed8:	eb06 0a03 	addge.w	sl, r6, r3
 800aedc:	1b9f      	sublt	r7, r3, r6
 800aede:	9b04      	ldr	r3, [sp, #16]
 800aee0:	1af6      	subs	r6, r6, r3
 800aee2:	4416      	add	r6, r2
 800aee4:	4ba0      	ldr	r3, [pc, #640]	; (800b168 <_strtod_l+0x938>)
 800aee6:	3e01      	subs	r6, #1
 800aee8:	429e      	cmp	r6, r3
 800aeea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aeee:	f280 80c4 	bge.w	800b07a <_strtod_l+0x84a>
 800aef2:	1b9b      	subs	r3, r3, r6
 800aef4:	2b1f      	cmp	r3, #31
 800aef6:	eba2 0203 	sub.w	r2, r2, r3
 800aefa:	f04f 0101 	mov.w	r1, #1
 800aefe:	f300 80b0 	bgt.w	800b062 <_strtod_l+0x832>
 800af02:	fa01 f303 	lsl.w	r3, r1, r3
 800af06:	930e      	str	r3, [sp, #56]	; 0x38
 800af08:	2300      	movs	r3, #0
 800af0a:	930d      	str	r3, [sp, #52]	; 0x34
 800af0c:	eb0a 0602 	add.w	r6, sl, r2
 800af10:	9b04      	ldr	r3, [sp, #16]
 800af12:	45b2      	cmp	sl, r6
 800af14:	4417      	add	r7, r2
 800af16:	441f      	add	r7, r3
 800af18:	4653      	mov	r3, sl
 800af1a:	bfa8      	it	ge
 800af1c:	4633      	movge	r3, r6
 800af1e:	42bb      	cmp	r3, r7
 800af20:	bfa8      	it	ge
 800af22:	463b      	movge	r3, r7
 800af24:	2b00      	cmp	r3, #0
 800af26:	bfc2      	ittt	gt
 800af28:	1af6      	subgt	r6, r6, r3
 800af2a:	1aff      	subgt	r7, r7, r3
 800af2c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800af30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af32:	2b00      	cmp	r3, #0
 800af34:	dd17      	ble.n	800af66 <_strtod_l+0x736>
 800af36:	4659      	mov	r1, fp
 800af38:	461a      	mov	r2, r3
 800af3a:	4620      	mov	r0, r4
 800af3c:	f7ff f9ae 	bl	800a29c <__pow5mult>
 800af40:	4683      	mov	fp, r0
 800af42:	2800      	cmp	r0, #0
 800af44:	f43f aeb8 	beq.w	800acb8 <_strtod_l+0x488>
 800af48:	4601      	mov	r1, r0
 800af4a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af4c:	4620      	mov	r0, r4
 800af4e:	f7ff f8fb 	bl	800a148 <__multiply>
 800af52:	900b      	str	r0, [sp, #44]	; 0x2c
 800af54:	2800      	cmp	r0, #0
 800af56:	f43f aeaf 	beq.w	800acb8 <_strtod_l+0x488>
 800af5a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af5c:	4620      	mov	r0, r4
 800af5e:	f7fe ffdd 	bl	8009f1c <_Bfree>
 800af62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af64:	9316      	str	r3, [sp, #88]	; 0x58
 800af66:	2e00      	cmp	r6, #0
 800af68:	f300 808c 	bgt.w	800b084 <_strtod_l+0x854>
 800af6c:	9b08      	ldr	r3, [sp, #32]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dd08      	ble.n	800af84 <_strtod_l+0x754>
 800af72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af74:	9905      	ldr	r1, [sp, #20]
 800af76:	4620      	mov	r0, r4
 800af78:	f7ff f990 	bl	800a29c <__pow5mult>
 800af7c:	9005      	str	r0, [sp, #20]
 800af7e:	2800      	cmp	r0, #0
 800af80:	f43f ae9a 	beq.w	800acb8 <_strtod_l+0x488>
 800af84:	2f00      	cmp	r7, #0
 800af86:	dd08      	ble.n	800af9a <_strtod_l+0x76a>
 800af88:	9905      	ldr	r1, [sp, #20]
 800af8a:	463a      	mov	r2, r7
 800af8c:	4620      	mov	r0, r4
 800af8e:	f7ff f9df 	bl	800a350 <__lshift>
 800af92:	9005      	str	r0, [sp, #20]
 800af94:	2800      	cmp	r0, #0
 800af96:	f43f ae8f 	beq.w	800acb8 <_strtod_l+0x488>
 800af9a:	f1ba 0f00 	cmp.w	sl, #0
 800af9e:	dd08      	ble.n	800afb2 <_strtod_l+0x782>
 800afa0:	4659      	mov	r1, fp
 800afa2:	4652      	mov	r2, sl
 800afa4:	4620      	mov	r0, r4
 800afa6:	f7ff f9d3 	bl	800a350 <__lshift>
 800afaa:	4683      	mov	fp, r0
 800afac:	2800      	cmp	r0, #0
 800afae:	f43f ae83 	beq.w	800acb8 <_strtod_l+0x488>
 800afb2:	9a05      	ldr	r2, [sp, #20]
 800afb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800afb6:	4620      	mov	r0, r4
 800afb8:	f7ff fa52 	bl	800a460 <__mdiff>
 800afbc:	4605      	mov	r5, r0
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f43f ae7a 	beq.w	800acb8 <_strtod_l+0x488>
 800afc4:	68c3      	ldr	r3, [r0, #12]
 800afc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800afc8:	2300      	movs	r3, #0
 800afca:	60c3      	str	r3, [r0, #12]
 800afcc:	4659      	mov	r1, fp
 800afce:	f7ff fa2b 	bl	800a428 <__mcmp>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	da60      	bge.n	800b098 <_strtod_l+0x868>
 800afd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afd8:	ea53 0308 	orrs.w	r3, r3, r8
 800afdc:	f040 8084 	bne.w	800b0e8 <_strtod_l+0x8b8>
 800afe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d17f      	bne.n	800b0e8 <_strtod_l+0x8b8>
 800afe8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afec:	0d1b      	lsrs	r3, r3, #20
 800afee:	051b      	lsls	r3, r3, #20
 800aff0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aff4:	d978      	bls.n	800b0e8 <_strtod_l+0x8b8>
 800aff6:	696b      	ldr	r3, [r5, #20]
 800aff8:	b913      	cbnz	r3, 800b000 <_strtod_l+0x7d0>
 800affa:	692b      	ldr	r3, [r5, #16]
 800affc:	2b01      	cmp	r3, #1
 800affe:	dd73      	ble.n	800b0e8 <_strtod_l+0x8b8>
 800b000:	4629      	mov	r1, r5
 800b002:	2201      	movs	r2, #1
 800b004:	4620      	mov	r0, r4
 800b006:	f7ff f9a3 	bl	800a350 <__lshift>
 800b00a:	4659      	mov	r1, fp
 800b00c:	4605      	mov	r5, r0
 800b00e:	f7ff fa0b 	bl	800a428 <__mcmp>
 800b012:	2800      	cmp	r0, #0
 800b014:	dd68      	ble.n	800b0e8 <_strtod_l+0x8b8>
 800b016:	9904      	ldr	r1, [sp, #16]
 800b018:	4a54      	ldr	r2, [pc, #336]	; (800b16c <_strtod_l+0x93c>)
 800b01a:	464b      	mov	r3, r9
 800b01c:	2900      	cmp	r1, #0
 800b01e:	f000 8084 	beq.w	800b12a <_strtod_l+0x8fa>
 800b022:	ea02 0109 	and.w	r1, r2, r9
 800b026:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b02a:	dc7e      	bgt.n	800b12a <_strtod_l+0x8fa>
 800b02c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b030:	f77f aeb3 	ble.w	800ad9a <_strtod_l+0x56a>
 800b034:	4b4e      	ldr	r3, [pc, #312]	; (800b170 <_strtod_l+0x940>)
 800b036:	4640      	mov	r0, r8
 800b038:	4649      	mov	r1, r9
 800b03a:	2200      	movs	r2, #0
 800b03c:	f7f5 fae4 	bl	8000608 <__aeabi_dmul>
 800b040:	4b4a      	ldr	r3, [pc, #296]	; (800b16c <_strtod_l+0x93c>)
 800b042:	400b      	ands	r3, r1
 800b044:	4680      	mov	r8, r0
 800b046:	4689      	mov	r9, r1
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f47f ae3f 	bne.w	800accc <_strtod_l+0x49c>
 800b04e:	2322      	movs	r3, #34	; 0x22
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	e63b      	b.n	800accc <_strtod_l+0x49c>
 800b054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b058:	fa02 f303 	lsl.w	r3, r2, r3
 800b05c:	ea03 0808 	and.w	r8, r3, r8
 800b060:	e6e8      	b.n	800ae34 <_strtod_l+0x604>
 800b062:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b066:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b06a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b06e:	36e2      	adds	r6, #226	; 0xe2
 800b070:	fa01 f306 	lsl.w	r3, r1, r6
 800b074:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b078:	e748      	b.n	800af0c <_strtod_l+0x6dc>
 800b07a:	2100      	movs	r1, #0
 800b07c:	2301      	movs	r3, #1
 800b07e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b082:	e743      	b.n	800af0c <_strtod_l+0x6dc>
 800b084:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b086:	4632      	mov	r2, r6
 800b088:	4620      	mov	r0, r4
 800b08a:	f7ff f961 	bl	800a350 <__lshift>
 800b08e:	9016      	str	r0, [sp, #88]	; 0x58
 800b090:	2800      	cmp	r0, #0
 800b092:	f47f af6b 	bne.w	800af6c <_strtod_l+0x73c>
 800b096:	e60f      	b.n	800acb8 <_strtod_l+0x488>
 800b098:	46ca      	mov	sl, r9
 800b09a:	d171      	bne.n	800b180 <_strtod_l+0x950>
 800b09c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b09e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0a2:	b352      	cbz	r2, 800b0fa <_strtod_l+0x8ca>
 800b0a4:	4a33      	ldr	r2, [pc, #204]	; (800b174 <_strtod_l+0x944>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d12a      	bne.n	800b100 <_strtod_l+0x8d0>
 800b0aa:	9b04      	ldr	r3, [sp, #16]
 800b0ac:	4641      	mov	r1, r8
 800b0ae:	b1fb      	cbz	r3, 800b0f0 <_strtod_l+0x8c0>
 800b0b0:	4b2e      	ldr	r3, [pc, #184]	; (800b16c <_strtod_l+0x93c>)
 800b0b2:	ea09 0303 	and.w	r3, r9, r3
 800b0b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0be:	d81a      	bhi.n	800b0f6 <_strtod_l+0x8c6>
 800b0c0:	0d1b      	lsrs	r3, r3, #20
 800b0c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ca:	4299      	cmp	r1, r3
 800b0cc:	d118      	bne.n	800b100 <_strtod_l+0x8d0>
 800b0ce:	4b2a      	ldr	r3, [pc, #168]	; (800b178 <_strtod_l+0x948>)
 800b0d0:	459a      	cmp	sl, r3
 800b0d2:	d102      	bne.n	800b0da <_strtod_l+0x8aa>
 800b0d4:	3101      	adds	r1, #1
 800b0d6:	f43f adef 	beq.w	800acb8 <_strtod_l+0x488>
 800b0da:	4b24      	ldr	r3, [pc, #144]	; (800b16c <_strtod_l+0x93c>)
 800b0dc:	ea0a 0303 	and.w	r3, sl, r3
 800b0e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b0e4:	f04f 0800 	mov.w	r8, #0
 800b0e8:	9b04      	ldr	r3, [sp, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1a2      	bne.n	800b034 <_strtod_l+0x804>
 800b0ee:	e5ed      	b.n	800accc <_strtod_l+0x49c>
 800b0f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0f4:	e7e9      	b.n	800b0ca <_strtod_l+0x89a>
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	e7e7      	b.n	800b0ca <_strtod_l+0x89a>
 800b0fa:	ea53 0308 	orrs.w	r3, r3, r8
 800b0fe:	d08a      	beq.n	800b016 <_strtod_l+0x7e6>
 800b100:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b102:	b1e3      	cbz	r3, 800b13e <_strtod_l+0x90e>
 800b104:	ea13 0f0a 	tst.w	r3, sl
 800b108:	d0ee      	beq.n	800b0e8 <_strtod_l+0x8b8>
 800b10a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10c:	9a04      	ldr	r2, [sp, #16]
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	b1c3      	cbz	r3, 800b146 <_strtod_l+0x916>
 800b114:	f7ff fb6f 	bl	800a7f6 <sulp>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	ec51 0b18 	vmov	r0, r1, d8
 800b120:	f7f5 f8bc 	bl	800029c <__adddf3>
 800b124:	4680      	mov	r8, r0
 800b126:	4689      	mov	r9, r1
 800b128:	e7de      	b.n	800b0e8 <_strtod_l+0x8b8>
 800b12a:	4013      	ands	r3, r2
 800b12c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b130:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b134:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b138:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b13c:	e7d4      	b.n	800b0e8 <_strtod_l+0x8b8>
 800b13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b140:	ea13 0f08 	tst.w	r3, r8
 800b144:	e7e0      	b.n	800b108 <_strtod_l+0x8d8>
 800b146:	f7ff fb56 	bl	800a7f6 <sulp>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	ec51 0b18 	vmov	r0, r1, d8
 800b152:	f7f5 f8a1 	bl	8000298 <__aeabi_dsub>
 800b156:	2200      	movs	r2, #0
 800b158:	2300      	movs	r3, #0
 800b15a:	4680      	mov	r8, r0
 800b15c:	4689      	mov	r9, r1
 800b15e:	f7f5 fcbb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b162:	2800      	cmp	r0, #0
 800b164:	d0c0      	beq.n	800b0e8 <_strtod_l+0x8b8>
 800b166:	e618      	b.n	800ad9a <_strtod_l+0x56a>
 800b168:	fffffc02 	.word	0xfffffc02
 800b16c:	7ff00000 	.word	0x7ff00000
 800b170:	39500000 	.word	0x39500000
 800b174:	000fffff 	.word	0x000fffff
 800b178:	7fefffff 	.word	0x7fefffff
 800b17c:	0800ca18 	.word	0x0800ca18
 800b180:	4659      	mov	r1, fp
 800b182:	4628      	mov	r0, r5
 800b184:	f7ff fac0 	bl	800a708 <__ratio>
 800b188:	ec57 6b10 	vmov	r6, r7, d0
 800b18c:	ee10 0a10 	vmov	r0, s0
 800b190:	2200      	movs	r2, #0
 800b192:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 fcb2 	bl	8000b00 <__aeabi_dcmple>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d071      	beq.n	800b284 <_strtod_l+0xa54>
 800b1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d17c      	bne.n	800b2a0 <_strtod_l+0xa70>
 800b1a6:	f1b8 0f00 	cmp.w	r8, #0
 800b1aa:	d15a      	bne.n	800b262 <_strtod_l+0xa32>
 800b1ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d15d      	bne.n	800b270 <_strtod_l+0xa40>
 800b1b4:	4b90      	ldr	r3, [pc, #576]	; (800b3f8 <_strtod_l+0xbc8>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	f7f5 fc96 	bl	8000aec <__aeabi_dcmplt>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d15c      	bne.n	800b27e <_strtod_l+0xa4e>
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	4b8c      	ldr	r3, [pc, #560]	; (800b3fc <_strtod_l+0xbcc>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f7f5 fa1c 	bl	8000608 <__aeabi_dmul>
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	460f      	mov	r7, r1
 800b1d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b1d8:	9606      	str	r6, [sp, #24]
 800b1da:	9307      	str	r3, [sp, #28]
 800b1dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b1e4:	4b86      	ldr	r3, [pc, #536]	; (800b400 <_strtod_l+0xbd0>)
 800b1e6:	ea0a 0303 	and.w	r3, sl, r3
 800b1ea:	930d      	str	r3, [sp, #52]	; 0x34
 800b1ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1ee:	4b85      	ldr	r3, [pc, #532]	; (800b404 <_strtod_l+0xbd4>)
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	f040 8090 	bne.w	800b316 <_strtod_l+0xae6>
 800b1f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b1fa:	ec49 8b10 	vmov	d0, r8, r9
 800b1fe:	f7ff f9b9 	bl	800a574 <__ulp>
 800b202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b206:	ec51 0b10 	vmov	r0, r1, d0
 800b20a:	f7f5 f9fd 	bl	8000608 <__aeabi_dmul>
 800b20e:	4642      	mov	r2, r8
 800b210:	464b      	mov	r3, r9
 800b212:	f7f5 f843 	bl	800029c <__adddf3>
 800b216:	460b      	mov	r3, r1
 800b218:	4979      	ldr	r1, [pc, #484]	; (800b400 <_strtod_l+0xbd0>)
 800b21a:	4a7b      	ldr	r2, [pc, #492]	; (800b408 <_strtod_l+0xbd8>)
 800b21c:	4019      	ands	r1, r3
 800b21e:	4291      	cmp	r1, r2
 800b220:	4680      	mov	r8, r0
 800b222:	d944      	bls.n	800b2ae <_strtod_l+0xa7e>
 800b224:	ee18 2a90 	vmov	r2, s17
 800b228:	4b78      	ldr	r3, [pc, #480]	; (800b40c <_strtod_l+0xbdc>)
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d104      	bne.n	800b238 <_strtod_l+0xa08>
 800b22e:	ee18 3a10 	vmov	r3, s16
 800b232:	3301      	adds	r3, #1
 800b234:	f43f ad40 	beq.w	800acb8 <_strtod_l+0x488>
 800b238:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b40c <_strtod_l+0xbdc>
 800b23c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b240:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b242:	4620      	mov	r0, r4
 800b244:	f7fe fe6a 	bl	8009f1c <_Bfree>
 800b248:	9905      	ldr	r1, [sp, #20]
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7fe fe66 	bl	8009f1c <_Bfree>
 800b250:	4659      	mov	r1, fp
 800b252:	4620      	mov	r0, r4
 800b254:	f7fe fe62 	bl	8009f1c <_Bfree>
 800b258:	4629      	mov	r1, r5
 800b25a:	4620      	mov	r0, r4
 800b25c:	f7fe fe5e 	bl	8009f1c <_Bfree>
 800b260:	e609      	b.n	800ae76 <_strtod_l+0x646>
 800b262:	f1b8 0f01 	cmp.w	r8, #1
 800b266:	d103      	bne.n	800b270 <_strtod_l+0xa40>
 800b268:	f1b9 0f00 	cmp.w	r9, #0
 800b26c:	f43f ad95 	beq.w	800ad9a <_strtod_l+0x56a>
 800b270:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b3c8 <_strtod_l+0xb98>
 800b274:	4f60      	ldr	r7, [pc, #384]	; (800b3f8 <_strtod_l+0xbc8>)
 800b276:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b27a:	2600      	movs	r6, #0
 800b27c:	e7ae      	b.n	800b1dc <_strtod_l+0x9ac>
 800b27e:	4f5f      	ldr	r7, [pc, #380]	; (800b3fc <_strtod_l+0xbcc>)
 800b280:	2600      	movs	r6, #0
 800b282:	e7a7      	b.n	800b1d4 <_strtod_l+0x9a4>
 800b284:	4b5d      	ldr	r3, [pc, #372]	; (800b3fc <_strtod_l+0xbcc>)
 800b286:	4630      	mov	r0, r6
 800b288:	4639      	mov	r1, r7
 800b28a:	2200      	movs	r2, #0
 800b28c:	f7f5 f9bc 	bl	8000608 <__aeabi_dmul>
 800b290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b292:	4606      	mov	r6, r0
 800b294:	460f      	mov	r7, r1
 800b296:	2b00      	cmp	r3, #0
 800b298:	d09c      	beq.n	800b1d4 <_strtod_l+0x9a4>
 800b29a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b29e:	e79d      	b.n	800b1dc <_strtod_l+0x9ac>
 800b2a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b3d0 <_strtod_l+0xba0>
 800b2a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b2a8:	ec57 6b17 	vmov	r6, r7, d7
 800b2ac:	e796      	b.n	800b1dc <_strtod_l+0x9ac>
 800b2ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b2b2:	9b04      	ldr	r3, [sp, #16]
 800b2b4:	46ca      	mov	sl, r9
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1c2      	bne.n	800b240 <_strtod_l+0xa10>
 800b2ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2c0:	0d1b      	lsrs	r3, r3, #20
 800b2c2:	051b      	lsls	r3, r3, #20
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d1bb      	bne.n	800b240 <_strtod_l+0xa10>
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	f7f5 fcfc 	bl	8000cc8 <__aeabi_d2lz>
 800b2d0:	f7f5 f96c 	bl	80005ac <__aeabi_l2d>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f4 ffdc 	bl	8000298 <__aeabi_dsub>
 800b2e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2e6:	ea43 0308 	orr.w	r3, r3, r8
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	460f      	mov	r7, r1
 800b2f0:	d054      	beq.n	800b39c <_strtod_l+0xb6c>
 800b2f2:	a339      	add	r3, pc, #228	; (adr r3, 800b3d8 <_strtod_l+0xba8>)
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f7f5 fbf8 	bl	8000aec <__aeabi_dcmplt>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f47f ace5 	bne.w	800accc <_strtod_l+0x49c>
 800b302:	a337      	add	r3, pc, #220	; (adr r3, 800b3e0 <_strtod_l+0xbb0>)
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	4630      	mov	r0, r6
 800b30a:	4639      	mov	r1, r7
 800b30c:	f7f5 fc0c 	bl	8000b28 <__aeabi_dcmpgt>
 800b310:	2800      	cmp	r0, #0
 800b312:	d095      	beq.n	800b240 <_strtod_l+0xa10>
 800b314:	e4da      	b.n	800accc <_strtod_l+0x49c>
 800b316:	9b04      	ldr	r3, [sp, #16]
 800b318:	b333      	cbz	r3, 800b368 <_strtod_l+0xb38>
 800b31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b31c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b320:	d822      	bhi.n	800b368 <_strtod_l+0xb38>
 800b322:	a331      	add	r3, pc, #196	; (adr r3, 800b3e8 <_strtod_l+0xbb8>)
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	4630      	mov	r0, r6
 800b32a:	4639      	mov	r1, r7
 800b32c:	f7f5 fbe8 	bl	8000b00 <__aeabi_dcmple>
 800b330:	b1a0      	cbz	r0, 800b35c <_strtod_l+0xb2c>
 800b332:	4639      	mov	r1, r7
 800b334:	4630      	mov	r0, r6
 800b336:	f7f5 fc3f 	bl	8000bb8 <__aeabi_d2uiz>
 800b33a:	2801      	cmp	r0, #1
 800b33c:	bf38      	it	cc
 800b33e:	2001      	movcc	r0, #1
 800b340:	f7f5 f8e8 	bl	8000514 <__aeabi_ui2d>
 800b344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b346:	4606      	mov	r6, r0
 800b348:	460f      	mov	r7, r1
 800b34a:	bb23      	cbnz	r3, 800b396 <_strtod_l+0xb66>
 800b34c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b350:	9010      	str	r0, [sp, #64]	; 0x40
 800b352:	9311      	str	r3, [sp, #68]	; 0x44
 800b354:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b358:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b35e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b360:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b364:	1a9b      	subs	r3, r3, r2
 800b366:	930f      	str	r3, [sp, #60]	; 0x3c
 800b368:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b36c:	eeb0 0a48 	vmov.f32	s0, s16
 800b370:	eef0 0a68 	vmov.f32	s1, s17
 800b374:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b378:	f7ff f8fc 	bl	800a574 <__ulp>
 800b37c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b380:	ec53 2b10 	vmov	r2, r3, d0
 800b384:	f7f5 f940 	bl	8000608 <__aeabi_dmul>
 800b388:	ec53 2b18 	vmov	r2, r3, d8
 800b38c:	f7f4 ff86 	bl	800029c <__adddf3>
 800b390:	4680      	mov	r8, r0
 800b392:	4689      	mov	r9, r1
 800b394:	e78d      	b.n	800b2b2 <_strtod_l+0xa82>
 800b396:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b39a:	e7db      	b.n	800b354 <_strtod_l+0xb24>
 800b39c:	a314      	add	r3, pc, #80	; (adr r3, 800b3f0 <_strtod_l+0xbc0>)
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	f7f5 fba3 	bl	8000aec <__aeabi_dcmplt>
 800b3a6:	e7b3      	b.n	800b310 <_strtod_l+0xae0>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b3ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3b0:	6013      	str	r3, [r2, #0]
 800b3b2:	f7ff ba7c 	b.w	800a8ae <_strtod_l+0x7e>
 800b3b6:	2a65      	cmp	r2, #101	; 0x65
 800b3b8:	f43f ab75 	beq.w	800aaa6 <_strtod_l+0x276>
 800b3bc:	2a45      	cmp	r2, #69	; 0x45
 800b3be:	f43f ab72 	beq.w	800aaa6 <_strtod_l+0x276>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	f7ff bbaa 	b.w	800ab1c <_strtod_l+0x2ec>
 800b3c8:	00000000 	.word	0x00000000
 800b3cc:	bff00000 	.word	0xbff00000
 800b3d0:	00000000 	.word	0x00000000
 800b3d4:	3ff00000 	.word	0x3ff00000
 800b3d8:	94a03595 	.word	0x94a03595
 800b3dc:	3fdfffff 	.word	0x3fdfffff
 800b3e0:	35afe535 	.word	0x35afe535
 800b3e4:	3fe00000 	.word	0x3fe00000
 800b3e8:	ffc00000 	.word	0xffc00000
 800b3ec:	41dfffff 	.word	0x41dfffff
 800b3f0:	94a03595 	.word	0x94a03595
 800b3f4:	3fcfffff 	.word	0x3fcfffff
 800b3f8:	3ff00000 	.word	0x3ff00000
 800b3fc:	3fe00000 	.word	0x3fe00000
 800b400:	7ff00000 	.word	0x7ff00000
 800b404:	7fe00000 	.word	0x7fe00000
 800b408:	7c9fffff 	.word	0x7c9fffff
 800b40c:	7fefffff 	.word	0x7fefffff

0800b410 <_strtod_r>:
 800b410:	4b01      	ldr	r3, [pc, #4]	; (800b418 <_strtod_r+0x8>)
 800b412:	f7ff ba0d 	b.w	800a830 <_strtod_l>
 800b416:	bf00      	nop
 800b418:	20000158 	.word	0x20000158

0800b41c <_strtol_l.constprop.0>:
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b422:	d001      	beq.n	800b428 <_strtol_l.constprop.0+0xc>
 800b424:	2b24      	cmp	r3, #36	; 0x24
 800b426:	d906      	bls.n	800b436 <_strtol_l.constprop.0+0x1a>
 800b428:	f7fd fd88 	bl	8008f3c <__errno>
 800b42c:	2316      	movs	r3, #22
 800b42e:	6003      	str	r3, [r0, #0]
 800b430:	2000      	movs	r0, #0
 800b432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b436:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b51c <_strtol_l.constprop.0+0x100>
 800b43a:	460d      	mov	r5, r1
 800b43c:	462e      	mov	r6, r5
 800b43e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b442:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b446:	f017 0708 	ands.w	r7, r7, #8
 800b44a:	d1f7      	bne.n	800b43c <_strtol_l.constprop.0+0x20>
 800b44c:	2c2d      	cmp	r4, #45	; 0x2d
 800b44e:	d132      	bne.n	800b4b6 <_strtol_l.constprop.0+0x9a>
 800b450:	782c      	ldrb	r4, [r5, #0]
 800b452:	2701      	movs	r7, #1
 800b454:	1cb5      	adds	r5, r6, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d05b      	beq.n	800b512 <_strtol_l.constprop.0+0xf6>
 800b45a:	2b10      	cmp	r3, #16
 800b45c:	d109      	bne.n	800b472 <_strtol_l.constprop.0+0x56>
 800b45e:	2c30      	cmp	r4, #48	; 0x30
 800b460:	d107      	bne.n	800b472 <_strtol_l.constprop.0+0x56>
 800b462:	782c      	ldrb	r4, [r5, #0]
 800b464:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b468:	2c58      	cmp	r4, #88	; 0x58
 800b46a:	d14d      	bne.n	800b508 <_strtol_l.constprop.0+0xec>
 800b46c:	786c      	ldrb	r4, [r5, #1]
 800b46e:	2310      	movs	r3, #16
 800b470:	3502      	adds	r5, #2
 800b472:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b476:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b47a:	f04f 0e00 	mov.w	lr, #0
 800b47e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b482:	4676      	mov	r6, lr
 800b484:	fb03 8a19 	mls	sl, r3, r9, r8
 800b488:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b48c:	f1bc 0f09 	cmp.w	ip, #9
 800b490:	d816      	bhi.n	800b4c0 <_strtol_l.constprop.0+0xa4>
 800b492:	4664      	mov	r4, ip
 800b494:	42a3      	cmp	r3, r4
 800b496:	dd24      	ble.n	800b4e2 <_strtol_l.constprop.0+0xc6>
 800b498:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b49c:	d008      	beq.n	800b4b0 <_strtol_l.constprop.0+0x94>
 800b49e:	45b1      	cmp	r9, r6
 800b4a0:	d31c      	bcc.n	800b4dc <_strtol_l.constprop.0+0xc0>
 800b4a2:	d101      	bne.n	800b4a8 <_strtol_l.constprop.0+0x8c>
 800b4a4:	45a2      	cmp	sl, r4
 800b4a6:	db19      	blt.n	800b4dc <_strtol_l.constprop.0+0xc0>
 800b4a8:	fb06 4603 	mla	r6, r6, r3, r4
 800b4ac:	f04f 0e01 	mov.w	lr, #1
 800b4b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4b4:	e7e8      	b.n	800b488 <_strtol_l.constprop.0+0x6c>
 800b4b6:	2c2b      	cmp	r4, #43	; 0x2b
 800b4b8:	bf04      	itt	eq
 800b4ba:	782c      	ldrbeq	r4, [r5, #0]
 800b4bc:	1cb5      	addeq	r5, r6, #2
 800b4be:	e7ca      	b.n	800b456 <_strtol_l.constprop.0+0x3a>
 800b4c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b4c4:	f1bc 0f19 	cmp.w	ip, #25
 800b4c8:	d801      	bhi.n	800b4ce <_strtol_l.constprop.0+0xb2>
 800b4ca:	3c37      	subs	r4, #55	; 0x37
 800b4cc:	e7e2      	b.n	800b494 <_strtol_l.constprop.0+0x78>
 800b4ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b4d2:	f1bc 0f19 	cmp.w	ip, #25
 800b4d6:	d804      	bhi.n	800b4e2 <_strtol_l.constprop.0+0xc6>
 800b4d8:	3c57      	subs	r4, #87	; 0x57
 800b4da:	e7db      	b.n	800b494 <_strtol_l.constprop.0+0x78>
 800b4dc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b4e0:	e7e6      	b.n	800b4b0 <_strtol_l.constprop.0+0x94>
 800b4e2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b4e6:	d105      	bne.n	800b4f4 <_strtol_l.constprop.0+0xd8>
 800b4e8:	2322      	movs	r3, #34	; 0x22
 800b4ea:	6003      	str	r3, [r0, #0]
 800b4ec:	4646      	mov	r6, r8
 800b4ee:	b942      	cbnz	r2, 800b502 <_strtol_l.constprop.0+0xe6>
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	e79e      	b.n	800b432 <_strtol_l.constprop.0+0x16>
 800b4f4:	b107      	cbz	r7, 800b4f8 <_strtol_l.constprop.0+0xdc>
 800b4f6:	4276      	negs	r6, r6
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	d0f9      	beq.n	800b4f0 <_strtol_l.constprop.0+0xd4>
 800b4fc:	f1be 0f00 	cmp.w	lr, #0
 800b500:	d000      	beq.n	800b504 <_strtol_l.constprop.0+0xe8>
 800b502:	1e69      	subs	r1, r5, #1
 800b504:	6011      	str	r1, [r2, #0]
 800b506:	e7f3      	b.n	800b4f0 <_strtol_l.constprop.0+0xd4>
 800b508:	2430      	movs	r4, #48	; 0x30
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1b1      	bne.n	800b472 <_strtol_l.constprop.0+0x56>
 800b50e:	2308      	movs	r3, #8
 800b510:	e7af      	b.n	800b472 <_strtol_l.constprop.0+0x56>
 800b512:	2c30      	cmp	r4, #48	; 0x30
 800b514:	d0a5      	beq.n	800b462 <_strtol_l.constprop.0+0x46>
 800b516:	230a      	movs	r3, #10
 800b518:	e7ab      	b.n	800b472 <_strtol_l.constprop.0+0x56>
 800b51a:	bf00      	nop
 800b51c:	0800ca41 	.word	0x0800ca41

0800b520 <_strtol_r>:
 800b520:	f7ff bf7c 	b.w	800b41c <_strtol_l.constprop.0>

0800b524 <__ssputs_r>:
 800b524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b528:	688e      	ldr	r6, [r1, #8]
 800b52a:	461f      	mov	r7, r3
 800b52c:	42be      	cmp	r6, r7
 800b52e:	680b      	ldr	r3, [r1, #0]
 800b530:	4682      	mov	sl, r0
 800b532:	460c      	mov	r4, r1
 800b534:	4690      	mov	r8, r2
 800b536:	d82c      	bhi.n	800b592 <__ssputs_r+0x6e>
 800b538:	898a      	ldrh	r2, [r1, #12]
 800b53a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b53e:	d026      	beq.n	800b58e <__ssputs_r+0x6a>
 800b540:	6965      	ldr	r5, [r4, #20]
 800b542:	6909      	ldr	r1, [r1, #16]
 800b544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b548:	eba3 0901 	sub.w	r9, r3, r1
 800b54c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b550:	1c7b      	adds	r3, r7, #1
 800b552:	444b      	add	r3, r9
 800b554:	106d      	asrs	r5, r5, #1
 800b556:	429d      	cmp	r5, r3
 800b558:	bf38      	it	cc
 800b55a:	461d      	movcc	r5, r3
 800b55c:	0553      	lsls	r3, r2, #21
 800b55e:	d527      	bpl.n	800b5b0 <__ssputs_r+0x8c>
 800b560:	4629      	mov	r1, r5
 800b562:	f7fe fc0f 	bl	8009d84 <_malloc_r>
 800b566:	4606      	mov	r6, r0
 800b568:	b360      	cbz	r0, 800b5c4 <__ssputs_r+0xa0>
 800b56a:	6921      	ldr	r1, [r4, #16]
 800b56c:	464a      	mov	r2, r9
 800b56e:	f000 fa1b 	bl	800b9a8 <memcpy>
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b57c:	81a3      	strh	r3, [r4, #12]
 800b57e:	6126      	str	r6, [r4, #16]
 800b580:	6165      	str	r5, [r4, #20]
 800b582:	444e      	add	r6, r9
 800b584:	eba5 0509 	sub.w	r5, r5, r9
 800b588:	6026      	str	r6, [r4, #0]
 800b58a:	60a5      	str	r5, [r4, #8]
 800b58c:	463e      	mov	r6, r7
 800b58e:	42be      	cmp	r6, r7
 800b590:	d900      	bls.n	800b594 <__ssputs_r+0x70>
 800b592:	463e      	mov	r6, r7
 800b594:	6820      	ldr	r0, [r4, #0]
 800b596:	4632      	mov	r2, r6
 800b598:	4641      	mov	r1, r8
 800b59a:	f000 f9c9 	bl	800b930 <memmove>
 800b59e:	68a3      	ldr	r3, [r4, #8]
 800b5a0:	1b9b      	subs	r3, r3, r6
 800b5a2:	60a3      	str	r3, [r4, #8]
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	4433      	add	r3, r6
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b0:	462a      	mov	r2, r5
 800b5b2:	f000 fdae 	bl	800c112 <_realloc_r>
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d1e0      	bne.n	800b57e <__ssputs_r+0x5a>
 800b5bc:	6921      	ldr	r1, [r4, #16]
 800b5be:	4650      	mov	r0, sl
 800b5c0:	f7fe fb6c 	bl	8009c9c <_free_r>
 800b5c4:	230c      	movs	r3, #12
 800b5c6:	f8ca 3000 	str.w	r3, [sl]
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5d6:	e7e9      	b.n	800b5ac <__ssputs_r+0x88>

0800b5d8 <_svfiprintf_r>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	4698      	mov	r8, r3
 800b5de:	898b      	ldrh	r3, [r1, #12]
 800b5e0:	061b      	lsls	r3, r3, #24
 800b5e2:	b09d      	sub	sp, #116	; 0x74
 800b5e4:	4607      	mov	r7, r0
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	d50e      	bpl.n	800b60a <_svfiprintf_r+0x32>
 800b5ec:	690b      	ldr	r3, [r1, #16]
 800b5ee:	b963      	cbnz	r3, 800b60a <_svfiprintf_r+0x32>
 800b5f0:	2140      	movs	r1, #64	; 0x40
 800b5f2:	f7fe fbc7 	bl	8009d84 <_malloc_r>
 800b5f6:	6028      	str	r0, [r5, #0]
 800b5f8:	6128      	str	r0, [r5, #16]
 800b5fa:	b920      	cbnz	r0, 800b606 <_svfiprintf_r+0x2e>
 800b5fc:	230c      	movs	r3, #12
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b604:	e0d0      	b.n	800b7a8 <_svfiprintf_r+0x1d0>
 800b606:	2340      	movs	r3, #64	; 0x40
 800b608:	616b      	str	r3, [r5, #20]
 800b60a:	2300      	movs	r3, #0
 800b60c:	9309      	str	r3, [sp, #36]	; 0x24
 800b60e:	2320      	movs	r3, #32
 800b610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b614:	f8cd 800c 	str.w	r8, [sp, #12]
 800b618:	2330      	movs	r3, #48	; 0x30
 800b61a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b7c0 <_svfiprintf_r+0x1e8>
 800b61e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b622:	f04f 0901 	mov.w	r9, #1
 800b626:	4623      	mov	r3, r4
 800b628:	469a      	mov	sl, r3
 800b62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b62e:	b10a      	cbz	r2, 800b634 <_svfiprintf_r+0x5c>
 800b630:	2a25      	cmp	r2, #37	; 0x25
 800b632:	d1f9      	bne.n	800b628 <_svfiprintf_r+0x50>
 800b634:	ebba 0b04 	subs.w	fp, sl, r4
 800b638:	d00b      	beq.n	800b652 <_svfiprintf_r+0x7a>
 800b63a:	465b      	mov	r3, fp
 800b63c:	4622      	mov	r2, r4
 800b63e:	4629      	mov	r1, r5
 800b640:	4638      	mov	r0, r7
 800b642:	f7ff ff6f 	bl	800b524 <__ssputs_r>
 800b646:	3001      	adds	r0, #1
 800b648:	f000 80a9 	beq.w	800b79e <_svfiprintf_r+0x1c6>
 800b64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b64e:	445a      	add	r2, fp
 800b650:	9209      	str	r2, [sp, #36]	; 0x24
 800b652:	f89a 3000 	ldrb.w	r3, [sl]
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 80a1 	beq.w	800b79e <_svfiprintf_r+0x1c6>
 800b65c:	2300      	movs	r3, #0
 800b65e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b666:	f10a 0a01 	add.w	sl, sl, #1
 800b66a:	9304      	str	r3, [sp, #16]
 800b66c:	9307      	str	r3, [sp, #28]
 800b66e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b672:	931a      	str	r3, [sp, #104]	; 0x68
 800b674:	4654      	mov	r4, sl
 800b676:	2205      	movs	r2, #5
 800b678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67c:	4850      	ldr	r0, [pc, #320]	; (800b7c0 <_svfiprintf_r+0x1e8>)
 800b67e:	f7f4 fdaf 	bl	80001e0 <memchr>
 800b682:	9a04      	ldr	r2, [sp, #16]
 800b684:	b9d8      	cbnz	r0, 800b6be <_svfiprintf_r+0xe6>
 800b686:	06d0      	lsls	r0, r2, #27
 800b688:	bf44      	itt	mi
 800b68a:	2320      	movmi	r3, #32
 800b68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b690:	0711      	lsls	r1, r2, #28
 800b692:	bf44      	itt	mi
 800b694:	232b      	movmi	r3, #43	; 0x2b
 800b696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b69a:	f89a 3000 	ldrb.w	r3, [sl]
 800b69e:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a0:	d015      	beq.n	800b6ce <_svfiprintf_r+0xf6>
 800b6a2:	9a07      	ldr	r2, [sp, #28]
 800b6a4:	4654      	mov	r4, sl
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	f04f 0c0a 	mov.w	ip, #10
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b2:	3b30      	subs	r3, #48	; 0x30
 800b6b4:	2b09      	cmp	r3, #9
 800b6b6:	d94d      	bls.n	800b754 <_svfiprintf_r+0x17c>
 800b6b8:	b1b0      	cbz	r0, 800b6e8 <_svfiprintf_r+0x110>
 800b6ba:	9207      	str	r2, [sp, #28]
 800b6bc:	e014      	b.n	800b6e8 <_svfiprintf_r+0x110>
 800b6be:	eba0 0308 	sub.w	r3, r0, r8
 800b6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	46a2      	mov	sl, r4
 800b6cc:	e7d2      	b.n	800b674 <_svfiprintf_r+0x9c>
 800b6ce:	9b03      	ldr	r3, [sp, #12]
 800b6d0:	1d19      	adds	r1, r3, #4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	9103      	str	r1, [sp, #12]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bfbb      	ittet	lt
 800b6da:	425b      	neglt	r3, r3
 800b6dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b6e0:	9307      	strge	r3, [sp, #28]
 800b6e2:	9307      	strlt	r3, [sp, #28]
 800b6e4:	bfb8      	it	lt
 800b6e6:	9204      	strlt	r2, [sp, #16]
 800b6e8:	7823      	ldrb	r3, [r4, #0]
 800b6ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b6ec:	d10c      	bne.n	800b708 <_svfiprintf_r+0x130>
 800b6ee:	7863      	ldrb	r3, [r4, #1]
 800b6f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f2:	d134      	bne.n	800b75e <_svfiprintf_r+0x186>
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	1d1a      	adds	r2, r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	9203      	str	r2, [sp, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	bfb8      	it	lt
 800b700:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b704:	3402      	adds	r4, #2
 800b706:	9305      	str	r3, [sp, #20]
 800b708:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b7d0 <_svfiprintf_r+0x1f8>
 800b70c:	7821      	ldrb	r1, [r4, #0]
 800b70e:	2203      	movs	r2, #3
 800b710:	4650      	mov	r0, sl
 800b712:	f7f4 fd65 	bl	80001e0 <memchr>
 800b716:	b138      	cbz	r0, 800b728 <_svfiprintf_r+0x150>
 800b718:	9b04      	ldr	r3, [sp, #16]
 800b71a:	eba0 000a 	sub.w	r0, r0, sl
 800b71e:	2240      	movs	r2, #64	; 0x40
 800b720:	4082      	lsls	r2, r0
 800b722:	4313      	orrs	r3, r2
 800b724:	3401      	adds	r4, #1
 800b726:	9304      	str	r3, [sp, #16]
 800b728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b72c:	4825      	ldr	r0, [pc, #148]	; (800b7c4 <_svfiprintf_r+0x1ec>)
 800b72e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b732:	2206      	movs	r2, #6
 800b734:	f7f4 fd54 	bl	80001e0 <memchr>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d038      	beq.n	800b7ae <_svfiprintf_r+0x1d6>
 800b73c:	4b22      	ldr	r3, [pc, #136]	; (800b7c8 <_svfiprintf_r+0x1f0>)
 800b73e:	bb1b      	cbnz	r3, 800b788 <_svfiprintf_r+0x1b0>
 800b740:	9b03      	ldr	r3, [sp, #12]
 800b742:	3307      	adds	r3, #7
 800b744:	f023 0307 	bic.w	r3, r3, #7
 800b748:	3308      	adds	r3, #8
 800b74a:	9303      	str	r3, [sp, #12]
 800b74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74e:	4433      	add	r3, r6
 800b750:	9309      	str	r3, [sp, #36]	; 0x24
 800b752:	e768      	b.n	800b626 <_svfiprintf_r+0x4e>
 800b754:	fb0c 3202 	mla	r2, ip, r2, r3
 800b758:	460c      	mov	r4, r1
 800b75a:	2001      	movs	r0, #1
 800b75c:	e7a6      	b.n	800b6ac <_svfiprintf_r+0xd4>
 800b75e:	2300      	movs	r3, #0
 800b760:	3401      	adds	r4, #1
 800b762:	9305      	str	r3, [sp, #20]
 800b764:	4619      	mov	r1, r3
 800b766:	f04f 0c0a 	mov.w	ip, #10
 800b76a:	4620      	mov	r0, r4
 800b76c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b770:	3a30      	subs	r2, #48	; 0x30
 800b772:	2a09      	cmp	r2, #9
 800b774:	d903      	bls.n	800b77e <_svfiprintf_r+0x1a6>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0c6      	beq.n	800b708 <_svfiprintf_r+0x130>
 800b77a:	9105      	str	r1, [sp, #20]
 800b77c:	e7c4      	b.n	800b708 <_svfiprintf_r+0x130>
 800b77e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b782:	4604      	mov	r4, r0
 800b784:	2301      	movs	r3, #1
 800b786:	e7f0      	b.n	800b76a <_svfiprintf_r+0x192>
 800b788:	ab03      	add	r3, sp, #12
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	462a      	mov	r2, r5
 800b78e:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <_svfiprintf_r+0x1f4>)
 800b790:	a904      	add	r1, sp, #16
 800b792:	4638      	mov	r0, r7
 800b794:	f7fc fc50 	bl	8008038 <_printf_float>
 800b798:	1c42      	adds	r2, r0, #1
 800b79a:	4606      	mov	r6, r0
 800b79c:	d1d6      	bne.n	800b74c <_svfiprintf_r+0x174>
 800b79e:	89ab      	ldrh	r3, [r5, #12]
 800b7a0:	065b      	lsls	r3, r3, #25
 800b7a2:	f53f af2d 	bmi.w	800b600 <_svfiprintf_r+0x28>
 800b7a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7a8:	b01d      	add	sp, #116	; 0x74
 800b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ae:	ab03      	add	r3, sp, #12
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	462a      	mov	r2, r5
 800b7b4:	4b05      	ldr	r3, [pc, #20]	; (800b7cc <_svfiprintf_r+0x1f4>)
 800b7b6:	a904      	add	r1, sp, #16
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f7fc fee1 	bl	8008580 <_printf_i>
 800b7be:	e7eb      	b.n	800b798 <_svfiprintf_r+0x1c0>
 800b7c0:	0800cb41 	.word	0x0800cb41
 800b7c4:	0800cb4b 	.word	0x0800cb4b
 800b7c8:	08008039 	.word	0x08008039
 800b7cc:	0800b525 	.word	0x0800b525
 800b7d0:	0800cb47 	.word	0x0800cb47

0800b7d4 <__sflush_r>:
 800b7d4:	898a      	ldrh	r2, [r1, #12]
 800b7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7da:	4605      	mov	r5, r0
 800b7dc:	0710      	lsls	r0, r2, #28
 800b7de:	460c      	mov	r4, r1
 800b7e0:	d458      	bmi.n	800b894 <__sflush_r+0xc0>
 800b7e2:	684b      	ldr	r3, [r1, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	dc05      	bgt.n	800b7f4 <__sflush_r+0x20>
 800b7e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dc02      	bgt.n	800b7f4 <__sflush_r+0x20>
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7f6:	2e00      	cmp	r6, #0
 800b7f8:	d0f9      	beq.n	800b7ee <__sflush_r+0x1a>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b800:	682f      	ldr	r7, [r5, #0]
 800b802:	6a21      	ldr	r1, [r4, #32]
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	d032      	beq.n	800b86e <__sflush_r+0x9a>
 800b808:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	075a      	lsls	r2, r3, #29
 800b80e:	d505      	bpl.n	800b81c <__sflush_r+0x48>
 800b810:	6863      	ldr	r3, [r4, #4]
 800b812:	1ac0      	subs	r0, r0, r3
 800b814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b816:	b10b      	cbz	r3, 800b81c <__sflush_r+0x48>
 800b818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b81a:	1ac0      	subs	r0, r0, r3
 800b81c:	2300      	movs	r3, #0
 800b81e:	4602      	mov	r2, r0
 800b820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b822:	6a21      	ldr	r1, [r4, #32]
 800b824:	4628      	mov	r0, r5
 800b826:	47b0      	blx	r6
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	d106      	bne.n	800b83c <__sflush_r+0x68>
 800b82e:	6829      	ldr	r1, [r5, #0]
 800b830:	291d      	cmp	r1, #29
 800b832:	d82b      	bhi.n	800b88c <__sflush_r+0xb8>
 800b834:	4a29      	ldr	r2, [pc, #164]	; (800b8dc <__sflush_r+0x108>)
 800b836:	410a      	asrs	r2, r1
 800b838:	07d6      	lsls	r6, r2, #31
 800b83a:	d427      	bmi.n	800b88c <__sflush_r+0xb8>
 800b83c:	2200      	movs	r2, #0
 800b83e:	6062      	str	r2, [r4, #4]
 800b840:	04d9      	lsls	r1, r3, #19
 800b842:	6922      	ldr	r2, [r4, #16]
 800b844:	6022      	str	r2, [r4, #0]
 800b846:	d504      	bpl.n	800b852 <__sflush_r+0x7e>
 800b848:	1c42      	adds	r2, r0, #1
 800b84a:	d101      	bne.n	800b850 <__sflush_r+0x7c>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b903      	cbnz	r3, 800b852 <__sflush_r+0x7e>
 800b850:	6560      	str	r0, [r4, #84]	; 0x54
 800b852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b854:	602f      	str	r7, [r5, #0]
 800b856:	2900      	cmp	r1, #0
 800b858:	d0c9      	beq.n	800b7ee <__sflush_r+0x1a>
 800b85a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b85e:	4299      	cmp	r1, r3
 800b860:	d002      	beq.n	800b868 <__sflush_r+0x94>
 800b862:	4628      	mov	r0, r5
 800b864:	f7fe fa1a 	bl	8009c9c <_free_r>
 800b868:	2000      	movs	r0, #0
 800b86a:	6360      	str	r0, [r4, #52]	; 0x34
 800b86c:	e7c0      	b.n	800b7f0 <__sflush_r+0x1c>
 800b86e:	2301      	movs	r3, #1
 800b870:	4628      	mov	r0, r5
 800b872:	47b0      	blx	r6
 800b874:	1c41      	adds	r1, r0, #1
 800b876:	d1c8      	bne.n	800b80a <__sflush_r+0x36>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0c5      	beq.n	800b80a <__sflush_r+0x36>
 800b87e:	2b1d      	cmp	r3, #29
 800b880:	d001      	beq.n	800b886 <__sflush_r+0xb2>
 800b882:	2b16      	cmp	r3, #22
 800b884:	d101      	bne.n	800b88a <__sflush_r+0xb6>
 800b886:	602f      	str	r7, [r5, #0]
 800b888:	e7b1      	b.n	800b7ee <__sflush_r+0x1a>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b890:	81a3      	strh	r3, [r4, #12]
 800b892:	e7ad      	b.n	800b7f0 <__sflush_r+0x1c>
 800b894:	690f      	ldr	r7, [r1, #16]
 800b896:	2f00      	cmp	r7, #0
 800b898:	d0a9      	beq.n	800b7ee <__sflush_r+0x1a>
 800b89a:	0793      	lsls	r3, r2, #30
 800b89c:	680e      	ldr	r6, [r1, #0]
 800b89e:	bf08      	it	eq
 800b8a0:	694b      	ldreq	r3, [r1, #20]
 800b8a2:	600f      	str	r7, [r1, #0]
 800b8a4:	bf18      	it	ne
 800b8a6:	2300      	movne	r3, #0
 800b8a8:	eba6 0807 	sub.w	r8, r6, r7
 800b8ac:	608b      	str	r3, [r1, #8]
 800b8ae:	f1b8 0f00 	cmp.w	r8, #0
 800b8b2:	dd9c      	ble.n	800b7ee <__sflush_r+0x1a>
 800b8b4:	6a21      	ldr	r1, [r4, #32]
 800b8b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8b8:	4643      	mov	r3, r8
 800b8ba:	463a      	mov	r2, r7
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b0      	blx	r6
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	dc06      	bgt.n	800b8d2 <__sflush_r+0xfe>
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8d0:	e78e      	b.n	800b7f0 <__sflush_r+0x1c>
 800b8d2:	4407      	add	r7, r0
 800b8d4:	eba8 0800 	sub.w	r8, r8, r0
 800b8d8:	e7e9      	b.n	800b8ae <__sflush_r+0xda>
 800b8da:	bf00      	nop
 800b8dc:	dfbffffe 	.word	0xdfbffffe

0800b8e0 <_fflush_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	690b      	ldr	r3, [r1, #16]
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	b913      	cbnz	r3, 800b8f0 <_fflush_r+0x10>
 800b8ea:	2500      	movs	r5, #0
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	bd38      	pop	{r3, r4, r5, pc}
 800b8f0:	b118      	cbz	r0, 800b8fa <_fflush_r+0x1a>
 800b8f2:	6a03      	ldr	r3, [r0, #32]
 800b8f4:	b90b      	cbnz	r3, 800b8fa <_fflush_r+0x1a>
 800b8f6:	f7fd fa01 	bl	8008cfc <__sinit>
 800b8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d0f3      	beq.n	800b8ea <_fflush_r+0xa>
 800b902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b904:	07d0      	lsls	r0, r2, #31
 800b906:	d404      	bmi.n	800b912 <_fflush_r+0x32>
 800b908:	0599      	lsls	r1, r3, #22
 800b90a:	d402      	bmi.n	800b912 <_fflush_r+0x32>
 800b90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b90e:	f7fd fb40 	bl	8008f92 <__retarget_lock_acquire_recursive>
 800b912:	4628      	mov	r0, r5
 800b914:	4621      	mov	r1, r4
 800b916:	f7ff ff5d 	bl	800b7d4 <__sflush_r>
 800b91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b91c:	07da      	lsls	r2, r3, #31
 800b91e:	4605      	mov	r5, r0
 800b920:	d4e4      	bmi.n	800b8ec <_fflush_r+0xc>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	059b      	lsls	r3, r3, #22
 800b926:	d4e1      	bmi.n	800b8ec <_fflush_r+0xc>
 800b928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b92a:	f7fd fb33 	bl	8008f94 <__retarget_lock_release_recursive>
 800b92e:	e7dd      	b.n	800b8ec <_fflush_r+0xc>

0800b930 <memmove>:
 800b930:	4288      	cmp	r0, r1
 800b932:	b510      	push	{r4, lr}
 800b934:	eb01 0402 	add.w	r4, r1, r2
 800b938:	d902      	bls.n	800b940 <memmove+0x10>
 800b93a:	4284      	cmp	r4, r0
 800b93c:	4623      	mov	r3, r4
 800b93e:	d807      	bhi.n	800b950 <memmove+0x20>
 800b940:	1e43      	subs	r3, r0, #1
 800b942:	42a1      	cmp	r1, r4
 800b944:	d008      	beq.n	800b958 <memmove+0x28>
 800b946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b94e:	e7f8      	b.n	800b942 <memmove+0x12>
 800b950:	4402      	add	r2, r0
 800b952:	4601      	mov	r1, r0
 800b954:	428a      	cmp	r2, r1
 800b956:	d100      	bne.n	800b95a <memmove+0x2a>
 800b958:	bd10      	pop	{r4, pc}
 800b95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b962:	e7f7      	b.n	800b954 <memmove+0x24>

0800b964 <strncmp>:
 800b964:	b510      	push	{r4, lr}
 800b966:	b16a      	cbz	r2, 800b984 <strncmp+0x20>
 800b968:	3901      	subs	r1, #1
 800b96a:	1884      	adds	r4, r0, r2
 800b96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b970:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b974:	429a      	cmp	r2, r3
 800b976:	d103      	bne.n	800b980 <strncmp+0x1c>
 800b978:	42a0      	cmp	r0, r4
 800b97a:	d001      	beq.n	800b980 <strncmp+0x1c>
 800b97c:	2a00      	cmp	r2, #0
 800b97e:	d1f5      	bne.n	800b96c <strncmp+0x8>
 800b980:	1ad0      	subs	r0, r2, r3
 800b982:	bd10      	pop	{r4, pc}
 800b984:	4610      	mov	r0, r2
 800b986:	e7fc      	b.n	800b982 <strncmp+0x1e>

0800b988 <_sbrk_r>:
 800b988:	b538      	push	{r3, r4, r5, lr}
 800b98a:	4d06      	ldr	r5, [pc, #24]	; (800b9a4 <_sbrk_r+0x1c>)
 800b98c:	2300      	movs	r3, #0
 800b98e:	4604      	mov	r4, r0
 800b990:	4608      	mov	r0, r1
 800b992:	602b      	str	r3, [r5, #0]
 800b994:	f7f6 f846 	bl	8001a24 <_sbrk>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d102      	bne.n	800b9a2 <_sbrk_r+0x1a>
 800b99c:	682b      	ldr	r3, [r5, #0]
 800b99e:	b103      	cbz	r3, 800b9a2 <_sbrk_r+0x1a>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	20001834 	.word	0x20001834

0800b9a8 <memcpy>:
 800b9a8:	440a      	add	r2, r1
 800b9aa:	4291      	cmp	r1, r2
 800b9ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b9b0:	d100      	bne.n	800b9b4 <memcpy+0xc>
 800b9b2:	4770      	bx	lr
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9be:	4291      	cmp	r1, r2
 800b9c0:	d1f9      	bne.n	800b9b6 <memcpy+0xe>
 800b9c2:	bd10      	pop	{r4, pc}
 800b9c4:	0000      	movs	r0, r0
	...

0800b9c8 <nan>:
 800b9c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b9d0 <nan+0x8>
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	00000000 	.word	0x00000000
 800b9d4:	7ff80000 	.word	0x7ff80000

0800b9d8 <__assert_func>:
 800b9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9da:	4614      	mov	r4, r2
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <__assert_func+0x2c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	68d8      	ldr	r0, [r3, #12]
 800b9e6:	b14c      	cbz	r4, 800b9fc <__assert_func+0x24>
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <__assert_func+0x30>)
 800b9ea:	9100      	str	r1, [sp, #0]
 800b9ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9f0:	4906      	ldr	r1, [pc, #24]	; (800ba0c <__assert_func+0x34>)
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	f000 fbca 	bl	800c18c <fiprintf>
 800b9f8:	f000 fbda 	bl	800c1b0 <abort>
 800b9fc:	4b04      	ldr	r3, [pc, #16]	; (800ba10 <__assert_func+0x38>)
 800b9fe:	461c      	mov	r4, r3
 800ba00:	e7f3      	b.n	800b9ea <__assert_func+0x12>
 800ba02:	bf00      	nop
 800ba04:	20000154 	.word	0x20000154
 800ba08:	0800cb5a 	.word	0x0800cb5a
 800ba0c:	0800cb67 	.word	0x0800cb67
 800ba10:	0800cb95 	.word	0x0800cb95

0800ba14 <_calloc_r>:
 800ba14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba16:	fba1 2402 	umull	r2, r4, r1, r2
 800ba1a:	b94c      	cbnz	r4, 800ba30 <_calloc_r+0x1c>
 800ba1c:	4611      	mov	r1, r2
 800ba1e:	9201      	str	r2, [sp, #4]
 800ba20:	f7fe f9b0 	bl	8009d84 <_malloc_r>
 800ba24:	9a01      	ldr	r2, [sp, #4]
 800ba26:	4605      	mov	r5, r0
 800ba28:	b930      	cbnz	r0, 800ba38 <_calloc_r+0x24>
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	b003      	add	sp, #12
 800ba2e:	bd30      	pop	{r4, r5, pc}
 800ba30:	220c      	movs	r2, #12
 800ba32:	6002      	str	r2, [r0, #0]
 800ba34:	2500      	movs	r5, #0
 800ba36:	e7f8      	b.n	800ba2a <_calloc_r+0x16>
 800ba38:	4621      	mov	r1, r4
 800ba3a:	f7fd fa2c 	bl	8008e96 <memset>
 800ba3e:	e7f4      	b.n	800ba2a <_calloc_r+0x16>

0800ba40 <rshift>:
 800ba40:	6903      	ldr	r3, [r0, #16]
 800ba42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba4e:	f100 0414 	add.w	r4, r0, #20
 800ba52:	dd45      	ble.n	800bae0 <rshift+0xa0>
 800ba54:	f011 011f 	ands.w	r1, r1, #31
 800ba58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba60:	d10c      	bne.n	800ba7c <rshift+0x3c>
 800ba62:	f100 0710 	add.w	r7, r0, #16
 800ba66:	4629      	mov	r1, r5
 800ba68:	42b1      	cmp	r1, r6
 800ba6a:	d334      	bcc.n	800bad6 <rshift+0x96>
 800ba6c:	1a9b      	subs	r3, r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	1eea      	subs	r2, r5, #3
 800ba72:	4296      	cmp	r6, r2
 800ba74:	bf38      	it	cc
 800ba76:	2300      	movcc	r3, #0
 800ba78:	4423      	add	r3, r4
 800ba7a:	e015      	b.n	800baa8 <rshift+0x68>
 800ba7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ba80:	f1c1 0820 	rsb	r8, r1, #32
 800ba84:	40cf      	lsrs	r7, r1
 800ba86:	f105 0e04 	add.w	lr, r5, #4
 800ba8a:	46a1      	mov	r9, r4
 800ba8c:	4576      	cmp	r6, lr
 800ba8e:	46f4      	mov	ip, lr
 800ba90:	d815      	bhi.n	800babe <rshift+0x7e>
 800ba92:	1a9a      	subs	r2, r3, r2
 800ba94:	0092      	lsls	r2, r2, #2
 800ba96:	3a04      	subs	r2, #4
 800ba98:	3501      	adds	r5, #1
 800ba9a:	42ae      	cmp	r6, r5
 800ba9c:	bf38      	it	cc
 800ba9e:	2200      	movcc	r2, #0
 800baa0:	18a3      	adds	r3, r4, r2
 800baa2:	50a7      	str	r7, [r4, r2]
 800baa4:	b107      	cbz	r7, 800baa8 <rshift+0x68>
 800baa6:	3304      	adds	r3, #4
 800baa8:	1b1a      	subs	r2, r3, r4
 800baaa:	42a3      	cmp	r3, r4
 800baac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bab0:	bf08      	it	eq
 800bab2:	2300      	moveq	r3, #0
 800bab4:	6102      	str	r2, [r0, #16]
 800bab6:	bf08      	it	eq
 800bab8:	6143      	streq	r3, [r0, #20]
 800baba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800babe:	f8dc c000 	ldr.w	ip, [ip]
 800bac2:	fa0c fc08 	lsl.w	ip, ip, r8
 800bac6:	ea4c 0707 	orr.w	r7, ip, r7
 800baca:	f849 7b04 	str.w	r7, [r9], #4
 800bace:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bad2:	40cf      	lsrs	r7, r1
 800bad4:	e7da      	b.n	800ba8c <rshift+0x4c>
 800bad6:	f851 cb04 	ldr.w	ip, [r1], #4
 800bada:	f847 cf04 	str.w	ip, [r7, #4]!
 800bade:	e7c3      	b.n	800ba68 <rshift+0x28>
 800bae0:	4623      	mov	r3, r4
 800bae2:	e7e1      	b.n	800baa8 <rshift+0x68>

0800bae4 <__hexdig_fun>:
 800bae4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bae8:	2b09      	cmp	r3, #9
 800baea:	d802      	bhi.n	800baf2 <__hexdig_fun+0xe>
 800baec:	3820      	subs	r0, #32
 800baee:	b2c0      	uxtb	r0, r0
 800baf0:	4770      	bx	lr
 800baf2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800baf6:	2b05      	cmp	r3, #5
 800baf8:	d801      	bhi.n	800bafe <__hexdig_fun+0x1a>
 800bafa:	3847      	subs	r0, #71	; 0x47
 800bafc:	e7f7      	b.n	800baee <__hexdig_fun+0xa>
 800bafe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb02:	2b05      	cmp	r3, #5
 800bb04:	d801      	bhi.n	800bb0a <__hexdig_fun+0x26>
 800bb06:	3827      	subs	r0, #39	; 0x27
 800bb08:	e7f1      	b.n	800baee <__hexdig_fun+0xa>
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	4770      	bx	lr
	...

0800bb10 <__gethex>:
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	4617      	mov	r7, r2
 800bb16:	680a      	ldr	r2, [r1, #0]
 800bb18:	b085      	sub	sp, #20
 800bb1a:	f102 0b02 	add.w	fp, r2, #2
 800bb1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb26:	4681      	mov	r9, r0
 800bb28:	468a      	mov	sl, r1
 800bb2a:	9302      	str	r3, [sp, #8]
 800bb2c:	32fe      	adds	r2, #254	; 0xfe
 800bb2e:	eb02 030b 	add.w	r3, r2, fp
 800bb32:	46d8      	mov	r8, fp
 800bb34:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	2830      	cmp	r0, #48	; 0x30
 800bb3c:	d0f7      	beq.n	800bb2e <__gethex+0x1e>
 800bb3e:	f7ff ffd1 	bl	800bae4 <__hexdig_fun>
 800bb42:	4604      	mov	r4, r0
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d138      	bne.n	800bbba <__gethex+0xaa>
 800bb48:	49a7      	ldr	r1, [pc, #668]	; (800bde8 <__gethex+0x2d8>)
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	f7ff ff09 	bl	800b964 <strncmp>
 800bb52:	4606      	mov	r6, r0
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d169      	bne.n	800bc2c <__gethex+0x11c>
 800bb58:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bb5c:	465d      	mov	r5, fp
 800bb5e:	f7ff ffc1 	bl	800bae4 <__hexdig_fun>
 800bb62:	2800      	cmp	r0, #0
 800bb64:	d064      	beq.n	800bc30 <__gethex+0x120>
 800bb66:	465a      	mov	r2, fp
 800bb68:	7810      	ldrb	r0, [r2, #0]
 800bb6a:	2830      	cmp	r0, #48	; 0x30
 800bb6c:	4690      	mov	r8, r2
 800bb6e:	f102 0201 	add.w	r2, r2, #1
 800bb72:	d0f9      	beq.n	800bb68 <__gethex+0x58>
 800bb74:	f7ff ffb6 	bl	800bae4 <__hexdig_fun>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	fab0 f480 	clz	r4, r0
 800bb7e:	0964      	lsrs	r4, r4, #5
 800bb80:	465e      	mov	r6, fp
 800bb82:	9301      	str	r3, [sp, #4]
 800bb84:	4642      	mov	r2, r8
 800bb86:	4615      	mov	r5, r2
 800bb88:	3201      	adds	r2, #1
 800bb8a:	7828      	ldrb	r0, [r5, #0]
 800bb8c:	f7ff ffaa 	bl	800bae4 <__hexdig_fun>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d1f8      	bne.n	800bb86 <__gethex+0x76>
 800bb94:	4994      	ldr	r1, [pc, #592]	; (800bde8 <__gethex+0x2d8>)
 800bb96:	2201      	movs	r2, #1
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f7ff fee3 	bl	800b964 <strncmp>
 800bb9e:	b978      	cbnz	r0, 800bbc0 <__gethex+0xb0>
 800bba0:	b946      	cbnz	r6, 800bbb4 <__gethex+0xa4>
 800bba2:	1c6e      	adds	r6, r5, #1
 800bba4:	4632      	mov	r2, r6
 800bba6:	4615      	mov	r5, r2
 800bba8:	3201      	adds	r2, #1
 800bbaa:	7828      	ldrb	r0, [r5, #0]
 800bbac:	f7ff ff9a 	bl	800bae4 <__hexdig_fun>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d1f8      	bne.n	800bba6 <__gethex+0x96>
 800bbb4:	1b73      	subs	r3, r6, r5
 800bbb6:	009e      	lsls	r6, r3, #2
 800bbb8:	e004      	b.n	800bbc4 <__gethex+0xb4>
 800bbba:	2400      	movs	r4, #0
 800bbbc:	4626      	mov	r6, r4
 800bbbe:	e7e1      	b.n	800bb84 <__gethex+0x74>
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	d1f7      	bne.n	800bbb4 <__gethex+0xa4>
 800bbc4:	782b      	ldrb	r3, [r5, #0]
 800bbc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbca:	2b50      	cmp	r3, #80	; 0x50
 800bbcc:	d13d      	bne.n	800bc4a <__gethex+0x13a>
 800bbce:	786b      	ldrb	r3, [r5, #1]
 800bbd0:	2b2b      	cmp	r3, #43	; 0x2b
 800bbd2:	d02f      	beq.n	800bc34 <__gethex+0x124>
 800bbd4:	2b2d      	cmp	r3, #45	; 0x2d
 800bbd6:	d031      	beq.n	800bc3c <__gethex+0x12c>
 800bbd8:	1c69      	adds	r1, r5, #1
 800bbda:	f04f 0b00 	mov.w	fp, #0
 800bbde:	7808      	ldrb	r0, [r1, #0]
 800bbe0:	f7ff ff80 	bl	800bae4 <__hexdig_fun>
 800bbe4:	1e42      	subs	r2, r0, #1
 800bbe6:	b2d2      	uxtb	r2, r2
 800bbe8:	2a18      	cmp	r2, #24
 800bbea:	d82e      	bhi.n	800bc4a <__gethex+0x13a>
 800bbec:	f1a0 0210 	sub.w	r2, r0, #16
 800bbf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbf4:	f7ff ff76 	bl	800bae4 <__hexdig_fun>
 800bbf8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800bbfc:	fa5f fc8c 	uxtb.w	ip, ip
 800bc00:	f1bc 0f18 	cmp.w	ip, #24
 800bc04:	d91d      	bls.n	800bc42 <__gethex+0x132>
 800bc06:	f1bb 0f00 	cmp.w	fp, #0
 800bc0a:	d000      	beq.n	800bc0e <__gethex+0xfe>
 800bc0c:	4252      	negs	r2, r2
 800bc0e:	4416      	add	r6, r2
 800bc10:	f8ca 1000 	str.w	r1, [sl]
 800bc14:	b1dc      	cbz	r4, 800bc4e <__gethex+0x13e>
 800bc16:	9b01      	ldr	r3, [sp, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bf14      	ite	ne
 800bc1c:	f04f 0800 	movne.w	r8, #0
 800bc20:	f04f 0806 	moveq.w	r8, #6
 800bc24:	4640      	mov	r0, r8
 800bc26:	b005      	add	sp, #20
 800bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2c:	4645      	mov	r5, r8
 800bc2e:	4626      	mov	r6, r4
 800bc30:	2401      	movs	r4, #1
 800bc32:	e7c7      	b.n	800bbc4 <__gethex+0xb4>
 800bc34:	f04f 0b00 	mov.w	fp, #0
 800bc38:	1ca9      	adds	r1, r5, #2
 800bc3a:	e7d0      	b.n	800bbde <__gethex+0xce>
 800bc3c:	f04f 0b01 	mov.w	fp, #1
 800bc40:	e7fa      	b.n	800bc38 <__gethex+0x128>
 800bc42:	230a      	movs	r3, #10
 800bc44:	fb03 0002 	mla	r0, r3, r2, r0
 800bc48:	e7d0      	b.n	800bbec <__gethex+0xdc>
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	e7e0      	b.n	800bc10 <__gethex+0x100>
 800bc4e:	eba5 0308 	sub.w	r3, r5, r8
 800bc52:	3b01      	subs	r3, #1
 800bc54:	4621      	mov	r1, r4
 800bc56:	2b07      	cmp	r3, #7
 800bc58:	dc0a      	bgt.n	800bc70 <__gethex+0x160>
 800bc5a:	4648      	mov	r0, r9
 800bc5c:	f7fe f91e 	bl	8009e9c <_Balloc>
 800bc60:	4604      	mov	r4, r0
 800bc62:	b940      	cbnz	r0, 800bc76 <__gethex+0x166>
 800bc64:	4b61      	ldr	r3, [pc, #388]	; (800bdec <__gethex+0x2dc>)
 800bc66:	4602      	mov	r2, r0
 800bc68:	21e4      	movs	r1, #228	; 0xe4
 800bc6a:	4861      	ldr	r0, [pc, #388]	; (800bdf0 <__gethex+0x2e0>)
 800bc6c:	f7ff feb4 	bl	800b9d8 <__assert_func>
 800bc70:	3101      	adds	r1, #1
 800bc72:	105b      	asrs	r3, r3, #1
 800bc74:	e7ef      	b.n	800bc56 <__gethex+0x146>
 800bc76:	f100 0a14 	add.w	sl, r0, #20
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	495a      	ldr	r1, [pc, #360]	; (800bde8 <__gethex+0x2d8>)
 800bc7e:	f8cd a004 	str.w	sl, [sp, #4]
 800bc82:	469b      	mov	fp, r3
 800bc84:	45a8      	cmp	r8, r5
 800bc86:	d342      	bcc.n	800bd0e <__gethex+0x1fe>
 800bc88:	9801      	ldr	r0, [sp, #4]
 800bc8a:	f840 bb04 	str.w	fp, [r0], #4
 800bc8e:	eba0 000a 	sub.w	r0, r0, sl
 800bc92:	1080      	asrs	r0, r0, #2
 800bc94:	6120      	str	r0, [r4, #16]
 800bc96:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bc9a:	4658      	mov	r0, fp
 800bc9c:	f7fe f9f0 	bl	800a080 <__hi0bits>
 800bca0:	683d      	ldr	r5, [r7, #0]
 800bca2:	eba8 0000 	sub.w	r0, r8, r0
 800bca6:	42a8      	cmp	r0, r5
 800bca8:	dd59      	ble.n	800bd5e <__gethex+0x24e>
 800bcaa:	eba0 0805 	sub.w	r8, r0, r5
 800bcae:	4641      	mov	r1, r8
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f7fe fd7f 	bl	800a7b4 <__any_on>
 800bcb6:	4683      	mov	fp, r0
 800bcb8:	b1b8      	cbz	r0, 800bcea <__gethex+0x1da>
 800bcba:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800bcbe:	1159      	asrs	r1, r3, #5
 800bcc0:	f003 021f 	and.w	r2, r3, #31
 800bcc4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bcc8:	f04f 0b01 	mov.w	fp, #1
 800bccc:	fa0b f202 	lsl.w	r2, fp, r2
 800bcd0:	420a      	tst	r2, r1
 800bcd2:	d00a      	beq.n	800bcea <__gethex+0x1da>
 800bcd4:	455b      	cmp	r3, fp
 800bcd6:	dd06      	ble.n	800bce6 <__gethex+0x1d6>
 800bcd8:	f1a8 0102 	sub.w	r1, r8, #2
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f7fe fd69 	bl	800a7b4 <__any_on>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d138      	bne.n	800bd58 <__gethex+0x248>
 800bce6:	f04f 0b02 	mov.w	fp, #2
 800bcea:	4641      	mov	r1, r8
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7ff fea7 	bl	800ba40 <rshift>
 800bcf2:	4446      	add	r6, r8
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	42b3      	cmp	r3, r6
 800bcf8:	da41      	bge.n	800bd7e <__gethex+0x26e>
 800bcfa:	4621      	mov	r1, r4
 800bcfc:	4648      	mov	r0, r9
 800bcfe:	f7fe f90d 	bl	8009f1c <_Bfree>
 800bd02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd04:	2300      	movs	r3, #0
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bd0c:	e78a      	b.n	800bc24 <__gethex+0x114>
 800bd0e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bd12:	2a2e      	cmp	r2, #46	; 0x2e
 800bd14:	d014      	beq.n	800bd40 <__gethex+0x230>
 800bd16:	2b20      	cmp	r3, #32
 800bd18:	d106      	bne.n	800bd28 <__gethex+0x218>
 800bd1a:	9b01      	ldr	r3, [sp, #4]
 800bd1c:	f843 bb04 	str.w	fp, [r3], #4
 800bd20:	f04f 0b00 	mov.w	fp, #0
 800bd24:	9301      	str	r3, [sp, #4]
 800bd26:	465b      	mov	r3, fp
 800bd28:	7828      	ldrb	r0, [r5, #0]
 800bd2a:	9303      	str	r3, [sp, #12]
 800bd2c:	f7ff feda 	bl	800bae4 <__hexdig_fun>
 800bd30:	9b03      	ldr	r3, [sp, #12]
 800bd32:	f000 000f 	and.w	r0, r0, #15
 800bd36:	4098      	lsls	r0, r3
 800bd38:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	e7a1      	b.n	800bc84 <__gethex+0x174>
 800bd40:	45a8      	cmp	r8, r5
 800bd42:	d8e8      	bhi.n	800bd16 <__gethex+0x206>
 800bd44:	2201      	movs	r2, #1
 800bd46:	4628      	mov	r0, r5
 800bd48:	9303      	str	r3, [sp, #12]
 800bd4a:	f7ff fe0b 	bl	800b964 <strncmp>
 800bd4e:	4926      	ldr	r1, [pc, #152]	; (800bde8 <__gethex+0x2d8>)
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d1df      	bne.n	800bd16 <__gethex+0x206>
 800bd56:	e795      	b.n	800bc84 <__gethex+0x174>
 800bd58:	f04f 0b03 	mov.w	fp, #3
 800bd5c:	e7c5      	b.n	800bcea <__gethex+0x1da>
 800bd5e:	da0b      	bge.n	800bd78 <__gethex+0x268>
 800bd60:	eba5 0800 	sub.w	r8, r5, r0
 800bd64:	4621      	mov	r1, r4
 800bd66:	4642      	mov	r2, r8
 800bd68:	4648      	mov	r0, r9
 800bd6a:	f7fe faf1 	bl	800a350 <__lshift>
 800bd6e:	eba6 0608 	sub.w	r6, r6, r8
 800bd72:	4604      	mov	r4, r0
 800bd74:	f100 0a14 	add.w	sl, r0, #20
 800bd78:	f04f 0b00 	mov.w	fp, #0
 800bd7c:	e7ba      	b.n	800bcf4 <__gethex+0x1e4>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	42b3      	cmp	r3, r6
 800bd82:	dd73      	ble.n	800be6c <__gethex+0x35c>
 800bd84:	1b9e      	subs	r6, r3, r6
 800bd86:	42b5      	cmp	r5, r6
 800bd88:	dc34      	bgt.n	800bdf4 <__gethex+0x2e4>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d023      	beq.n	800bdd8 <__gethex+0x2c8>
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d025      	beq.n	800bde0 <__gethex+0x2d0>
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d115      	bne.n	800bdc4 <__gethex+0x2b4>
 800bd98:	42b5      	cmp	r5, r6
 800bd9a:	d113      	bne.n	800bdc4 <__gethex+0x2b4>
 800bd9c:	2d01      	cmp	r5, #1
 800bd9e:	d10b      	bne.n	800bdb8 <__gethex+0x2a8>
 800bda0:	9a02      	ldr	r2, [sp, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6013      	str	r3, [r2, #0]
 800bda6:	2301      	movs	r3, #1
 800bda8:	6123      	str	r3, [r4, #16]
 800bdaa:	f8ca 3000 	str.w	r3, [sl]
 800bdae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bdb0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bdb4:	601c      	str	r4, [r3, #0]
 800bdb6:	e735      	b.n	800bc24 <__gethex+0x114>
 800bdb8:	1e69      	subs	r1, r5, #1
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f7fe fcfa 	bl	800a7b4 <__any_on>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d1ed      	bne.n	800bda0 <__gethex+0x290>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4648      	mov	r0, r9
 800bdc8:	f7fe f8a8 	bl	8009f1c <_Bfree>
 800bdcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdce:	2300      	movs	r3, #0
 800bdd0:	6013      	str	r3, [r2, #0]
 800bdd2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bdd6:	e725      	b.n	800bc24 <__gethex+0x114>
 800bdd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1f2      	bne.n	800bdc4 <__gethex+0x2b4>
 800bdde:	e7df      	b.n	800bda0 <__gethex+0x290>
 800bde0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1dc      	bne.n	800bda0 <__gethex+0x290>
 800bde6:	e7ed      	b.n	800bdc4 <__gethex+0x2b4>
 800bde8:	0800c9ec 	.word	0x0800c9ec
 800bdec:	0800c885 	.word	0x0800c885
 800bdf0:	0800cb96 	.word	0x0800cb96
 800bdf4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800bdf8:	f1bb 0f00 	cmp.w	fp, #0
 800bdfc:	d133      	bne.n	800be66 <__gethex+0x356>
 800bdfe:	f1b8 0f00 	cmp.w	r8, #0
 800be02:	d004      	beq.n	800be0e <__gethex+0x2fe>
 800be04:	4641      	mov	r1, r8
 800be06:	4620      	mov	r0, r4
 800be08:	f7fe fcd4 	bl	800a7b4 <__any_on>
 800be0c:	4683      	mov	fp, r0
 800be0e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800be12:	2301      	movs	r3, #1
 800be14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be18:	f008 081f 	and.w	r8, r8, #31
 800be1c:	fa03 f308 	lsl.w	r3, r3, r8
 800be20:	4213      	tst	r3, r2
 800be22:	4631      	mov	r1, r6
 800be24:	4620      	mov	r0, r4
 800be26:	bf18      	it	ne
 800be28:	f04b 0b02 	orrne.w	fp, fp, #2
 800be2c:	1bad      	subs	r5, r5, r6
 800be2e:	f7ff fe07 	bl	800ba40 <rshift>
 800be32:	687e      	ldr	r6, [r7, #4]
 800be34:	f04f 0802 	mov.w	r8, #2
 800be38:	f1bb 0f00 	cmp.w	fp, #0
 800be3c:	d04a      	beq.n	800bed4 <__gethex+0x3c4>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2b02      	cmp	r3, #2
 800be42:	d016      	beq.n	800be72 <__gethex+0x362>
 800be44:	2b03      	cmp	r3, #3
 800be46:	d018      	beq.n	800be7a <__gethex+0x36a>
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d109      	bne.n	800be60 <__gethex+0x350>
 800be4c:	f01b 0f02 	tst.w	fp, #2
 800be50:	d006      	beq.n	800be60 <__gethex+0x350>
 800be52:	f8da 3000 	ldr.w	r3, [sl]
 800be56:	ea4b 0b03 	orr.w	fp, fp, r3
 800be5a:	f01b 0f01 	tst.w	fp, #1
 800be5e:	d10f      	bne.n	800be80 <__gethex+0x370>
 800be60:	f048 0810 	orr.w	r8, r8, #16
 800be64:	e036      	b.n	800bed4 <__gethex+0x3c4>
 800be66:	f04f 0b01 	mov.w	fp, #1
 800be6a:	e7d0      	b.n	800be0e <__gethex+0x2fe>
 800be6c:	f04f 0801 	mov.w	r8, #1
 800be70:	e7e2      	b.n	800be38 <__gethex+0x328>
 800be72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be74:	f1c3 0301 	rsb	r3, r3, #1
 800be78:	930f      	str	r3, [sp, #60]	; 0x3c
 800be7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0ef      	beq.n	800be60 <__gethex+0x350>
 800be80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be84:	f104 0214 	add.w	r2, r4, #20
 800be88:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800be92:	2300      	movs	r3, #0
 800be94:	4694      	mov	ip, r2
 800be96:	f852 1b04 	ldr.w	r1, [r2], #4
 800be9a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800be9e:	d01e      	beq.n	800bede <__gethex+0x3ce>
 800bea0:	3101      	adds	r1, #1
 800bea2:	f8cc 1000 	str.w	r1, [ip]
 800bea6:	f1b8 0f02 	cmp.w	r8, #2
 800beaa:	f104 0214 	add.w	r2, r4, #20
 800beae:	d13d      	bne.n	800bf2c <__gethex+0x41c>
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	3b01      	subs	r3, #1
 800beb4:	42ab      	cmp	r3, r5
 800beb6:	d10b      	bne.n	800bed0 <__gethex+0x3c0>
 800beb8:	1169      	asrs	r1, r5, #5
 800beba:	2301      	movs	r3, #1
 800bebc:	f005 051f 	and.w	r5, r5, #31
 800bec0:	fa03 f505 	lsl.w	r5, r3, r5
 800bec4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bec8:	421d      	tst	r5, r3
 800beca:	bf18      	it	ne
 800becc:	f04f 0801 	movne.w	r8, #1
 800bed0:	f048 0820 	orr.w	r8, r8, #32
 800bed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bed6:	601c      	str	r4, [r3, #0]
 800bed8:	9b02      	ldr	r3, [sp, #8]
 800beda:	601e      	str	r6, [r3, #0]
 800bedc:	e6a2      	b.n	800bc24 <__gethex+0x114>
 800bede:	4290      	cmp	r0, r2
 800bee0:	f842 3c04 	str.w	r3, [r2, #-4]
 800bee4:	d8d6      	bhi.n	800be94 <__gethex+0x384>
 800bee6:	68a2      	ldr	r2, [r4, #8]
 800bee8:	4593      	cmp	fp, r2
 800beea:	db17      	blt.n	800bf1c <__gethex+0x40c>
 800beec:	6861      	ldr	r1, [r4, #4]
 800beee:	4648      	mov	r0, r9
 800bef0:	3101      	adds	r1, #1
 800bef2:	f7fd ffd3 	bl	8009e9c <_Balloc>
 800bef6:	4682      	mov	sl, r0
 800bef8:	b918      	cbnz	r0, 800bf02 <__gethex+0x3f2>
 800befa:	4b1b      	ldr	r3, [pc, #108]	; (800bf68 <__gethex+0x458>)
 800befc:	4602      	mov	r2, r0
 800befe:	2184      	movs	r1, #132	; 0x84
 800bf00:	e6b3      	b.n	800bc6a <__gethex+0x15a>
 800bf02:	6922      	ldr	r2, [r4, #16]
 800bf04:	3202      	adds	r2, #2
 800bf06:	f104 010c 	add.w	r1, r4, #12
 800bf0a:	0092      	lsls	r2, r2, #2
 800bf0c:	300c      	adds	r0, #12
 800bf0e:	f7ff fd4b 	bl	800b9a8 <memcpy>
 800bf12:	4621      	mov	r1, r4
 800bf14:	4648      	mov	r0, r9
 800bf16:	f7fe f801 	bl	8009f1c <_Bfree>
 800bf1a:	4654      	mov	r4, sl
 800bf1c:	6922      	ldr	r2, [r4, #16]
 800bf1e:	1c51      	adds	r1, r2, #1
 800bf20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf24:	6121      	str	r1, [r4, #16]
 800bf26:	2101      	movs	r1, #1
 800bf28:	6151      	str	r1, [r2, #20]
 800bf2a:	e7bc      	b.n	800bea6 <__gethex+0x396>
 800bf2c:	6921      	ldr	r1, [r4, #16]
 800bf2e:	4559      	cmp	r1, fp
 800bf30:	dd0b      	ble.n	800bf4a <__gethex+0x43a>
 800bf32:	2101      	movs	r1, #1
 800bf34:	4620      	mov	r0, r4
 800bf36:	f7ff fd83 	bl	800ba40 <rshift>
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	3601      	adds	r6, #1
 800bf3e:	42b3      	cmp	r3, r6
 800bf40:	f6ff aedb 	blt.w	800bcfa <__gethex+0x1ea>
 800bf44:	f04f 0801 	mov.w	r8, #1
 800bf48:	e7c2      	b.n	800bed0 <__gethex+0x3c0>
 800bf4a:	f015 051f 	ands.w	r5, r5, #31
 800bf4e:	d0f9      	beq.n	800bf44 <__gethex+0x434>
 800bf50:	9b01      	ldr	r3, [sp, #4]
 800bf52:	441a      	add	r2, r3
 800bf54:	f1c5 0520 	rsb	r5, r5, #32
 800bf58:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bf5c:	f7fe f890 	bl	800a080 <__hi0bits>
 800bf60:	42a8      	cmp	r0, r5
 800bf62:	dbe6      	blt.n	800bf32 <__gethex+0x422>
 800bf64:	e7ee      	b.n	800bf44 <__gethex+0x434>
 800bf66:	bf00      	nop
 800bf68:	0800c885 	.word	0x0800c885

0800bf6c <L_shift>:
 800bf6c:	f1c2 0208 	rsb	r2, r2, #8
 800bf70:	0092      	lsls	r2, r2, #2
 800bf72:	b570      	push	{r4, r5, r6, lr}
 800bf74:	f1c2 0620 	rsb	r6, r2, #32
 800bf78:	6843      	ldr	r3, [r0, #4]
 800bf7a:	6804      	ldr	r4, [r0, #0]
 800bf7c:	fa03 f506 	lsl.w	r5, r3, r6
 800bf80:	432c      	orrs	r4, r5
 800bf82:	40d3      	lsrs	r3, r2
 800bf84:	6004      	str	r4, [r0, #0]
 800bf86:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf8a:	4288      	cmp	r0, r1
 800bf8c:	d3f4      	bcc.n	800bf78 <L_shift+0xc>
 800bf8e:	bd70      	pop	{r4, r5, r6, pc}

0800bf90 <__match>:
 800bf90:	b530      	push	{r4, r5, lr}
 800bf92:	6803      	ldr	r3, [r0, #0]
 800bf94:	3301      	adds	r3, #1
 800bf96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf9a:	b914      	cbnz	r4, 800bfa2 <__match+0x12>
 800bf9c:	6003      	str	r3, [r0, #0]
 800bf9e:	2001      	movs	r0, #1
 800bfa0:	bd30      	pop	{r4, r5, pc}
 800bfa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfa6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bfaa:	2d19      	cmp	r5, #25
 800bfac:	bf98      	it	ls
 800bfae:	3220      	addls	r2, #32
 800bfb0:	42a2      	cmp	r2, r4
 800bfb2:	d0f0      	beq.n	800bf96 <__match+0x6>
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	e7f3      	b.n	800bfa0 <__match+0x10>

0800bfb8 <__hexnan>:
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	680b      	ldr	r3, [r1, #0]
 800bfbe:	6801      	ldr	r1, [r0, #0]
 800bfc0:	115e      	asrs	r6, r3, #5
 800bfc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfc6:	f013 031f 	ands.w	r3, r3, #31
 800bfca:	b087      	sub	sp, #28
 800bfcc:	bf18      	it	ne
 800bfce:	3604      	addne	r6, #4
 800bfd0:	2500      	movs	r5, #0
 800bfd2:	1f37      	subs	r7, r6, #4
 800bfd4:	4682      	mov	sl, r0
 800bfd6:	4690      	mov	r8, r2
 800bfd8:	9301      	str	r3, [sp, #4]
 800bfda:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfde:	46b9      	mov	r9, r7
 800bfe0:	463c      	mov	r4, r7
 800bfe2:	9502      	str	r5, [sp, #8]
 800bfe4:	46ab      	mov	fp, r5
 800bfe6:	784a      	ldrb	r2, [r1, #1]
 800bfe8:	1c4b      	adds	r3, r1, #1
 800bfea:	9303      	str	r3, [sp, #12]
 800bfec:	b342      	cbz	r2, 800c040 <__hexnan+0x88>
 800bfee:	4610      	mov	r0, r2
 800bff0:	9105      	str	r1, [sp, #20]
 800bff2:	9204      	str	r2, [sp, #16]
 800bff4:	f7ff fd76 	bl	800bae4 <__hexdig_fun>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d14f      	bne.n	800c09c <__hexnan+0xe4>
 800bffc:	9a04      	ldr	r2, [sp, #16]
 800bffe:	9905      	ldr	r1, [sp, #20]
 800c000:	2a20      	cmp	r2, #32
 800c002:	d818      	bhi.n	800c036 <__hexnan+0x7e>
 800c004:	9b02      	ldr	r3, [sp, #8]
 800c006:	459b      	cmp	fp, r3
 800c008:	dd13      	ble.n	800c032 <__hexnan+0x7a>
 800c00a:	454c      	cmp	r4, r9
 800c00c:	d206      	bcs.n	800c01c <__hexnan+0x64>
 800c00e:	2d07      	cmp	r5, #7
 800c010:	dc04      	bgt.n	800c01c <__hexnan+0x64>
 800c012:	462a      	mov	r2, r5
 800c014:	4649      	mov	r1, r9
 800c016:	4620      	mov	r0, r4
 800c018:	f7ff ffa8 	bl	800bf6c <L_shift>
 800c01c:	4544      	cmp	r4, r8
 800c01e:	d950      	bls.n	800c0c2 <__hexnan+0x10a>
 800c020:	2300      	movs	r3, #0
 800c022:	f1a4 0904 	sub.w	r9, r4, #4
 800c026:	f844 3c04 	str.w	r3, [r4, #-4]
 800c02a:	f8cd b008 	str.w	fp, [sp, #8]
 800c02e:	464c      	mov	r4, r9
 800c030:	461d      	mov	r5, r3
 800c032:	9903      	ldr	r1, [sp, #12]
 800c034:	e7d7      	b.n	800bfe6 <__hexnan+0x2e>
 800c036:	2a29      	cmp	r2, #41	; 0x29
 800c038:	d155      	bne.n	800c0e6 <__hexnan+0x12e>
 800c03a:	3102      	adds	r1, #2
 800c03c:	f8ca 1000 	str.w	r1, [sl]
 800c040:	f1bb 0f00 	cmp.w	fp, #0
 800c044:	d04f      	beq.n	800c0e6 <__hexnan+0x12e>
 800c046:	454c      	cmp	r4, r9
 800c048:	d206      	bcs.n	800c058 <__hexnan+0xa0>
 800c04a:	2d07      	cmp	r5, #7
 800c04c:	dc04      	bgt.n	800c058 <__hexnan+0xa0>
 800c04e:	462a      	mov	r2, r5
 800c050:	4649      	mov	r1, r9
 800c052:	4620      	mov	r0, r4
 800c054:	f7ff ff8a 	bl	800bf6c <L_shift>
 800c058:	4544      	cmp	r4, r8
 800c05a:	d934      	bls.n	800c0c6 <__hexnan+0x10e>
 800c05c:	f1a8 0204 	sub.w	r2, r8, #4
 800c060:	4623      	mov	r3, r4
 800c062:	f853 1b04 	ldr.w	r1, [r3], #4
 800c066:	f842 1f04 	str.w	r1, [r2, #4]!
 800c06a:	429f      	cmp	r7, r3
 800c06c:	d2f9      	bcs.n	800c062 <__hexnan+0xaa>
 800c06e:	1b3b      	subs	r3, r7, r4
 800c070:	f023 0303 	bic.w	r3, r3, #3
 800c074:	3304      	adds	r3, #4
 800c076:	3e03      	subs	r6, #3
 800c078:	3401      	adds	r4, #1
 800c07a:	42a6      	cmp	r6, r4
 800c07c:	bf38      	it	cc
 800c07e:	2304      	movcc	r3, #4
 800c080:	4443      	add	r3, r8
 800c082:	2200      	movs	r2, #0
 800c084:	f843 2b04 	str.w	r2, [r3], #4
 800c088:	429f      	cmp	r7, r3
 800c08a:	d2fb      	bcs.n	800c084 <__hexnan+0xcc>
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	b91b      	cbnz	r3, 800c098 <__hexnan+0xe0>
 800c090:	4547      	cmp	r7, r8
 800c092:	d126      	bne.n	800c0e2 <__hexnan+0x12a>
 800c094:	2301      	movs	r3, #1
 800c096:	603b      	str	r3, [r7, #0]
 800c098:	2005      	movs	r0, #5
 800c09a:	e025      	b.n	800c0e8 <__hexnan+0x130>
 800c09c:	3501      	adds	r5, #1
 800c09e:	2d08      	cmp	r5, #8
 800c0a0:	f10b 0b01 	add.w	fp, fp, #1
 800c0a4:	dd06      	ble.n	800c0b4 <__hexnan+0xfc>
 800c0a6:	4544      	cmp	r4, r8
 800c0a8:	d9c3      	bls.n	800c032 <__hexnan+0x7a>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0b0:	2501      	movs	r5, #1
 800c0b2:	3c04      	subs	r4, #4
 800c0b4:	6822      	ldr	r2, [r4, #0]
 800c0b6:	f000 000f 	and.w	r0, r0, #15
 800c0ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c0be:	6020      	str	r0, [r4, #0]
 800c0c0:	e7b7      	b.n	800c032 <__hexnan+0x7a>
 800c0c2:	2508      	movs	r5, #8
 800c0c4:	e7b5      	b.n	800c032 <__hexnan+0x7a>
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d0df      	beq.n	800c08c <__hexnan+0xd4>
 800c0cc:	f1c3 0320 	rsb	r3, r3, #32
 800c0d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0d4:	40da      	lsrs	r2, r3
 800c0d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c0da:	4013      	ands	r3, r2
 800c0dc:	f846 3c04 	str.w	r3, [r6, #-4]
 800c0e0:	e7d4      	b.n	800c08c <__hexnan+0xd4>
 800c0e2:	3f04      	subs	r7, #4
 800c0e4:	e7d2      	b.n	800c08c <__hexnan+0xd4>
 800c0e6:	2004      	movs	r0, #4
 800c0e8:	b007      	add	sp, #28
 800c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c0ee <__ascii_mbtowc>:
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	b901      	cbnz	r1, 800c0f4 <__ascii_mbtowc+0x6>
 800c0f2:	a901      	add	r1, sp, #4
 800c0f4:	b142      	cbz	r2, 800c108 <__ascii_mbtowc+0x1a>
 800c0f6:	b14b      	cbz	r3, 800c10c <__ascii_mbtowc+0x1e>
 800c0f8:	7813      	ldrb	r3, [r2, #0]
 800c0fa:	600b      	str	r3, [r1, #0]
 800c0fc:	7812      	ldrb	r2, [r2, #0]
 800c0fe:	1e10      	subs	r0, r2, #0
 800c100:	bf18      	it	ne
 800c102:	2001      	movne	r0, #1
 800c104:	b002      	add	sp, #8
 800c106:	4770      	bx	lr
 800c108:	4610      	mov	r0, r2
 800c10a:	e7fb      	b.n	800c104 <__ascii_mbtowc+0x16>
 800c10c:	f06f 0001 	mvn.w	r0, #1
 800c110:	e7f8      	b.n	800c104 <__ascii_mbtowc+0x16>

0800c112 <_realloc_r>:
 800c112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c116:	4680      	mov	r8, r0
 800c118:	4614      	mov	r4, r2
 800c11a:	460e      	mov	r6, r1
 800c11c:	b921      	cbnz	r1, 800c128 <_realloc_r+0x16>
 800c11e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c122:	4611      	mov	r1, r2
 800c124:	f7fd be2e 	b.w	8009d84 <_malloc_r>
 800c128:	b92a      	cbnz	r2, 800c136 <_realloc_r+0x24>
 800c12a:	f7fd fdb7 	bl	8009c9c <_free_r>
 800c12e:	4625      	mov	r5, r4
 800c130:	4628      	mov	r0, r5
 800c132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c136:	f000 f842 	bl	800c1be <_malloc_usable_size_r>
 800c13a:	4284      	cmp	r4, r0
 800c13c:	4607      	mov	r7, r0
 800c13e:	d802      	bhi.n	800c146 <_realloc_r+0x34>
 800c140:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c144:	d812      	bhi.n	800c16c <_realloc_r+0x5a>
 800c146:	4621      	mov	r1, r4
 800c148:	4640      	mov	r0, r8
 800c14a:	f7fd fe1b 	bl	8009d84 <_malloc_r>
 800c14e:	4605      	mov	r5, r0
 800c150:	2800      	cmp	r0, #0
 800c152:	d0ed      	beq.n	800c130 <_realloc_r+0x1e>
 800c154:	42bc      	cmp	r4, r7
 800c156:	4622      	mov	r2, r4
 800c158:	4631      	mov	r1, r6
 800c15a:	bf28      	it	cs
 800c15c:	463a      	movcs	r2, r7
 800c15e:	f7ff fc23 	bl	800b9a8 <memcpy>
 800c162:	4631      	mov	r1, r6
 800c164:	4640      	mov	r0, r8
 800c166:	f7fd fd99 	bl	8009c9c <_free_r>
 800c16a:	e7e1      	b.n	800c130 <_realloc_r+0x1e>
 800c16c:	4635      	mov	r5, r6
 800c16e:	e7df      	b.n	800c130 <_realloc_r+0x1e>

0800c170 <__ascii_wctomb>:
 800c170:	b149      	cbz	r1, 800c186 <__ascii_wctomb+0x16>
 800c172:	2aff      	cmp	r2, #255	; 0xff
 800c174:	bf85      	ittet	hi
 800c176:	238a      	movhi	r3, #138	; 0x8a
 800c178:	6003      	strhi	r3, [r0, #0]
 800c17a:	700a      	strbls	r2, [r1, #0]
 800c17c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c180:	bf98      	it	ls
 800c182:	2001      	movls	r0, #1
 800c184:	4770      	bx	lr
 800c186:	4608      	mov	r0, r1
 800c188:	4770      	bx	lr
	...

0800c18c <fiprintf>:
 800c18c:	b40e      	push	{r1, r2, r3}
 800c18e:	b503      	push	{r0, r1, lr}
 800c190:	4601      	mov	r1, r0
 800c192:	ab03      	add	r3, sp, #12
 800c194:	4805      	ldr	r0, [pc, #20]	; (800c1ac <fiprintf+0x20>)
 800c196:	f853 2b04 	ldr.w	r2, [r3], #4
 800c19a:	6800      	ldr	r0, [r0, #0]
 800c19c:	9301      	str	r3, [sp, #4]
 800c19e:	f000 f83f 	bl	800c220 <_vfiprintf_r>
 800c1a2:	b002      	add	sp, #8
 800c1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1a8:	b003      	add	sp, #12
 800c1aa:	4770      	bx	lr
 800c1ac:	20000154 	.word	0x20000154

0800c1b0 <abort>:
 800c1b0:	b508      	push	{r3, lr}
 800c1b2:	2006      	movs	r0, #6
 800c1b4:	f000 fa0c 	bl	800c5d0 <raise>
 800c1b8:	2001      	movs	r0, #1
 800c1ba:	f7f5 fbbb 	bl	8001934 <_exit>

0800c1be <_malloc_usable_size_r>:
 800c1be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c2:	1f18      	subs	r0, r3, #4
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	bfbc      	itt	lt
 800c1c8:	580b      	ldrlt	r3, [r1, r0]
 800c1ca:	18c0      	addlt	r0, r0, r3
 800c1cc:	4770      	bx	lr

0800c1ce <__sfputc_r>:
 800c1ce:	6893      	ldr	r3, [r2, #8]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	b410      	push	{r4}
 800c1d6:	6093      	str	r3, [r2, #8]
 800c1d8:	da08      	bge.n	800c1ec <__sfputc_r+0x1e>
 800c1da:	6994      	ldr	r4, [r2, #24]
 800c1dc:	42a3      	cmp	r3, r4
 800c1de:	db01      	blt.n	800c1e4 <__sfputc_r+0x16>
 800c1e0:	290a      	cmp	r1, #10
 800c1e2:	d103      	bne.n	800c1ec <__sfputc_r+0x1e>
 800c1e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1e8:	f000 b934 	b.w	800c454 <__swbuf_r>
 800c1ec:	6813      	ldr	r3, [r2, #0]
 800c1ee:	1c58      	adds	r0, r3, #1
 800c1f0:	6010      	str	r0, [r2, #0]
 800c1f2:	7019      	strb	r1, [r3, #0]
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <__sfputs_r>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	4606      	mov	r6, r0
 800c200:	460f      	mov	r7, r1
 800c202:	4614      	mov	r4, r2
 800c204:	18d5      	adds	r5, r2, r3
 800c206:	42ac      	cmp	r4, r5
 800c208:	d101      	bne.n	800c20e <__sfputs_r+0x12>
 800c20a:	2000      	movs	r0, #0
 800c20c:	e007      	b.n	800c21e <__sfputs_r+0x22>
 800c20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c212:	463a      	mov	r2, r7
 800c214:	4630      	mov	r0, r6
 800c216:	f7ff ffda 	bl	800c1ce <__sfputc_r>
 800c21a:	1c43      	adds	r3, r0, #1
 800c21c:	d1f3      	bne.n	800c206 <__sfputs_r+0xa>
 800c21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c220 <_vfiprintf_r>:
 800c220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	460d      	mov	r5, r1
 800c226:	b09d      	sub	sp, #116	; 0x74
 800c228:	4614      	mov	r4, r2
 800c22a:	4698      	mov	r8, r3
 800c22c:	4606      	mov	r6, r0
 800c22e:	b118      	cbz	r0, 800c238 <_vfiprintf_r+0x18>
 800c230:	6a03      	ldr	r3, [r0, #32]
 800c232:	b90b      	cbnz	r3, 800c238 <_vfiprintf_r+0x18>
 800c234:	f7fc fd62 	bl	8008cfc <__sinit>
 800c238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c23a:	07d9      	lsls	r1, r3, #31
 800c23c:	d405      	bmi.n	800c24a <_vfiprintf_r+0x2a>
 800c23e:	89ab      	ldrh	r3, [r5, #12]
 800c240:	059a      	lsls	r2, r3, #22
 800c242:	d402      	bmi.n	800c24a <_vfiprintf_r+0x2a>
 800c244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c246:	f7fc fea4 	bl	8008f92 <__retarget_lock_acquire_recursive>
 800c24a:	89ab      	ldrh	r3, [r5, #12]
 800c24c:	071b      	lsls	r3, r3, #28
 800c24e:	d501      	bpl.n	800c254 <_vfiprintf_r+0x34>
 800c250:	692b      	ldr	r3, [r5, #16]
 800c252:	b99b      	cbnz	r3, 800c27c <_vfiprintf_r+0x5c>
 800c254:	4629      	mov	r1, r5
 800c256:	4630      	mov	r0, r6
 800c258:	f000 f93a 	bl	800c4d0 <__swsetup_r>
 800c25c:	b170      	cbz	r0, 800c27c <_vfiprintf_r+0x5c>
 800c25e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c260:	07dc      	lsls	r4, r3, #31
 800c262:	d504      	bpl.n	800c26e <_vfiprintf_r+0x4e>
 800c264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c268:	b01d      	add	sp, #116	; 0x74
 800c26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	0598      	lsls	r0, r3, #22
 800c272:	d4f7      	bmi.n	800c264 <_vfiprintf_r+0x44>
 800c274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c276:	f7fc fe8d 	bl	8008f94 <__retarget_lock_release_recursive>
 800c27a:	e7f3      	b.n	800c264 <_vfiprintf_r+0x44>
 800c27c:	2300      	movs	r3, #0
 800c27e:	9309      	str	r3, [sp, #36]	; 0x24
 800c280:	2320      	movs	r3, #32
 800c282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c286:	f8cd 800c 	str.w	r8, [sp, #12]
 800c28a:	2330      	movs	r3, #48	; 0x30
 800c28c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c440 <_vfiprintf_r+0x220>
 800c290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c294:	f04f 0901 	mov.w	r9, #1
 800c298:	4623      	mov	r3, r4
 800c29a:	469a      	mov	sl, r3
 800c29c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a0:	b10a      	cbz	r2, 800c2a6 <_vfiprintf_r+0x86>
 800c2a2:	2a25      	cmp	r2, #37	; 0x25
 800c2a4:	d1f9      	bne.n	800c29a <_vfiprintf_r+0x7a>
 800c2a6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2aa:	d00b      	beq.n	800c2c4 <_vfiprintf_r+0xa4>
 800c2ac:	465b      	mov	r3, fp
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f7ff ffa2 	bl	800c1fc <__sfputs_r>
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	f000 80a9 	beq.w	800c410 <_vfiprintf_r+0x1f0>
 800c2be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c0:	445a      	add	r2, fp
 800c2c2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 80a1 	beq.w	800c410 <_vfiprintf_r+0x1f0>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2d8:	f10a 0a01 	add.w	sl, sl, #1
 800c2dc:	9304      	str	r3, [sp, #16]
 800c2de:	9307      	str	r3, [sp, #28]
 800c2e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2e4:	931a      	str	r3, [sp, #104]	; 0x68
 800c2e6:	4654      	mov	r4, sl
 800c2e8:	2205      	movs	r2, #5
 800c2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ee:	4854      	ldr	r0, [pc, #336]	; (800c440 <_vfiprintf_r+0x220>)
 800c2f0:	f7f3 ff76 	bl	80001e0 <memchr>
 800c2f4:	9a04      	ldr	r2, [sp, #16]
 800c2f6:	b9d8      	cbnz	r0, 800c330 <_vfiprintf_r+0x110>
 800c2f8:	06d1      	lsls	r1, r2, #27
 800c2fa:	bf44      	itt	mi
 800c2fc:	2320      	movmi	r3, #32
 800c2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c302:	0713      	lsls	r3, r2, #28
 800c304:	bf44      	itt	mi
 800c306:	232b      	movmi	r3, #43	; 0x2b
 800c308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c30c:	f89a 3000 	ldrb.w	r3, [sl]
 800c310:	2b2a      	cmp	r3, #42	; 0x2a
 800c312:	d015      	beq.n	800c340 <_vfiprintf_r+0x120>
 800c314:	9a07      	ldr	r2, [sp, #28]
 800c316:	4654      	mov	r4, sl
 800c318:	2000      	movs	r0, #0
 800c31a:	f04f 0c0a 	mov.w	ip, #10
 800c31e:	4621      	mov	r1, r4
 800c320:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c324:	3b30      	subs	r3, #48	; 0x30
 800c326:	2b09      	cmp	r3, #9
 800c328:	d94d      	bls.n	800c3c6 <_vfiprintf_r+0x1a6>
 800c32a:	b1b0      	cbz	r0, 800c35a <_vfiprintf_r+0x13a>
 800c32c:	9207      	str	r2, [sp, #28]
 800c32e:	e014      	b.n	800c35a <_vfiprintf_r+0x13a>
 800c330:	eba0 0308 	sub.w	r3, r0, r8
 800c334:	fa09 f303 	lsl.w	r3, r9, r3
 800c338:	4313      	orrs	r3, r2
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	46a2      	mov	sl, r4
 800c33e:	e7d2      	b.n	800c2e6 <_vfiprintf_r+0xc6>
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	1d19      	adds	r1, r3, #4
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	9103      	str	r1, [sp, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfbb      	ittet	lt
 800c34c:	425b      	neglt	r3, r3
 800c34e:	f042 0202 	orrlt.w	r2, r2, #2
 800c352:	9307      	strge	r3, [sp, #28]
 800c354:	9307      	strlt	r3, [sp, #28]
 800c356:	bfb8      	it	lt
 800c358:	9204      	strlt	r2, [sp, #16]
 800c35a:	7823      	ldrb	r3, [r4, #0]
 800c35c:	2b2e      	cmp	r3, #46	; 0x2e
 800c35e:	d10c      	bne.n	800c37a <_vfiprintf_r+0x15a>
 800c360:	7863      	ldrb	r3, [r4, #1]
 800c362:	2b2a      	cmp	r3, #42	; 0x2a
 800c364:	d134      	bne.n	800c3d0 <_vfiprintf_r+0x1b0>
 800c366:	9b03      	ldr	r3, [sp, #12]
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	9203      	str	r2, [sp, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	bfb8      	it	lt
 800c372:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c376:	3402      	adds	r4, #2
 800c378:	9305      	str	r3, [sp, #20]
 800c37a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c450 <_vfiprintf_r+0x230>
 800c37e:	7821      	ldrb	r1, [r4, #0]
 800c380:	2203      	movs	r2, #3
 800c382:	4650      	mov	r0, sl
 800c384:	f7f3 ff2c 	bl	80001e0 <memchr>
 800c388:	b138      	cbz	r0, 800c39a <_vfiprintf_r+0x17a>
 800c38a:	9b04      	ldr	r3, [sp, #16]
 800c38c:	eba0 000a 	sub.w	r0, r0, sl
 800c390:	2240      	movs	r2, #64	; 0x40
 800c392:	4082      	lsls	r2, r0
 800c394:	4313      	orrs	r3, r2
 800c396:	3401      	adds	r4, #1
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c39e:	4829      	ldr	r0, [pc, #164]	; (800c444 <_vfiprintf_r+0x224>)
 800c3a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3a4:	2206      	movs	r2, #6
 800c3a6:	f7f3 ff1b 	bl	80001e0 <memchr>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d03f      	beq.n	800c42e <_vfiprintf_r+0x20e>
 800c3ae:	4b26      	ldr	r3, [pc, #152]	; (800c448 <_vfiprintf_r+0x228>)
 800c3b0:	bb1b      	cbnz	r3, 800c3fa <_vfiprintf_r+0x1da>
 800c3b2:	9b03      	ldr	r3, [sp, #12]
 800c3b4:	3307      	adds	r3, #7
 800c3b6:	f023 0307 	bic.w	r3, r3, #7
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	9303      	str	r3, [sp, #12]
 800c3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c0:	443b      	add	r3, r7
 800c3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c4:	e768      	b.n	800c298 <_vfiprintf_r+0x78>
 800c3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	e7a6      	b.n	800c31e <_vfiprintf_r+0xfe>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	3401      	adds	r4, #1
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	f04f 0c0a 	mov.w	ip, #10
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e2:	3a30      	subs	r2, #48	; 0x30
 800c3e4:	2a09      	cmp	r2, #9
 800c3e6:	d903      	bls.n	800c3f0 <_vfiprintf_r+0x1d0>
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d0c6      	beq.n	800c37a <_vfiprintf_r+0x15a>
 800c3ec:	9105      	str	r1, [sp, #20]
 800c3ee:	e7c4      	b.n	800c37a <_vfiprintf_r+0x15a>
 800c3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e7f0      	b.n	800c3dc <_vfiprintf_r+0x1bc>
 800c3fa:	ab03      	add	r3, sp, #12
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	462a      	mov	r2, r5
 800c400:	4b12      	ldr	r3, [pc, #72]	; (800c44c <_vfiprintf_r+0x22c>)
 800c402:	a904      	add	r1, sp, #16
 800c404:	4630      	mov	r0, r6
 800c406:	f7fb fe17 	bl	8008038 <_printf_float>
 800c40a:	4607      	mov	r7, r0
 800c40c:	1c78      	adds	r0, r7, #1
 800c40e:	d1d6      	bne.n	800c3be <_vfiprintf_r+0x19e>
 800c410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c412:	07d9      	lsls	r1, r3, #31
 800c414:	d405      	bmi.n	800c422 <_vfiprintf_r+0x202>
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	059a      	lsls	r2, r3, #22
 800c41a:	d402      	bmi.n	800c422 <_vfiprintf_r+0x202>
 800c41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c41e:	f7fc fdb9 	bl	8008f94 <__retarget_lock_release_recursive>
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	065b      	lsls	r3, r3, #25
 800c426:	f53f af1d 	bmi.w	800c264 <_vfiprintf_r+0x44>
 800c42a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c42c:	e71c      	b.n	800c268 <_vfiprintf_r+0x48>
 800c42e:	ab03      	add	r3, sp, #12
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	462a      	mov	r2, r5
 800c434:	4b05      	ldr	r3, [pc, #20]	; (800c44c <_vfiprintf_r+0x22c>)
 800c436:	a904      	add	r1, sp, #16
 800c438:	4630      	mov	r0, r6
 800c43a:	f7fc f8a1 	bl	8008580 <_printf_i>
 800c43e:	e7e4      	b.n	800c40a <_vfiprintf_r+0x1ea>
 800c440:	0800cb41 	.word	0x0800cb41
 800c444:	0800cb4b 	.word	0x0800cb4b
 800c448:	08008039 	.word	0x08008039
 800c44c:	0800c1fd 	.word	0x0800c1fd
 800c450:	0800cb47 	.word	0x0800cb47

0800c454 <__swbuf_r>:
 800c454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c456:	460e      	mov	r6, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	4605      	mov	r5, r0
 800c45c:	b118      	cbz	r0, 800c466 <__swbuf_r+0x12>
 800c45e:	6a03      	ldr	r3, [r0, #32]
 800c460:	b90b      	cbnz	r3, 800c466 <__swbuf_r+0x12>
 800c462:	f7fc fc4b 	bl	8008cfc <__sinit>
 800c466:	69a3      	ldr	r3, [r4, #24]
 800c468:	60a3      	str	r3, [r4, #8]
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	071a      	lsls	r2, r3, #28
 800c46e:	d525      	bpl.n	800c4bc <__swbuf_r+0x68>
 800c470:	6923      	ldr	r3, [r4, #16]
 800c472:	b31b      	cbz	r3, 800c4bc <__swbuf_r+0x68>
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	6922      	ldr	r2, [r4, #16]
 800c478:	1a98      	subs	r0, r3, r2
 800c47a:	6963      	ldr	r3, [r4, #20]
 800c47c:	b2f6      	uxtb	r6, r6
 800c47e:	4283      	cmp	r3, r0
 800c480:	4637      	mov	r7, r6
 800c482:	dc04      	bgt.n	800c48e <__swbuf_r+0x3a>
 800c484:	4621      	mov	r1, r4
 800c486:	4628      	mov	r0, r5
 800c488:	f7ff fa2a 	bl	800b8e0 <_fflush_r>
 800c48c:	b9e0      	cbnz	r0, 800c4c8 <__swbuf_r+0x74>
 800c48e:	68a3      	ldr	r3, [r4, #8]
 800c490:	3b01      	subs	r3, #1
 800c492:	60a3      	str	r3, [r4, #8]
 800c494:	6823      	ldr	r3, [r4, #0]
 800c496:	1c5a      	adds	r2, r3, #1
 800c498:	6022      	str	r2, [r4, #0]
 800c49a:	701e      	strb	r6, [r3, #0]
 800c49c:	6962      	ldr	r2, [r4, #20]
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d004      	beq.n	800c4ae <__swbuf_r+0x5a>
 800c4a4:	89a3      	ldrh	r3, [r4, #12]
 800c4a6:	07db      	lsls	r3, r3, #31
 800c4a8:	d506      	bpl.n	800c4b8 <__swbuf_r+0x64>
 800c4aa:	2e0a      	cmp	r6, #10
 800c4ac:	d104      	bne.n	800c4b8 <__swbuf_r+0x64>
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	f7ff fa15 	bl	800b8e0 <_fflush_r>
 800c4b6:	b938      	cbnz	r0, 800c4c8 <__swbuf_r+0x74>
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4bc:	4621      	mov	r1, r4
 800c4be:	4628      	mov	r0, r5
 800c4c0:	f000 f806 	bl	800c4d0 <__swsetup_r>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d0d5      	beq.n	800c474 <__swbuf_r+0x20>
 800c4c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c4cc:	e7f4      	b.n	800c4b8 <__swbuf_r+0x64>
	...

0800c4d0 <__swsetup_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4b2a      	ldr	r3, [pc, #168]	; (800c57c <__swsetup_r+0xac>)
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	6818      	ldr	r0, [r3, #0]
 800c4d8:	460c      	mov	r4, r1
 800c4da:	b118      	cbz	r0, 800c4e4 <__swsetup_r+0x14>
 800c4dc:	6a03      	ldr	r3, [r0, #32]
 800c4de:	b90b      	cbnz	r3, 800c4e4 <__swsetup_r+0x14>
 800c4e0:	f7fc fc0c 	bl	8008cfc <__sinit>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4ea:	0718      	lsls	r0, r3, #28
 800c4ec:	d422      	bmi.n	800c534 <__swsetup_r+0x64>
 800c4ee:	06d9      	lsls	r1, r3, #27
 800c4f0:	d407      	bmi.n	800c502 <__swsetup_r+0x32>
 800c4f2:	2309      	movs	r3, #9
 800c4f4:	602b      	str	r3, [r5, #0]
 800c4f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4fa:	81a3      	strh	r3, [r4, #12]
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c500:	e034      	b.n	800c56c <__swsetup_r+0x9c>
 800c502:	0758      	lsls	r0, r3, #29
 800c504:	d512      	bpl.n	800c52c <__swsetup_r+0x5c>
 800c506:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c508:	b141      	cbz	r1, 800c51c <__swsetup_r+0x4c>
 800c50a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c50e:	4299      	cmp	r1, r3
 800c510:	d002      	beq.n	800c518 <__swsetup_r+0x48>
 800c512:	4628      	mov	r0, r5
 800c514:	f7fd fbc2 	bl	8009c9c <_free_r>
 800c518:	2300      	movs	r3, #0
 800c51a:	6363      	str	r3, [r4, #52]	; 0x34
 800c51c:	89a3      	ldrh	r3, [r4, #12]
 800c51e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c522:	81a3      	strh	r3, [r4, #12]
 800c524:	2300      	movs	r3, #0
 800c526:	6063      	str	r3, [r4, #4]
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	6023      	str	r3, [r4, #0]
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	f043 0308 	orr.w	r3, r3, #8
 800c532:	81a3      	strh	r3, [r4, #12]
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	b94b      	cbnz	r3, 800c54c <__swsetup_r+0x7c>
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c53e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c542:	d003      	beq.n	800c54c <__swsetup_r+0x7c>
 800c544:	4621      	mov	r1, r4
 800c546:	4628      	mov	r0, r5
 800c548:	f000 f884 	bl	800c654 <__smakebuf_r>
 800c54c:	89a0      	ldrh	r0, [r4, #12]
 800c54e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c552:	f010 0301 	ands.w	r3, r0, #1
 800c556:	d00a      	beq.n	800c56e <__swsetup_r+0x9e>
 800c558:	2300      	movs	r3, #0
 800c55a:	60a3      	str	r3, [r4, #8]
 800c55c:	6963      	ldr	r3, [r4, #20]
 800c55e:	425b      	negs	r3, r3
 800c560:	61a3      	str	r3, [r4, #24]
 800c562:	6923      	ldr	r3, [r4, #16]
 800c564:	b943      	cbnz	r3, 800c578 <__swsetup_r+0xa8>
 800c566:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c56a:	d1c4      	bne.n	800c4f6 <__swsetup_r+0x26>
 800c56c:	bd38      	pop	{r3, r4, r5, pc}
 800c56e:	0781      	lsls	r1, r0, #30
 800c570:	bf58      	it	pl
 800c572:	6963      	ldrpl	r3, [r4, #20]
 800c574:	60a3      	str	r3, [r4, #8]
 800c576:	e7f4      	b.n	800c562 <__swsetup_r+0x92>
 800c578:	2000      	movs	r0, #0
 800c57a:	e7f7      	b.n	800c56c <__swsetup_r+0x9c>
 800c57c:	20000154 	.word	0x20000154

0800c580 <_raise_r>:
 800c580:	291f      	cmp	r1, #31
 800c582:	b538      	push	{r3, r4, r5, lr}
 800c584:	4604      	mov	r4, r0
 800c586:	460d      	mov	r5, r1
 800c588:	d904      	bls.n	800c594 <_raise_r+0x14>
 800c58a:	2316      	movs	r3, #22
 800c58c:	6003      	str	r3, [r0, #0]
 800c58e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c592:	bd38      	pop	{r3, r4, r5, pc}
 800c594:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c596:	b112      	cbz	r2, 800c59e <_raise_r+0x1e>
 800c598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c59c:	b94b      	cbnz	r3, 800c5b2 <_raise_r+0x32>
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 f830 	bl	800c604 <_getpid_r>
 800c5a4:	462a      	mov	r2, r5
 800c5a6:	4601      	mov	r1, r0
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5ae:	f000 b817 	b.w	800c5e0 <_kill_r>
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d00a      	beq.n	800c5cc <_raise_r+0x4c>
 800c5b6:	1c59      	adds	r1, r3, #1
 800c5b8:	d103      	bne.n	800c5c2 <_raise_r+0x42>
 800c5ba:	2316      	movs	r3, #22
 800c5bc:	6003      	str	r3, [r0, #0]
 800c5be:	2001      	movs	r0, #1
 800c5c0:	e7e7      	b.n	800c592 <_raise_r+0x12>
 800c5c2:	2400      	movs	r4, #0
 800c5c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	4798      	blx	r3
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	e7e0      	b.n	800c592 <_raise_r+0x12>

0800c5d0 <raise>:
 800c5d0:	4b02      	ldr	r3, [pc, #8]	; (800c5dc <raise+0xc>)
 800c5d2:	4601      	mov	r1, r0
 800c5d4:	6818      	ldr	r0, [r3, #0]
 800c5d6:	f7ff bfd3 	b.w	800c580 <_raise_r>
 800c5da:	bf00      	nop
 800c5dc:	20000154 	.word	0x20000154

0800c5e0 <_kill_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4d07      	ldr	r5, [pc, #28]	; (800c600 <_kill_r+0x20>)
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	4608      	mov	r0, r1
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	602b      	str	r3, [r5, #0]
 800c5ee:	f7f5 f991 	bl	8001914 <_kill>
 800c5f2:	1c43      	adds	r3, r0, #1
 800c5f4:	d102      	bne.n	800c5fc <_kill_r+0x1c>
 800c5f6:	682b      	ldr	r3, [r5, #0]
 800c5f8:	b103      	cbz	r3, 800c5fc <_kill_r+0x1c>
 800c5fa:	6023      	str	r3, [r4, #0]
 800c5fc:	bd38      	pop	{r3, r4, r5, pc}
 800c5fe:	bf00      	nop
 800c600:	20001834 	.word	0x20001834

0800c604 <_getpid_r>:
 800c604:	f7f5 b97e 	b.w	8001904 <_getpid>

0800c608 <__swhatbuf_r>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	460c      	mov	r4, r1
 800c60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c610:	2900      	cmp	r1, #0
 800c612:	b096      	sub	sp, #88	; 0x58
 800c614:	4615      	mov	r5, r2
 800c616:	461e      	mov	r6, r3
 800c618:	da0d      	bge.n	800c636 <__swhatbuf_r+0x2e>
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c620:	f04f 0100 	mov.w	r1, #0
 800c624:	bf0c      	ite	eq
 800c626:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c62a:	2340      	movne	r3, #64	; 0x40
 800c62c:	2000      	movs	r0, #0
 800c62e:	6031      	str	r1, [r6, #0]
 800c630:	602b      	str	r3, [r5, #0]
 800c632:	b016      	add	sp, #88	; 0x58
 800c634:	bd70      	pop	{r4, r5, r6, pc}
 800c636:	466a      	mov	r2, sp
 800c638:	f000 f848 	bl	800c6cc <_fstat_r>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	dbec      	blt.n	800c61a <__swhatbuf_r+0x12>
 800c640:	9901      	ldr	r1, [sp, #4]
 800c642:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c646:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c64a:	4259      	negs	r1, r3
 800c64c:	4159      	adcs	r1, r3
 800c64e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c652:	e7eb      	b.n	800c62c <__swhatbuf_r+0x24>

0800c654 <__smakebuf_r>:
 800c654:	898b      	ldrh	r3, [r1, #12]
 800c656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c658:	079d      	lsls	r5, r3, #30
 800c65a:	4606      	mov	r6, r0
 800c65c:	460c      	mov	r4, r1
 800c65e:	d507      	bpl.n	800c670 <__smakebuf_r+0x1c>
 800c660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	6123      	str	r3, [r4, #16]
 800c668:	2301      	movs	r3, #1
 800c66a:	6163      	str	r3, [r4, #20]
 800c66c:	b002      	add	sp, #8
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
 800c670:	ab01      	add	r3, sp, #4
 800c672:	466a      	mov	r2, sp
 800c674:	f7ff ffc8 	bl	800c608 <__swhatbuf_r>
 800c678:	9900      	ldr	r1, [sp, #0]
 800c67a:	4605      	mov	r5, r0
 800c67c:	4630      	mov	r0, r6
 800c67e:	f7fd fb81 	bl	8009d84 <_malloc_r>
 800c682:	b948      	cbnz	r0, 800c698 <__smakebuf_r+0x44>
 800c684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c688:	059a      	lsls	r2, r3, #22
 800c68a:	d4ef      	bmi.n	800c66c <__smakebuf_r+0x18>
 800c68c:	f023 0303 	bic.w	r3, r3, #3
 800c690:	f043 0302 	orr.w	r3, r3, #2
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	e7e3      	b.n	800c660 <__smakebuf_r+0xc>
 800c698:	89a3      	ldrh	r3, [r4, #12]
 800c69a:	6020      	str	r0, [r4, #0]
 800c69c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	9b00      	ldr	r3, [sp, #0]
 800c6a4:	6163      	str	r3, [r4, #20]
 800c6a6:	9b01      	ldr	r3, [sp, #4]
 800c6a8:	6120      	str	r0, [r4, #16]
 800c6aa:	b15b      	cbz	r3, 800c6c4 <__smakebuf_r+0x70>
 800c6ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f000 f81d 	bl	800c6f0 <_isatty_r>
 800c6b6:	b128      	cbz	r0, 800c6c4 <__smakebuf_r+0x70>
 800c6b8:	89a3      	ldrh	r3, [r4, #12]
 800c6ba:	f023 0303 	bic.w	r3, r3, #3
 800c6be:	f043 0301 	orr.w	r3, r3, #1
 800c6c2:	81a3      	strh	r3, [r4, #12]
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	431d      	orrs	r5, r3
 800c6c8:	81a5      	strh	r5, [r4, #12]
 800c6ca:	e7cf      	b.n	800c66c <__smakebuf_r+0x18>

0800c6cc <_fstat_r>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	4d07      	ldr	r5, [pc, #28]	; (800c6ec <_fstat_r+0x20>)
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	602b      	str	r3, [r5, #0]
 800c6da:	f7f5 f97a 	bl	80019d2 <_fstat>
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	d102      	bne.n	800c6e8 <_fstat_r+0x1c>
 800c6e2:	682b      	ldr	r3, [r5, #0]
 800c6e4:	b103      	cbz	r3, 800c6e8 <_fstat_r+0x1c>
 800c6e6:	6023      	str	r3, [r4, #0]
 800c6e8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20001834 	.word	0x20001834

0800c6f0 <_isatty_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	4d06      	ldr	r5, [pc, #24]	; (800c70c <_isatty_r+0x1c>)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	4608      	mov	r0, r1
 800c6fa:	602b      	str	r3, [r5, #0]
 800c6fc:	f7f5 f979 	bl	80019f2 <_isatty>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d102      	bne.n	800c70a <_isatty_r+0x1a>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	b103      	cbz	r3, 800c70a <_isatty_r+0x1a>
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	bd38      	pop	{r3, r4, r5, pc}
 800c70c:	20001834 	.word	0x20001834

0800c710 <_init>:
 800c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c712:	bf00      	nop
 800c714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c716:	bc08      	pop	{r3}
 800c718:	469e      	mov	lr, r3
 800c71a:	4770      	bx	lr

0800c71c <_fini>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	bf00      	nop
 800c720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c722:	bc08      	pop	{r3}
 800c724:	469e      	mov	lr, r3
 800c726:	4770      	bx	lr
